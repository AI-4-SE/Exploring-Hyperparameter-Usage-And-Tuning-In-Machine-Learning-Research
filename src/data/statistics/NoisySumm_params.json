{
    "src/decode_seq2seq.py": {
        "torch": {
            "device_132": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_134": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_147": {
                "seed": {
                    "value": "random_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random.randint(0, 10000)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_200": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BertForSeq2SeqDecoder.from_pretrained(model_recover_path, config=config, mask_word_id=mask_word_id, search_beam_size=args.beam_size, length_penalty=args.length_penalty, eos_id=eos_word_ids, sos_id=sos_word_id, forbid_duplicate_ngrams=args.forbid_duplicate_ngrams, forbid_ignore_set=forbid_ignore_set, ngram_size=args.ngram_size, min_len=args.min_len, mode=args.mode, max_position_embeddings=args.max_seq_length, pos_shift=args.pos_shift)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_141": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_149": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/run_seq2seq.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "teacher_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.teacher_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_82": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence(config=config)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence_Distill.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence(config=config)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_86": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence(config=config)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence_Distill.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence(config=config)",
                            "Call"
                        ],
                        [
                            "BertForSequenceToSequence.from_pretrained(args.model_name_or_path, config=config, model_type=args.model_type, reuse_position_embedding=True, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_95": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_113": {
                "variable": {
                    "value": "model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_recover_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'model.{}.bin'.format(recover_step))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_115": {
                "variable": {
                    "value": "checkpoint_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "optimizer_recover_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, 'optim.{}.bin'.format(recover_step))",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps, word_drop_prob=args.word_drop_prob, word_shuffle_k=args.word_shuffle_k, sent_shuffle_k=args.sent_shuffle_k, sent_drop_prob=args.sent_drop_prob)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset, shuffle=False)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "per_node_train_batch_size // args.gradient_accumulation_steps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.batch_list_to_batch_tensors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_395": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_396": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_399": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_414": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_398": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_416": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_173": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps, word_drop_prob=args.word_drop_prob, word_shuffle_k=args.word_shuffle_k, sent_shuffle_k=args.sent_shuffle_k, sent_drop_prob=args.sent_drop_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_174": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.Seq2seqDatasetForBert(features=training_features, max_source_len=args.max_source_seq_length, max_target_len=args.max_target_seq_length, vocab_size=tokenizer.vocab_size, cls_id=tokenizer.cls_token_id, sep_id=tokenizer.sep_token_id, pad_id=tokenizer.pad_token_id, mask_id=tokenizer.mask_token_id, random_prob=args.random_prob, keep_prob=args.keep_prob, offset=train_batch_size * global_step, num_training_instances=train_batch_size * args.num_training_steps, word_drop_prob=args.word_drop_prob, word_shuffle_k=args.word_shuffle_k, sent_shuffle_k=args.sent_shuffle_k, sent_drop_prob=args.sent_drop_prob)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clip_grad_norm__227": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__229": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "optim_to_save",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'optimizer': optimizer.state_dict(), 'lr_scheduler': scheduler.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'optim.{}.bin'.format(global_step))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_395": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/s2s_ft/convert_state_dict.py": {
        "torch": {
            "load_36": {
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/s2s_ft/modeling.py": {
        "torch": {
            "Embedding_154": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_155": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_164": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_207": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_208": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(query)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_320": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_462": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_493": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_497": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_outputs[0]",
                            "Subscript"
                        ],
                        [
                            "self.transform(hidden_states)",
                            "Call"
                        ],
                        [
                            "F.linear(hidden_states, weight=self.decoder_weight, bias=self.bias)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.decoder_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_518": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_534": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "num_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_544": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(source_position_ids), target_span_ids, -target_span_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_566": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_ids, target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_568": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(source_ids) * self.source_type_id, torch.ones_like(target_ids) * self.target_type_id, torch.ones_like(pseudo_ids) * self.target_type_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_578": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_position_ids, target_position_ids, target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_633": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_655": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "num_tokens.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "num_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros_like(source_position_ids), target_span_ids, -target_span_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_680": {
                "variable": {
                    "value": "kd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_lprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "teacher_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_680": {
                "variable": {
                    "value": "kd_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_754": {
                "variable": {
                    "value": "student_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(student_source_ids, target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_755": {
                "variable": {
                    "value": "teacher_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(teacher_source_ids, target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_757": {
                "variable": {
                    "value": "student_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(student_source_ids) * self.source_type_id, torch.ones_like(target_ids) * self.target_type_id, torch.ones_like(pseudo_ids) * self.target_type_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_761": {
                "variable": {
                    "value": "teacher_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.ones_like(teacher_source_ids) * self.source_type_id, torch.ones_like(target_ids) * self.target_type_id, torch.ones_like(pseudo_ids) * self.target_type_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_775": {
                "variable": {
                    "value": "student_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(student_source_position_ids, student_target_position_ids, student_target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_776": {
                "variable": {
                    "value": "teacher_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(teacher_source_position_ids, teacher_target_position_ids, teacher_target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_157": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_175": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "split_260": {
                "variable": {
                    "value": "query_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_261": {
                "variable": {
                    "value": "key_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key(encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.key(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_262": {
                "variable": {
                    "value": "value_parts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixed_value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value(encoder_hidden_states)",
                            "Call"
                        ],
                        [
                            "self.value(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "split_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(source_len, target_len, pseudo_len)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_412": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "kl_div_481": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.float().repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_481": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_530": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_651": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_124": {
                "variable": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_231": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_493": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_794": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_812": {
                "input": {
                    "value": "student_prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_812": {
                "input": {
                    "value": "teacher_prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_140": {
                "variable": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "new_postion_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "state_dict[_k].data.new_tensor(torch.ones(size=(config.max_position_embeddings, state_dict[_k].shape[1])), dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "nn.Parameter(data=new_postion_embedding, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.multi_head_attention(mixed_query_layer, mixed_key_layer, mixed_value_layer, attention_mask)",
                            "Call"
                        ],
                        [
                            "(torch.cat(outputs, dim=1),)",
                            "Tuple"
                        ],
                        [
                            "(attention_output,) + self_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "(layer_output,) + self_attention_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "(hidden_states,)",
                            "Tuple"
                        ],
                        [
                            "outputs + (all_hidden_states,)",
                            "BinOp"
                        ],
                        [
                            "outputs + (all_attentions,)",
                            "BinOp"
                        ],
                        [
                            "(sequence_output,) + encoder_outputs[1:]",
                            "BinOp"
                        ],
                        [
                            "self.bert(input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids, position_ids=position_ids, split_lengths=split_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_544": {
                "input": {
                    "value": "source_position_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_593": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_position_matrix < num_tokens.view(-1, 1)).type_as(num_tokens)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "(base_position_matrix < num_tokens.view(-1, 1)).type_as(num_tokens)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_600": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_665": {
                "input": {
                    "value": "source_position_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "masked_select_695": {
                "variable": {
                    "value": "noisy_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(torch.matmul(input_embs, self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0)), self.random_replace_input_k + 1, -1)[1][:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.topk(torch.matmul(input_embs, self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0)), self.random_replace_input_k + 1, -1)[1][:, :, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.tensor(indices).to(torch.bool).to(noisy_source_ids_s.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_695": {
                "variable": {
                    "value": "noisy_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_words.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "top_words.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bernoulli_698": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(*noisy_words.shape) * (1 - self.random_replace_input_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_712": {
                "variable": {
                    "value": "noisy_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.topk(torch.matmul(input_embs, self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0)), self.random_replace_input_k + 1, -1)[1][:, :, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.topk(torch.matmul(input_embs, self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0)), self.random_replace_input_k + 1, -1)[1][:, :, 1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mask": {
                    "value": "torch.tensor(indices).to(torch.bool).to(noisy_source_ids_t.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_712": {
                "variable": {
                    "value": "noisy_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_words.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "top_words.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bernoulli_715": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(*noisy_words.shape) * (1 - self.random_replace_input_p)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_809": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_position_matrix < num_tokens.view(-1, 1)).type_as(num_tokens)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "(base_position_matrix < num_tokens.view(-1, 1)).type_as(num_tokens)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_815": {
                "input": {
                    "value": "student_prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "kwargs[state_dict]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained_model_name_or_path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_122": {
                "size": {
                    "value": "(config.max_position_embeddings, state_dict[_k].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_269": {
                "tensors": {
                    "value": "(key, _key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "(value, _value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_569": {
                "input": {
                    "value": "source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_source_ids",
                            "Name"
                        ]
                    ]
                }
            },
            "ones_like_570": {
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_571": {
                "input": {
                    "value": "pseudo_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_704": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_758": {
                "input": {
                    "value": "student_source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_source_ids_s",
                            "Name"
                        ],
                        [
                            "source_ids",
                            "Name"
                        ]
                    ]
                }
            },
            "ones_like_759": {
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_760": {
                "input": {
                    "value": "pseudo_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_762": {
                "input": {
                    "value": "teacher_source_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy_source_ids_t",
                            "Name"
                        ],
                        [
                            "source_ids",
                            "Name"
                        ]
                    ]
                }
            },
            "ones_like_763": {
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_764": {
                "input": {
                    "value": "pseudo_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_138": {
                "size": {
                    "value": "(config.max_position_embeddings, state_dict[_k].shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_548": {
                "tensors": {
                    "value": "(source_mask, target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_669": {
                "tensors": {
                    "value": "(source_mask, target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_391": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_689": {
                "input": {
                    "value": "torch.matmul(input_embs, self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.random_replace_input_k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_706": {
                "input": {
                    "value": "torch.matmul(input_embs, self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.random_replace_input_k + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_689": {
                "input": {
                    "value": "input_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.teacher_model.embeddings(noisy_source_ids_s)",
                            "Call"
                        ],
                        [
                            "self.teacher_model.embeddings(noisy_source_ids_t)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_696": {
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(*top_words.shape).argsort(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(torch.ones(*noisy_words.shape) * (1 - self.random_replace_input_p)).long().to(noisy_source_ids_s.device)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*top_words.shape).argsort(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(torch.ones(*noisy_words.shape) * (1 - self.random_replace_input_p)).long().to(noisy_source_ids_t.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_706": {
                "input": {
                    "value": "input_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.teacher_model.embeddings(noisy_source_ids_s)",
                            "Call"
                        ],
                        [
                            "self.teacher_model.embeddings(noisy_source_ids_t)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.teacher_model.embeddings.word_embeddings.weight.data.transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_713": {
                "data": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(*top_words.shape).argsort(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(torch.ones(*noisy_words.shape) * (1 - self.random_replace_input_p)).long().to(noisy_source_ids_s.device)",
                            "Call"
                        ],
                        [
                            "np.random.rand(*top_words.shape).argsort(axis=-1)",
                            "Call"
                        ],
                        [
                            "torch.bernoulli(torch.ones(*noisy_words.shape) * (1 - self.random_replace_input_p)).long().to(noisy_source_ids_t.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_698": {
                "*size": {
                    "value": "*noisy_words.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_715": {
                "*size": {
                    "value": "*noisy_words.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "src/s2s_ft/modeling_decoding.py": {
        "torch": {
            "full_46": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_221": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ger_241": {
                "variable": {
                    "value": "sinusoid_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.inv_freq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "pos_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sinusoid_inp.sin(), sinusoid_inp.cos()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_256": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_272": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size * self.num_pos_emb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_278": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_331": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size * self.num_qkv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_334": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_409": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer / math.sqrt(self.attention_head_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_438": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer, mask_qkv)",
                            "Call"
                        ],
                        [
                            "torch.cat((value_history, value_layer), dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_455": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_457": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_484": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_497": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_499": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_520": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_563": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[copy.deepcopy(layer) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_602": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_603": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_622": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ],
                        [
                            "hid_size * config.relax_projection",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_639": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "bert_model_embedding_weights.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_643": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(bert_model_embedding_weights.size(0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_694": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_706": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_1033": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1039": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pair_x, pair_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1050": {
                "variable": {
                    "value": "self.rel_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_rel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1078": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_1250": {
                "variable": {
                    "value": "base_position_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "token_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "token_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "token_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1258": {
                "variable": {
                    "value": "target_pos_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_target_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "target_ids.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1267": {
                "variable": {
                    "value": "golden_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(triangle_attention_mask, torch.zeros_like(triangle_attention_mask))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1269": {
                "variable": {
                    "value": "pseudo_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(triangle_attention_mask - diagonal_attention_mask, diagonal_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1288": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(source_mask.unsqueeze(1).expand(-1, target_ids.size(1) * 2, -1), extend_target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1291": {
                "variable": {
                    "value": "target_input_sequence",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_ids, pseudo_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_1292": {
                "variable": {
                    "value": "target_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1293": {
                "variable": {
                    "value": "target_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_segment_ids, target_segment_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1295": {
                "variable": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "target_ids.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "target_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_1297": {
                "variable": {
                    "value": "target_position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(target_position_ids, target_position_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_1338": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_1357": {
                "variable": {
                    "value": "predicted_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores_masked_2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1375": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1376": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "kl_div_65": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.view(-1, self.tgt_vocab_size)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_65": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_261": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_283": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_287": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_342": {
                "variable": {
                    "value": "self.b_q_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.num_attention_heads, 1, self.attention_head_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_344": {
                "variable": {
                    "value": "self.seg_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_382": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.intermediate_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.dropout(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states + input_tensor)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, history_states=history_states, mask_qkv=mask_qkv, seg_ids=seg_ids)",
                            "Call"
                        ],
                        [
                            "layer_module(hidden_states, attention_mask, mask_qkv=mask_qkv, seg_ids=seg_ids, key_history=set_key, value_history=set_value)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.LayerNorm(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform(self.type_converter(hidden_states))",
                            "Call"
                        ],
                        [
                            "hidden_states.view(num_batch, num_pos, self.relax_projection, -1)[torch.arange(0, num_batch).long(), :, task_idx, :]",
                            "Subscript"
                        ],
                        [
                            "F.linear(self.type_converter(hidden_states), self.type_converter(self.decoder.weight), self.type_converter(self.bias))",
                            "Call"
                        ],
                        [
                            "self.decoder(hidden_states) + self.bias",
                            "BinOp"
                        ],
                        [
                            "torch.cat([pair_x, pair_y], dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dense(hidden_states)",
                            "Call"
                        ],
                        [
                            "self.transform_act_fn(hidden_states)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_385": {
                "variable": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(history_states, hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_388": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((history_states, hidden_states), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.key.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_393": {
                "variable": {
                    "value": "mixed_key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "key_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_397": {
                "variable": {
                    "value": "mixed_value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "value_cache",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_404": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key_history, key_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(value_history, value_layer)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "einsum_417": {
                "variable": {
                    "value": "qs",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnih,bjnh->bnij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "query_layer + self.b_q_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_514": {
                "variable": {
                    "value": "self.wx0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_516": {
                "variable": {
                    "value": "self.wx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_518": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_673": {
                "variable": {
                    "value": "hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.type_converter(hidden_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.type_converter(self.decoder.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.type_converter(self.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_798": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_model_name, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_889": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_891": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1019": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsigmoid_1060": {
                "input": {
                    "value": "pair_score * pair_pos_neg_mask.type_as(pair_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_1074": {
                "variable": {
                    "value": "self.secondary_pred_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_sentlvl_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1082": {
                "variable": {
                    "value": "self.crit_next_sent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_1108": {
                "variable": {
                    "value": "index_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "sequence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_1153": {
                "variable": {
                    "value": "pos_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.view(batch_size, -1).unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1246": {
                "variable": {
                    "value": "self.crit_mask_lm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_1439": {
                "variable": {
                    "value": "(_, max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1468": {
                "tensors": {
                    "value": "output_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_1522": {
                "variable": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predictions(sequence_output)",
                            "Call"
                        ],
                        [
                            "self.predictions(sequence_output, task_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1528": {
                "variable": {
                    "value": "(kk_scores, kk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(prediction_scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_scores + forbid_word_mask * -10000.0",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1609": {
                "variable": {
                    "value": "curr_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "erf_92": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_220": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_227": {
                "input": {
                    "value": "s + self.variance_epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_427": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_643": {
                "*size": {
                    "value": "bert_model_embedding_weights.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_1147": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1272": {
                "tensors": {
                    "value": "(golden_attention_mask, pseudo_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_1282": {
                "input": {
                    "value": "source_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_1298": {
                "tensors": {
                    "value": "(target_mask, target_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1350": {
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[wids_list[frame_id][pos_in_frame]]",
                            "List"
                        ],
                        [
                            "partial_seqs",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "pos.unsqueeze(2).expand(-1, -1, seq.size(-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_1426": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1508": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, mask_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_1530": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1531": {
                "variable": {
                    "value": "back_ptrs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[0]",
                            "Subscript"
                        ],
                        [
                            "input_shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1532": {
                "variable": {
                    "value": "k_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1534": {
                "variable": {
                    "value": "last_eos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_masks[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1536": {
                "variable": {
                    "value": "last_seq_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_scores[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * K, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1539": {
                "variable": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "topk_1540": {
                "variable": {
                    "value": "(k_scores, k_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kk_scores + (last_eos * -10000.0 + last_seq_scores)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(kk_scores, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.search_beam_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_1542": {
                "variable": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K * K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1543": {
                "variable": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kk_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K * K])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1552": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "expanded_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[:1] + [1] + input_shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_1555": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_shape[0] * K] + input_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1563": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, K] + x_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1570": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x - u) / torch.sqrt(s + self.variance_epsilon)",
                            "BinOp"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x.view(*sz)",
                            "Call"
                        ],
                        [
                            "x[:, :, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, mask_qkv, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.gather(2, mask_qkv.view(sz[0], sz[1], 1, 1, 1).expand(sz[0], sz[1], 1, sz[3], sz[4])).squeeze(2)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, expanded_shape)",
                            "Call"
                        ],
                        [
                            "x.repeat(*repeat_count)",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [input_shape[0] * K] + input_shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.reshape(x, [batch_size, K] + x_shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1571": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.gather(x, 1, ids)",
                            "Call"
                        ],
                        [
                            "torch.reshape(y, x_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_340": {
                "*size": {
                    "value": "(512, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_342": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1132": {
                "input": {
                    "value": "tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "index_matrix <= index_matrix_t",
                            "Compare"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_1164": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_1185": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_1267": {
                "input": {
                    "value": "triangle_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_pos_matrix.view(1, max_target_len, 1) >= target_pos_matrix.view(1, 1, max_target_len)",
                            "Compare"
                        ],
                        [
                            "triangle_attention_mask.type_as(target_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1317": {
                "input": {
                    "value": "prediction_scores_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1317": {
                "index": {
                    "value": "target_ids.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1317": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1322": {
                "input": {
                    "value": "prediction_scores_masked.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1419": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1446": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1457": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1501": {
                "variable": {
                    "value": "x_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(curr_ids, sos_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_1546": {
                "input": {
                    "value": "k_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(kk_ids, [batch_size, K])",
                            "Call"
                        ],
                        [
                            "torch.gather(kk_ids, 1, k_ids)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.eos_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1567": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(ids, id_shape + [1] * (x_rank - id_rank))",
                            "Call"
                        ],
                        [
                            "ids.expand(id_shape + x_shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "id_shape + [1] * (x_rank - id_rank)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1580": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1596": {
                "variable": {
                    "value": "prev_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_embedding, new_embedding[:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_237": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "demb",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_296": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_671": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "position_embeddings.size(0)",
                            "Call"
                        ],
                        [
                            "hidden_states.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_1310": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.type_as(pos_vec)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ],
                        [
                            "mask.type_as(loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_1668": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "buf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "np.zeros((batch_size * K, vocab_size), dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "log_scores.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1670": {
                "variable": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "forbid_word_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.tensor(buf_matrix, dtype=log_scores.dtype)",
                            "Call"
                        ],
                        [
                            "torch.reshape(forbid_word_mask, [batch_size * K, 1, vocab_size]).to(input_ids.device)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * K, 1, vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_1738": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.float if k == 'scores' else torch.long",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_1451": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1463": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1588": {
                "tensors": {
                    "value": "(x[0], x[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1604": {
                "tensors": {
                    "value": "(x[0], x[1][:, :-1, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_tensor_756": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/s2s_ft/s2s_loader.py": {
        "torch": {
            "tril_85": {
                "variable": {
                    "value": "self._tril_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones((max_len, max_len), dtype=torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len_in_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(self.max_tgt_length + max_a_len + 2, self.max_len)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_85": {
                "*size": {
                    "value": "(max_len, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_25": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_27": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/s2s_ft/utils.py": {
        "torch": {
            "load_179": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_151": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_153": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*batch)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}