{
    "c3/c3objs.py": {
        "tensorflow": {
            "cast_291": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (tf.reshape(val, self.shape) * self.pref - self.offset) / self.scale - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_min_306": {
                "variable": {
                    "value": "min_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "minmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.9 * value, 1.1 * value]",
                            "List"
                        ],
                        [
                            "[tf.math.reduce_min(val * 0.9), tf.math.reduce_max(val * 0.9), tf.math.reduce_min(val * 1.1), tf.math.reduce_max(val * 1.1), min_val, max_val]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_max_307": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "minmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.9 * value, 1.1 * value]",
                            "List"
                        ],
                        [
                            "[tf.math.reduce_min(val * 0.9), tf.math.reduce_max(val * 0.9), tf.math.reduce_min(val * 1.1), tf.math.reduce_max(val * 1.1), min_val, max_val]",
                            "List"
                        ]
                    ]
                }
            },
            "cos_323": {
                "variable": {
                    "value": "bound_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(tf.reshape(val, self.shape) + 1) * np.pi / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_276": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.numpy()",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.constant(val, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_278": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.numpy()",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.constant(val, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_313": {
                "tensor": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_min_299": {
                "input_tensor": {
                    "value": "val * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_300": {
                "input_tensor": {
                    "value": "val * 0.9",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_301": {
                "input_tensor": {
                    "value": "val * 1.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_302": {
                "input_tensor": {
                    "value": "val * 1.1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_284": {
                "x": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * (tf.reshape(val, self.shape) * self.pref - self.offset) / self.scale - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_284": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "acos_324": {
                "x": {
                    "value": "bound_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cos((tf.reshape(val, self.shape) + 1) * np.pi / 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_323": {
                "tensor": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.numpy()",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.constant(val, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_281": {
                "tensor": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.numpy()",
                            "Call"
                        ],
                        [
                            "tf.cast(val, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.constant(val, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "c3/experiment.py": {
        "tensorflow": {
            "constant_342": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.get_VZ(qubits, params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_646": {
                "variable": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.linalg.diag_part(rho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_297": {
                "variable": {
                    "value": "psi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.propagators[gate]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "psi_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(psi_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.propagators[gate], psi_t)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.psi_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.lookup_gate(**gate), psi_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_330": {
                "variable": {
                    "value": "psi_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.lookup_gate(**gate)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "psi_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(psi_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.propagators[gate], psi_t)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.psi_init)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.lookup_gate(**gate), psi_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_526": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "instr.t_end - instr.t_start",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_647": {
                "tensor": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.populations(psi_t, model.lindbladian)",
                            "Call"
                        ],
                        [
                            "self.populations(psi_t, model.lindbladian)",
                            "Call"
                        ],
                        [
                            "populations",
                            "variable"
                        ],
                        [
                            "model.tasks['conf_matrix'].confuse(pops)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pops, [pops.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pops, [pops.shape[0]])",
                            "Call"
                        ],
                        [
                            "pops_select",
                            "variable"
                        ],
                        [
                            "model.tasks['meas_rescale'].rescale(pops)",
                            "Call"
                        ],
                        [
                            "pops_select",
                            "variable"
                        ],
                        [
                            "tf.math.real(tf.linalg.diag_part(rho))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pops.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "variable": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.populations(psi_t, model.lindbladian)",
                            "Call"
                        ],
                        [
                            "self.populations(psi_t, model.lindbladian)",
                            "Call"
                        ],
                        [
                            "populations",
                            "variable"
                        ],
                        [
                            "model.tasks['conf_matrix'].confuse(pops)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pops, [pops.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pops, [pops.shape[0]])",
                            "Call"
                        ],
                        [
                            "pops_select",
                            "variable"
                        ],
                        [
                            "model.tasks['meas_rescale'].rescale(pops)",
                            "Call"
                        ],
                        [
                            "pops_select",
                            "variable"
                        ],
                        [
                            "tf.math.real(tf.linalg.diag_part(rho))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pops.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_401": {
                "variable": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.populations(psi_t, model.lindbladian)",
                            "Call"
                        ],
                        [
                            "self.populations(psi_t, model.lindbladian)",
                            "Call"
                        ],
                        [
                            "populations",
                            "variable"
                        ],
                        [
                            "model.tasks['conf_matrix'].confuse(pops)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pops, [pops.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pops, [pops.shape[0]])",
                            "Call"
                        ],
                        [
                            "pops_select",
                            "variable"
                        ],
                        [
                            "model.tasks['meas_rescale'].rescale(pops)",
                            "Call"
                        ],
                        [
                            "pops_select",
                            "variable"
                        ],
                        [
                            "tf.math.real(tf.linalg.diag_part(rho))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[pops.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_513": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_518": {
                "variable": {
                    "value": "freqs[line]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "ctrls['carrier'].params['freq'].get_value() + offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_522": {
                "variable": {
                    "value": "framechanges[line]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "ctrls['carrier'].params['framechange'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_530": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "SFR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_super(FR)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result['U']",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(SFR, U)",
                            "Call"
                        ],
                        [
                            "tf.matmul(FR, U)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dephasing_channel, U)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_533": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "FR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_Frame_Rotation(t_final, freqs, framechanges)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result['U']",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(SFR, U)",
                            "Call"
                        ],
                        [
                            "tf.matmul(FR, U)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dephasing_channel, U)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_543": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "instr.t_end - instr.t_start",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_547": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dephasing_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_dephasing_channel(t_final, amps)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "result['U']",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(SFR, U)",
                            "Call"
                        ],
                        [
                            "tf.matmul(FR, U)",
                            "Call"
                        ],
                        [
                            "tf.matmul(dephasing_channel, U)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_part_646": {
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_vec_to_dm(state)",
                            "Call"
                        ],
                        [
                            "tf_vec_to_dm(state)",
                            "Call"
                        ],
                        [
                            "tf_state_to_dm(state)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_649": {
                "x": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_542": {
                "variable": {
                    "value": "amps[line]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "amp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "c3/generator/devices.py": {
        "tensorflow": {
            "constant_113": {
                "variable": {
                    "value": "t_start",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t_start + offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_114": {
                "variable": {
                    "value": "t_end",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "t_end - offset",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_121": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "t_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(t_start + offset, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "stop": {
                    "value": "t_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(t_end - offset, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.slice_num",
                            "Attribute"
                        ],
                        [
                            "self.slice_num + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(tf.reshape(awg_signal[0]['inphase'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[new_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_338": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.image.resize(tf.reshape(awg_signal[0]['inphase'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method), shape=[new_dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(inphase, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_convolve_legacy(iq_signal[0]['inphase'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(inphase)",
                            "Call"
                        ],
                        [
                            "tf_convolve(iq_signal[0]['inphase'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(inphase)",
                            "Call"
                        ],
                        [
                            "self.convolve(iq_signal[0]['inphase'], h)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "variable": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.image.resize(tf.reshape(awg_signal[0]['quadrature'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[new_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_347": {
                "variable": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.image.resize(tf.reshape(awg_signal[0]['quadrature'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method), shape=[new_dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(quadrature, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_convolve_legacy(iq_signal[0]['quadrature'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(quadrature)",
                            "Call"
                        ],
                        [
                            "tf_convolve(iq_signal[0]['quadrature'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(quadrature)",
                            "Call"
                        ],
                        [
                            "self.convolve(iq_signal[0]['quadrature'], h)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_439": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_482": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_483": {
                "variable": {
                    "value": "phi_0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['phi_0'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_566": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_614": {
                "variable": {
                    "value": "n_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['rise_time'].get_value() * self.resolution",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_615": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "tf.constant(0.0, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.params['rise_time'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(n_ts, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_620": {
                "variable": {
                    "value": "cen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(self.params['rise_time'].get_value() + 1 / self.resolution) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_624": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(ts - cen) ** 2 / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_625": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(-1 - cen) ** 2 / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_635": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.image.resize(tf.reshape(awg_signal[0]['inphase'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method), shape=[new_dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(inphase, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_convolve_legacy(iq_signal[0]['inphase'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(inphase)",
                            "Call"
                        ],
                        [
                            "tf_convolve(iq_signal[0]['inphase'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(inphase)",
                            "Call"
                        ],
                        [
                            "self.convolve(iq_signal[0]['inphase'], h)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_636": {
                "variable": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.image.resize(tf.reshape(awg_signal[0]['quadrature'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method), shape=[new_dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(quadrature, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_convolve_legacy(iq_signal[0]['quadrature'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(quadrature)",
                            "Call"
                        ],
                        [
                            "tf_convolve(iq_signal[0]['quadrature'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(quadrature)",
                            "Call"
                        ],
                        [
                            "self.convolve(iq_signal[0]['quadrature'], h)",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_675": {
                "variable": {
                    "value": "n_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['rise_time'].get_value() * self.resolution",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_676": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "tf.constant(0.0, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "stop": {
                    "value": "self.params['rise_time'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "num": {
                    "value": "tf.cast(n_ts, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_681": {
                "variable": {
                    "value": "cen",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(self.params['rise_time'].get_value() - 1 / self.resolution) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_685": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(ts - cen) ** 2 / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_686": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(-1 - cen) ** 2 / (2 * sigma * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_694": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.image.resize(tf.reshape(awg_signal[0]['inphase'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method), shape=[new_dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(inphase, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_convolve_legacy(iq_signal[0]['inphase'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(inphase)",
                            "Call"
                        ],
                        [
                            "tf_convolve(iq_signal[0]['inphase'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(inphase)",
                            "Call"
                        ],
                        [
                            "self.convolve(iq_signal[0]['inphase'], h)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_695": {
                "variable": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.image.resize(tf.reshape(awg_signal[0]['quadrature'], shape=[1, old_dim, 1]), size=[1, new_dim], method=self.sampling_method), shape=[new_dim])",
                            "Call"
                        ],
                        [
                            "tf.cast(quadrature, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_convolve_legacy(iq_signal[0]['quadrature'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(quadrature)",
                            "Call"
                        ],
                        [
                            "tf_convolve(iq_signal[0]['quadrature'], risefun / tf.reduce_sum(risefun))",
                            "Call"
                        ],
                        [
                            "tf.math.real(quadrature)",
                            "Call"
                        ],
                        [
                            "self.convolve(iq_signal[0]['quadrature'], h)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_720": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal_in[0]['ts']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_722": {
                "variable": {
                    "value": "step_response",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], step_response]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_826": {
                "variable": {
                    "value": "convolution",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_827": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros(int(len(resp_shape) // 2), dtype=tf.float64), signal, tf.zeros(int(len(resp_shape) * 3 / 2) + 1, dtype=tf.float64)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_877": {
                "variable": {
                    "value": "N_ts",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.ceil(4 / tb)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_883": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_885": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(N_ts)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_889": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_nan(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(pi * x) / (pi * x)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_nan(h), tf.ones_like(h), h)",
                            "Call"
                        ],
                        [
                            "h / -tf.reduce_sum(h)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.cast(n, tf.int32) == (N_ts - 1) // 2, tf.ones_like(h), h)",
                            "Call"
                        ]
                    ]
                }
            },
            "hamming_window_890": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "window_length": {
                    "value": "N_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.ceil(4 / tb), tf.int32)",
                            "Call"
                        ],
                        [
                            "N_ts + (1 - tf.math.mod(N_ts, 2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_891": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.hamming_window(N_ts)",
                            "Call"
                        ],
                        [
                            "tf.cast(w, tf.double)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_894": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.cast(n, tf.int32) == (N_ts - 1) // 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones_like(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(pi * x) / (pi * x)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_nan(h), tf.ones_like(h), h)",
                            "Call"
                        ],
                        [
                            "h / -tf.reduce_sum(h)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.cast(n, tf.int32) == (N_ts - 1) // 2, tf.ones_like(h), h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_1210": {
                "variable": {
                    "value": "amp_per_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(In) ** 2 + tf.abs(Qu) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1211": {
                "variable": {
                    "value": "av",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "amp_per_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.abs(In) ** 2 + tf.abs(Qu) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1212": {
                "variable": {
                    "value": "sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "amp_per_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.abs(In) ** 2 + tf.abs(Qu) ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_487": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sqrt(tf.cos(pi * phi / phi_0) ** 2 + d ** 2 * tf.sin(pi * phi / phi_0) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_494": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(tf.cos(pi * phi / phi_0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_578": {
                "variable": {
                    "value": "min_freq",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_728": {
                "variable": {
                    "value": "signal_out[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_convolve(signal, impulse_response)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_769": {
                "x": {
                    "value": "-ts / time_hp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erfc_787": {
                "x": {
                    "value": "alpha / 21 / tf.math.sqrt(np.abs(ts))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_836": {
                "variable": {
                    "value": "convolution",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[convolution, tf.reshape(tf.math.reduce_sum(tf.math.multiply(signal[p:p + len(resp_shape)], resp_shape)), shape=[1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resize_331": {
                "images": {
                    "value": "tf.reshape(awg_signal[0]['inphase'], shape=[1, old_dim, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, new_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "self.sampling_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_340": {
                "images": {
                    "value": "tf.reshape(awg_signal[0]['quadrature'], shape=[1, old_dim, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1, new_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "method": {
                    "value": "self.sampling_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_410": {
                "x": {
                    "value": "self.params['w_1'].get_value() * self.params['w_2'].get_value()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_419": {
                "x": {
                    "value": "(w_2 - signal2) * (w_1 - signal1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_616": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_618": {
                "x": {
                    "value": "n_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(self.params['rise_time'].get_value() * self.resolution)",
                            "Call"
                        ],
                        [
                            "tf.floor(self.params['rise_time'].get_value() * self.resolution)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_677": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_679": {
                "x": {
                    "value": "n_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.floor(self.params['rise_time'].get_value() * self.resolution)",
                            "Call"
                        ],
                        [
                            "tf.floor(self.params['rise_time'].get_value() * self.resolution)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ceil_877": {
                "x": {
                    "value": "4 / tb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mod_878": {
                "x1": {
                    "value": "N_ts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.ceil(4 / tb), tf.int32)",
                            "Call"
                        ],
                        [
                            "N_ts + (1 - tf.math.mod(N_ts, 2))",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_888": {
                "x": {
                    "value": "pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_nan_889": {
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(pi * x) / (pi * x)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_nan(h), tf.ones_like(h), h)",
                            "Call"
                        ],
                        [
                            "h / -tf.reduce_sum(h)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.cast(n, tf.int32) == (N_ts - 1) // 2, tf.ones_like(h), h)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_889": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(pi * x) / (pi * x)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_nan(h), tf.ones_like(h), h)",
                            "Call"
                        ],
                        [
                            "h / -tf.reduce_sum(h)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.cast(n, tf.int32) == (N_ts - 1) // 2, tf.ones_like(h), h)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_893": {
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(pi * x) / (pi * x)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_nan(h), tf.ones_like(h), h)",
                            "Call"
                        ],
                        [
                            "h / -tf.reduce_sum(h)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.cast(n, tf.int32) == (N_ts - 1) // 2, tf.ones_like(h), h)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_894": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sin(pi * x) / (pi * x)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_nan(h), tf.ones_like(h), h)",
                            "Call"
                        ],
                        [
                            "h / -tf.reduce_sum(h)",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.cast(n, tf.int32) == (N_ts - 1) // 2, tf.ones_like(h), h)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_1006": {
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_1006": {
                "value": {
                    "value": "noise_amp * np.random.normal(loc=0.0, scale=1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_332": {
                "tensor": {
                    "value": "awg_signal[0]['inphase']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, old_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_341": {
                "tensor": {
                    "value": "awg_signal[0]['quadrature']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, old_dim, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_488": {
                "x": {
                    "value": "tf.cos(pi * phi / phi_0) ** 2 + d ** 2 * tf.sin(pi * phi / phi_0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_494": {
                "x": {
                    "value": "tf.cos(pi * phi / phi_0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_573": {
                "x": {
                    "value": "tf.sqrt(tf.cos(pi * 0.5) ** 2 + d ** 2 * tf.sin(pi * 0.5) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_629": {
                "input_tensor": {
                    "value": "risefun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss - offset",
                            "BinOp"
                        ],
                        [
                            "gauss - offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_632": {
                "input_tensor": {
                    "value": "risefun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss - offset",
                            "BinOp"
                        ],
                        [
                            "gauss - offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_689": {
                "input_tensor": {
                    "value": "risefun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss - offset",
                            "BinOp"
                        ],
                        [
                            "gauss - offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_691": {
                "input_tensor": {
                    "value": "risefun",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gauss - offset",
                            "BinOp"
                        ],
                        [
                            "gauss - offset",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_750": {
                "x": {
                    "value": "-ts / time_iir",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_787": {
                "x": {
                    "value": "np.abs(ts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_829": {
                "shape": {
                    "value": "int(len(resp_shape) // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_831": {
                "shape": {
                    "value": "int(len(resp_shape) * 3 / 2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_894": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.range(N_ts), tf.double)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_987": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_989": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self.get_noise(sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "sig.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_494": {
                "x": {
                    "value": "pi * phi / phi_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_574": {
                "x": {
                    "value": "tf.cos(pi * 0.5) ** 2 + d ** 2 * tf.sin(pi * 0.5) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_839": {
                "tensor": {
                    "value": "tf.math.reduce_sum(tf.math.multiply(signal[p:p + len(resp_shape)], resp_shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_978": {
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_1210": {
                "x": {
                    "value": "Qu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_Q(line)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_840": {
                "input_tensor": {
                    "value": "tf.math.multiply(signal[p:p + len(resp_shape)], resp_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_489": {
                "x": {
                    "value": "pi * phi / phi_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_841": {
                "x": {
                    "value": "signal[p:p + len(resp_shape)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "resp_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_490": {
                "x": {
                    "value": "pi * phi / phi_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_574": {
                "x": {
                    "value": "pi * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_1123": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "omega_lo * ts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_1124": {
                "variable": {
                    "value": "sin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "omega_lo * ts",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_574": {
                "x": {
                    "value": "pi * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "c3/generator/generator.py": {
        "tensorflow": {
            "identity_221": {
                "variable": {
                    "value": "gen_signal[chan][key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "output[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "c3/libraries/algorithms.py": {
        "tensorflow": {
            "Variable_272": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SGD_285": {
                "variable": {
                    "value": "opt_sgd",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "options['learning_rate']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9",
                            "float"
                        ],
                        [
                            "options['momentum']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_548": {
                "variable": {
                    "value": "x_init_numpy",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x_init",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "c3/libraries/chip.py": {
        "tensorflow": {
            "constant_164": {
                "variable": {
                    "value": "self.Hs[freq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "resonator(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_267": {
                "variable": {
                    "value": "self.Hs[freq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "hamiltonians['resonator'](ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_282": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['freq'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_356": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_367": {
                "variable": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sqrt(tf.cos(pi * phi / phi_0) ** 2 + d ** 2 * tf.sin(pi * phi / phi_0) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_375": {
                "variable": {
                    "value": "anhar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['anhar'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_387": {
                "variable": {
                    "value": "self.Hs[freq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "resonator(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_473": {
                "variable": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matrix_transpose_474": {
                "variable": {
                    "value": "ann_oper_dag",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_476": {
                "variable": {
                    "value": "sq_adag_plus_a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "adag_plus_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ann_oper_dag + ann_oper",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "adag_plus_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ann_oper_dag + ann_oper",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_477": {
                "variable": {
                    "value": "quartic_adag_plus_a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sq_adag_plus_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(adag_plus_a, adag_plus_a)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "sq_adag_plus_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(adag_plus_a, adag_plus_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_478": {
                "variable": {
                    "value": "sextic_adag_plus_a",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "quartic_adag_plus_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(sq_adag_plus_a, sq_adag_plus_a)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "sq_adag_plus_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(adag_plus_a, adag_plus_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_481": {
                "variable": {
                    "value": "Hs[quadratic]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "ann_oper_dag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matrix_transpose(ann_oper, conjugate=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_498": {
                "variable": {
                    "value": "prefactors[quadratic]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "8.0 * EC * EJ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_550": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Hs['quadratic']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_606": {
                "variable": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_617": {
                "variable": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expm_629": {
                "variable": {
                    "value": "self.exp_phi_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "1j * self.get_phase_variable()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_656": {
                "variable": {
                    "value": "EJ",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['EJ'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_657": {
                "variable": {
                    "value": "EC",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['EC'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_658": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['gamma'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_659": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['phi'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_660": {
                "variable": {
                    "value": "phi_0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['phi_0'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_661": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * np.pi * phi / phi_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_740": {
                "variable": {
                    "value": "phi_variable",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "phi_variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_phase_variable()",
                            "Call"
                        ],
                        [
                            "tf.cast(phi_variable, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_879": {
                "variable": {
                    "value": "self.Hs[freq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "resonator(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_884": {
                "variable": {
                    "value": "self.Hs[third_order]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "third(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1089": {
                "variable": {
                    "value": "self.Hs[freq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "resonator(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1094": {
                "variable": {
                    "value": "self.Hs[beta]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "third(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1190": {
                "variable": {
                    "value": "self.Hs[strength]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hamiltonian_func(opers_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1201": {
                "variable": {
                    "value": "strength",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['strength'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1254": {
                "variable": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.hamiltonian_func(ann_opers)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "transformed_Hs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matmul(transform, self.Hs[key], adjoint_a=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(transform, tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_167": {
                "variable": {
                    "value": "self.Hs[anhar]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "duffing(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_187": {
                "variable": {
                    "value": "anhar",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['anhar'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "x": {
                    "value": "sum(Ls)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_383": {
                "x": {
                    "value": "biased_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(freq - anhar) * self.get_factor(phi_sig) + anhar",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_390": {
                "variable": {
                    "value": "self.Hs[anhar]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "duffing(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_414": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.get_freq(sig)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_415": {
                "variable": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['freq'].get_value()",
                            "Call"
                        ],
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128)",
                            "Call"
                        ],
                        [
                            "self.params['freq'].get_value()",
                            "Call"
                        ],
                        [
                            "tf.cast(self.get_freq(sig), tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.reshape(freq, [freq.shape[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "self.get_freq()",
                            "Call"
                        ],
                        [
                            "self.params['freq'].get_value()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[freq.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_467": {
                "x": {
                    "value": "sum(Ls)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_521": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Hs_local['quadratic']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eigvalsh_524": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "h + tf.cast(self.params['anhar'].get_value(), tf.complex128) * Hs['anhar']",
                            "BinOp"
                        ],
                        [
                            "freq * H_freq",
                            "BinOp"
                        ],
                        [
                            "tf.zeros_like(self.Hs_local['quadratic'])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(Hs['quadratic'])",
                            "Call"
                        ],
                        [
                            "4 * EC * n + EJ * (-1 * self.cosm(phi_variable, 2, phase) - 2 * gamma * self.cosm(phi_variable))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.get_frequency(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "self.h",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(tf.matmul(transform, h, adjoint_a=True), transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_526": {
                "variable": {
                    "value": "freq_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.real(es[1] - es[0]) - freq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_527": {
                "variable": {
                    "value": "anhar_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.real(es[2] - es[1]) - (freq + anhar)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_543": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal['values']",
                            "Subscript"
                        ],
                        [
                            "signal['values']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sig, [sig.shape[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.cast(signal['values'], tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sig, [sig.shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sig.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_612": {
                "x": {
                    "value": "phi_zpf * (tf.transpose(ann_oper, conjugate=True) + ann_oper)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_623": {
                "x": {
                    "value": "n_zpf * (-tf.transpose(ann_oper, conjugate=True) + ann_oper)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_634": {
                "x": {
                    "value": "tf.math.sqrt(8.0 * EL * EC)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_668": {
                "x": {
                    "value": "tf.math.real(h)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_820": {
                "variable": {
                    "value": "self.phi_var_min_ref",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant(phi_var_min_ref, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "len(phi_var_min_ref)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_882": {
                "variable": {
                    "value": "self.Hs[anhar]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "duffing(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1092": {
                "variable": {
                    "value": "self.Hs[anhar]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "duffing(ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1221": {
                "x": {
                    "value": "sum(hs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1230": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(transform, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_1231": {
                "a": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(transform, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "h + tf.cast(self.params['anhar'].get_value(), tf.complex128) * Hs['anhar']",
                            "BinOp"
                        ],
                        [
                            "freq * H_freq",
                            "BinOp"
                        ],
                        [
                            "tf.zeros_like(self.Hs_local['quadratic'])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(Hs['quadratic'])",
                            "Call"
                        ],
                        [
                            "4 * EC * n + EJ * (-1 * self.cosm(phi_variable, 2, phase) - 2 * gamma * self.cosm(phi_variable))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.get_frequency(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "self.h",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(tf.matmul(transform, h, adjoint_a=True), transform)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "self.params['freq'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_203": {
                "a": {
                    "value": "ann_oper.T.conj()",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_232": {
                "variable": {
                    "value": "det_bal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-hbar * tf.cast(freq_diff, tf.float64) * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "tf.cos(pi * phi / phi_0) ** 2 + d ** 2 * tf.sin(pi * phi / phi_0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_404": {
                "a": {
                    "value": "ann_oper.T.conj()",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_546": {
                "variable": {
                    "value": "Hs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Hs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_607": {
                "x": {
                    "value": "tf.range(1, self.params['calc_dim'], dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_618": {
                "x": {
                    "value": "tf.range(1, self.params['calc_dim'], dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_634": {
                "x": {
                    "value": "8.0 * EL * EC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expm_645": {
                "input": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1j * (a * var)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_645": {
                "x": {
                    "value": "1j * b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_668": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "h + tf.cast(self.params['anhar'].get_value(), tf.complex128) * Hs['anhar']",
                            "BinOp"
                        ],
                        [
                            "freq * H_freq",
                            "BinOp"
                        ],
                        [
                            "tf.zeros_like(self.Hs_local['quadratic'])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(Hs['quadratic'])",
                            "Call"
                        ],
                        [
                            "4 * EC * n + EJ * (-1 * self.cosm(phi_variable, 2, phase) - 2 * gamma * self.cosm(phi_variable))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.get_frequency(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "self.h",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(tf.matmul(transform, h, adjoint_a=True), transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "mod_827": {
                "x1": {
                    "value": "phi_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "phi_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.params['phi_0'].get_value()",
                            "Call"
                        ],
                        [
                            "tf.cast(self.params['phi_0'].get_value(), tf.complex128)",
                            "Call"
                        ],
                        [
                            "self.params['phi_0'].get_value()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_899": {
                "x": {
                    "value": "self.get_frequency()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1112": {
                "x": {
                    "value": "self.params['freq'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1113": {
                "x": {
                    "value": "self.params['beta'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_1227": {
                "input": {
                    "value": "self.h",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1236": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "signal['values']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1237": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "signal['values']",
                            "Subscript"
                        ],
                        [
                            "signal['values']",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(sig, [sig.shape[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.cast(signal['values'], tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sig, [sig.shape[0], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[sig.shape[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "a": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(transform, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.Hs[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_416": {
                "input": {
                    "value": "H_freq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Hs['freq']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_455": {
                "variable": {
                    "value": "det_bal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-hbar * tf.cast(freq_diff, tf.float64) * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_552": {
                "x": {
                    "value": "prefactors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_607": {
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_618": {
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_646": {
                "a": {
                    "value": "exp_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.expm(exponent) * tf.exp(1j * b)",
                            "BinOp"
                        ]
                    ]
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_821": {
                "value": {
                    "value": "phi_var_min_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_847": {
                "x": {
                    "value": "2 * EJ * EC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_902": {
                "x": {
                    "value": "self.get_anharmonicity()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1115": {
                "x": {
                    "value": "self.params['anhar'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1220": {
                "value": {
                    "value": "self.hamiltonian_func(a)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_diag_233": {
                "diagonal": {
                    "value": "det_bal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-hbar * tf.cast(freq_diff, tf.float64) * beta)",
                            "Call"
                        ],
                        [
                            "tf.exp(-hbar * tf.cast(freq_diff, tf.float64) * beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_234": {
                "a": {
                    "value": "self.collapse_ops['temp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "det_bal_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hskron(tf.linalg.tensor_diag(det_bal), self.index, dims)",
                            "Call"
                        ],
                        [
                            "hskron(tf.linalg.tensor_diag(det_bal), self.index, dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_523": {
                "x": {
                    "value": "prefactors[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_526": {
                "input": {
                    "value": "es[1] - es[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "real_527": {
                "input": {
                    "value": "es[2] - es[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_613": {
                "a": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_848": {
                "x": {
                    "value": "2 * EC / EJ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_994": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1238": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "h + tf.cast(self.params['anhar'].get_value(), tf.complex128) * Hs['anhar']",
                            "BinOp"
                        ],
                        [
                            "freq * H_freq",
                            "BinOp"
                        ],
                        [
                            "tf.zeros_like(self.Hs_local['quadratic'])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(Hs['quadratic'])",
                            "Call"
                        ],
                        [
                            "4 * EC * n + EJ * (-1 * self.cosm(phi_variable, 2, phase) - 2 * gamma * self.cosm(phi_variable))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.get_frequency(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "tf.cast(self.params['freq'].get_value(), tf.complex128) * Hs['freq']",
                            "BinOp"
                        ],
                        [
                            "self.h",
                            "Attribute"
                        ],
                        [
                            "tf.matmul(tf.matmul(transform, h, adjoint_a=True), transform)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_369": {
                "x": {
                    "value": "pi * phi / phi_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_diag_457": {
                "diagonal": {
                    "value": "det_bal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-hbar * tf.cast(freq_diff, tf.float64) * beta)",
                            "Call"
                        ],
                        [
                            "tf.exp(-hbar * tf.cast(freq_diff, tf.float64) * beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_459": {
                "a": {
                    "value": "self.collapse_ops['temp']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "det_bal_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hskron(tf.linalg.tensor_diag(det_bal), self.index, dims)",
                            "Call"
                        ],
                        [
                            "hskron(tf.linalg.tensor_diag(det_bal), self.index, dims)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_624": {
                "a": {
                    "value": "ann_oper",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ann_oper, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.diag(tf.math.sqrt(tf.range(1, self.params['calc_dim'], dtype=tf.float64)), k=1)",
                            "Call"
                        ]
                    ]
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cos_743": {
                "x": {
                    "value": "phi_variable / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_996": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_232": {
                "x": {
                    "value": "freq_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([freq + n * anhar for n in range(self.hilbert_dim)])",
                            "Call"
                        ],
                        [
                            "np.array([self.params['freq'].get_value(), 0])",
                            "Call"
                        ],
                        [
                            "np.array([self.params['freq'].get_value() + n * self.params['anhar'].get_value() for n in range(self.hilbert_dim)])",
                            "Call"
                        ],
                        [
                            "np.array([self.params['freq'].get_value(), 0])",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.real(es[1] - es[0]) - freq)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_369": {
                "x": {
                    "value": "pi * phi / phi_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_998": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_1000": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_1002": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_455": {
                "x": {
                    "value": "freq_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([freq + n * anhar for n in range(self.hilbert_dim)])",
                            "Call"
                        ],
                        [
                            "np.array([self.params['freq'].get_value(), 0])",
                            "Call"
                        ],
                        [
                            "np.array([self.params['freq'].get_value() + n * self.params['anhar'].get_value() for n in range(self.hilbert_dim)])",
                            "Call"
                        ],
                        [
                            "np.array([self.params['freq'].get_value(), 0])",
                            "Call"
                        ],
                        [
                            "tf.math.abs(tf.math.real(es[1] - es[0]) - freq)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_749": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_750": {
                "x": {
                    "value": "phi_variable / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_782": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_758": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_759": {
                "x": {
                    "value": "phi_variable / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_767": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_768": {
                "x": {
                    "value": "phi_variable / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_776": {
                "x": {
                    "value": "phi_variable + phi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_777": {
                "x": {
                    "value": "phi_variable / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "c3/libraries/envelopes.py": {
        "tensorflow": {
            "cast_51": {
                "variable": {
                    "value": "t_bin_start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_bin_start'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "variable": {
                    "value": "t_bin_end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_bin_end'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['inphase'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(t), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(t), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "t_bin_start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_bin_start'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "variable": {
                    "value": "t_bin_end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_bin_end'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_111": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['inphase'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_113": {
                "variable": {
                    "value": "t_interp",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater(t, t_final / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "-t + t_final",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_114": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(t)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_131": {
                "variable": {
                    "value": "t_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_sig'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_132": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "amps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(params['amps'].get_value(), dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['amps'].get_value().shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_159": {
                "variable": {
                    "value": "freqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(params['freqs'].get_value(), dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['freqs'].get_value().shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_163": {
                "variable": {
                    "value": "phases",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(params['phases'].get_value(), dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['phases'].get_value().shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(t, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, t.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_184": {
                "variable": {
                    "value": "amps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(params['amps'].get_value(), tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['amps'].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "freqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(params['freqs'].get_value(), tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[params['freqs'].shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.cast(t, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, t.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_212": {
                "variable": {
                    "value": "risefall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['risefall'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_213": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_215": {
                "variable": {
                    "value": "envelope",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_216": {
                "variable": {
                    "value": "envelope",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less_equal(t, risefall * 2.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "t / (risefall * 2.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "envelope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(t, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(t, risefall * 2.5), t / (risefall * 2.5), envelope)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater_equal(t, t_final - risefall * 2.5), (t_final - t) / (risefall * 2.5), envelope)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_219": {
                "variable": {
                    "value": "envelope",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.greater_equal(t, t_final - risefall * 2.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "(t_final - t) / (risefall * 2.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "envelope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones_like(t, tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less_equal(t, risefall * 2.5), t / (risefall * 2.5), envelope)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.greater_equal(t, t_final - risefall * 2.5), (t_final - t) / (risefall * 2.5), envelope)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_241": {
                "variable": {
                    "value": "risefall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['risefall'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_242": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_268": {
                "variable": {
                    "value": "t_up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_up'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_269": {
                "variable": {
                    "value": "t_down",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_down'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_270": {
                "variable": {
                    "value": "risefall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['risefall'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_296": {
                "variable": {
                    "value": "t_up",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_up'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_297": {
                "variable": {
                    "value": "t_down",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_down'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_298": {
                "variable": {
                    "value": "risefall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['risefall'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_300": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_320": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_321": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['width'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_322": {
                "variable": {
                    "value": "risefall",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['risefall'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_326": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_335": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_336": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['width'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_337": {
                "variable": {
                    "value": "fourier_coeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['fourier_coeffs'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_338": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['offset'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_339": {
                "variable": {
                    "value": "amp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['amp'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_350": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_360": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.abs(t_final / 2 - t) > width / 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.zeros_like(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_387": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_388": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['sigma'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_389": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(t - t_final / 2) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_391": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-t_final ** 2 / (8 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_435": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_454": {
                "variable": {
                    "value": "t_rise",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_rise'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_455": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t[1] - t[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_456": {
                "variable": {
                    "value": "n_rise",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "t_rise / dt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_458": {
                "variable": {
                    "value": "cos_flt",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0.5 * (1 - tf.cos(np.pi * t[:n_rise] / t_rise)), tf.ones((n_flat, 1), dtype=tf.float64), 0.5 * (1 + tf.cos(np.pi * t[:n_rise] / t_rise))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_484": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_486": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(t - t_final / 2) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_493": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_494": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['sigma'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_506": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_507": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['sigma'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_522": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_523": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['sigma'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_524": {
                "variable": {
                    "value": "drag",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-(t - t_final / 2) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_528": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-t_final ** 2 / (8 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_548": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_549": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params['sigma'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_553": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-t_final ** 2 / (8 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_28": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "complex_34": {
                "real": {
                    "value": "params['inphase'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "params['quadrature'].get_value()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "t > t_mid + plateau",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t - plateau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > t_mid + plateau, t - plateau, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < t_mid, t, x)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(t < t_mid + plateau, t > t_mid), t_mid, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > (t_final + plateau) / 2, t - plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < (t_final - plateau) / 2, t + plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(np.abs(t - t_final / 2) < plateau / 2, t_final / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "t < t_mid",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > t_mid + plateau, t - plateau, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < t_mid, t, x)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(t < t_mid + plateau, t > t_mid), t_mid, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > (t_final + plateau) / 2, t - plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < (t_final - plateau) / 2, t + plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(np.abs(t - t_final / 2) < plateau / 2, t_final / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.logical_and(t < t_mid + plateau, t > t_mid)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "t_mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(t_bin_end - t_bin_start) / 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > t_mid + plateau, t - plateau, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < t_mid, t, x)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(t < t_mid + plateau, t > t_mid), t_mid, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > (t_final + plateau) / 2, t - plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < (t_final - plateau) / 2, t + plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(np.abs(t - t_final / 2) < plateau / 2, t_final / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_100": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x == t_mid",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_134": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "np.ones_like(t)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_301": {
                "input_tensor": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_342": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_343": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "t > (t_final + plateau) / 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t - plateau / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > t_mid + plateau, t - plateau, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < t_mid, t, x)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(t < t_mid + plateau, t > t_mid), t_mid, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > (t_final + plateau) / 2, t - plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < (t_final - plateau) / 2, t + plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(np.abs(t - t_final / 2) < plateau / 2, t_final / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_344": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "t < (t_final - plateau) / 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t + plateau / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > t_mid + plateau, t - plateau, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < t_mid, t, x)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(t < t_mid + plateau, t > t_mid), t_mid, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > (t_final + plateau) / 2, t - plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < (t_final - plateau) / 2, t + plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(np.abs(t - t_final / 2) < plateau / 2, t_final / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_345": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "np.abs(t - t_final / 2) < plateau / 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t_final / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > t_mid + plateau, t - plateau, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < t_mid, t, x)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.logical_and(t < t_mid + plateau, t > t_mid), t_mid, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ],
                        [
                            "tf.where(t > (t_final + plateau) / 2, t - plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(t < (t_final - plateau) / 2, t + plateau / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.where(np.abs(t - t_final / 2) < plateau / 2, t_final / 2, x)",
                            "Call"
                        ],
                        [
                            "tf.identity(t)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_349": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['width'].get_value()",
                            "Call"
                        ],
                        [
                            "tf.cast(params['width'].get_value(), tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.cast(params['width'].get_value(), tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_361": {
                "input_tensor": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t), 1])",
                            "Call"
                        ],
                        [
                            "tf.where(x == t_mid, 1.0, shape)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tfp.math.interp_regular_1d_grid(t_interp, t_bin_start, t_bin_end, inphase, fill_value_below=0, fill_value_above=0), [len(t)])",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.reduce_min((t - t_s - 1e-09) ** 2) == (t - t_s - 1e-09) ** 2, np.ones_like(t), shape)",
                            "Call"
                        ],
                        [
                            "(1 + tf.math.erf((t - t_up) / risefall)) / 2 * (1 + tf.math.erf((-t + t_down) / risefall)) / 2",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 1)",
                            "Call"
                        ],
                        [
                            "shape + coeff * tf.sin(np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length)",
                            "BinOp"
                        ],
                        [
                            "tf.math.erf((t - t_up) / risefall) * tf.math.erf((-t + t_down) / risefall)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(shape, 0, 2)",
                            "Call"
                        ],
                        [
                            "tf.zeros_like(t)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.abs(t_final / 2 - t) > width / 2, tf.zeros_like(t), shape)",
                            "Call"
                        ],
                        [
                            "shape * (1 - offset / amp) + offset / amp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "greater_113": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t_final / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_156": {
                "x": {
                    "value": "params['amps'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "params['freqs'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_164": {
                "x": {
                    "value": "params['phases'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_167": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_168": {
                "input_tensor": {
                    "value": "amps * tf.sin(freqs * t + phases)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_185": {
                "x": {
                    "value": "params['amps'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_188": {
                "x": {
                    "value": "params['freqs'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_190": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "amps * tf.cos(freqs * t)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_197": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_equal_217": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "risefall * 2.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_equal_220": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "t_final - risefall * 2.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_299": {
                "x": {
                    "value": "(-t + t_down) / risefall",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_325": {
                "x": {
                    "value": "(-t + t_down) / risefall",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_360": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.cast(t, tf.float64), [1, t.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_83": {
                "x": {
                    "value": "t < t_mid + plateau",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "t > t_mid",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "abs_360": {
                "x": {
                    "value": "t_final / 2 - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_393": {
                "x": {
                    "value": "2 * np.pi * sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_393": {
                "x": {
                    "value": "t_final / (np.sqrt(8) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_436": {
                "x": {
                    "value": "2 * np.pi * t / t_final",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_461": {
                "shape": {
                    "value": "(n_flat, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_496": {
                "x": {
                    "value": "-(t - t_final / 2) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_509": {
                "x": {
                    "value": "-(t - t_final / 2) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_513": {
                "x": {
                    "value": "2 * np.pi * sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_513": {
                "x": {
                    "value": "t_final / (tf.cast(tf.sqrt(8.0), tf.float64) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_515": {
                "x": {
                    "value": "-t_final ** 2 / (8 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_525": {
                "x": {
                    "value": "2 * np.pi * sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_525": {
                "x": {
                    "value": "t_final / (np.sqrt(8) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_527": {
                "x": {
                    "value": "-t_final ** 2 / (8 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_550": {
                "x": {
                    "value": "2 * np.pi * sigma ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_550": {
                "x": {
                    "value": "t_final / (np.sqrt(8) * sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_552": {
                "x": {
                    "value": "-t_final ** 2 / (8 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_135": {
                "input_tensor": {
                    "value": "(t - t_s - 1e-09) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_168": {
                "x": {
                    "value": "freqs * t + phases",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_191": {
                "x": {
                    "value": "freqs * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_248": {
                "x": {
                    "value": "(-t + t_down) / risefall",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_275": {
                "x": {
                    "value": "(-t + t_down) / risefall",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_353": {
                "x": {
                    "value": "2 * np.pi * (n + 1) * (x - (t_final - length) / 2) / length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_358": {
                "x": {
                    "value": "np.pi * (2 * n + 1) * (x - (t_final - length) / 2) / length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_246": {
                "x": {
                    "value": "(t - t_up) / risefall",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_273": {
                "x": {
                    "value": "(t - t_up) / risefall",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_460": {
                "x": {
                    "value": "np.pi * t[:n_rise] / t_rise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_462": {
                "x": {
                    "value": "np.pi * t[:n_rise] / t_rise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_514": {
                "x": {
                    "value": "tf.sqrt(8.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_514": {
                "x": {
                    "value": "8.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_556": {
                "x": {
                    "value": "-(t - t_final / 2) ** 2 / (2 * sigma ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "c3/libraries/estimators.py": {
        "tensorflow": {
            "abs_22": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_29": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_36": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_43": {
                "variable": {
                    "value": "sim_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim_values * (1 - sim_values) / shots",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_44": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_51": {
                "variable": {
                    "value": "sim_std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim_values * (1 - sim_values) / shots",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_52": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_59": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_66": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_73": {
                "variable": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(exp_values, sim_values)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_103": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_114": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim_values * (1 - sim_values) / shots",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_130": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim_values * (1 - sim_values) / shots",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_134": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_146": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim_values * (1 - sim_values) / shots",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim_values * (1 - sim_values) / shots",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_185": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_202": {
                "variable": {
                    "value": "loglkh",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loglkhs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "binom.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "binom.log_prob(exp_values * shots) - binom.log_prob(sim_values * shots)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values)",
                            "Call"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "gauss.log_prob(exp_values) - gauss.log_prob(mean)",
                            "BinOp"
                        ],
                        [
                            "multi.log_prob(exp_values * shots)",
                            "Call"
                        ],
                        [
                            "multi.log_prob(exp_values * shots) - multi.log_prob(sim_values * shots)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_23": {
                "input_tensor": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_37": {
                "x": {
                    "value": "tf.reduce_mean(diffs ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "diffs / sim_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_53": {
                "x": {
                    "value": "tf.reduce_mean((diffs / sim_std) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_60": {
                "input_tensor": {
                    "value": "diffs / exp_stds",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "x": {
                    "value": "tf.reduce_mean((diffs / exp_stds) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_std_74": {
                "input_tensor": {
                    "value": "diffs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ],
                        [
                            "tf.abs(tf.subtract(exp_values, sim_values))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_157": {
                "input_tensor": {
                    "value": "((exp_values - sim_values) ** 2 / std ** 2 - 1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_22": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_29": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_36": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_37": {
                "input_tensor": {
                    "value": "diffs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_44": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_52": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "input_tensor": {
                    "value": "(diffs / sim_std) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_59": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "subtract_66": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "(diffs / exp_stds) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "subtract_73": {
                "x": {
                    "value": "exp_values",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sim_values",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_182": {
                "tensor": {
                    "value": "shots",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shots.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_199": {
                "tensor": {
                    "value": "shots",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shots.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "c3/libraries/fidelities.py": {
        "tensorflow": {
            "matmul_145": {
                "variable": {
                    "value": "psi_ideal",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "ideal",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "psi_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(lvls, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(lvls, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "psi_actual",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "actual_comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_project_to_comp(actual, dims=dims, index=index)",
                            "Call"
                        ],
                        [
                            "tf_project_to_comp(actual, dims=dims, index=index)",
                            "Call"
                        ],
                        [
                            "tf_project_to_comp(actual, dims=dims, index=index, to_super=True)",
                            "Call"
                        ],
                        [
                            "tf_project_to_comp(actual, dims=dims, index=index)",
                            "Call"
                        ],
                        [
                            "tf_project_to_comp(actual, dims=dims, index=index, to_super=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(lvls, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(lvls, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_500": {
                "variable": {
                    "value": "psi_0",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "basis(lvls, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_501": {
                "variable": {
                    "value": "psi_actual",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(lvls, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(lvls, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_508": {
                "variable": {
                    "value": "psi_0",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "basis(lvls, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_510": {
                "variable": {
                    "value": "dv_actual",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "dv_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_dm_to_vec(tf_state_to_dm(psi_0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_528": {
                "variable": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "basis(dim, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_622": {
                "variable": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "basis(dim, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "infids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_218": {
                "input_tensor": {
                    "value": "infids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_285": {
                "input_tensor": {
                    "value": "infids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_344": {
                "input_tensor": {
                    "value": "infids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_433": {
                "input_tensor": {
                    "value": "infids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_452": {
                "variable": {
                    "value": "C_ideal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ideal_cliffords[C_indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_769": {
                "variable": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "basis(dim, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_770": {
                "variable": {
                    "value": "psi_actual",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_781": {
                "variable": {
                    "value": "infid",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.backend.random_binomial([shots], p=p1, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_476": {
                "value": {
                    "value": "ideal_cliffords[C_indx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_543": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_639": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_584": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_688": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_739": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "propagators[gate]",
                            "Subscript"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ],
                        [
                            "Us",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(basis(dim, 0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "c3/libraries/propagation.py": {
        "tensorflow": {
            "stack_60": {
                "variable": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_121": {
                "variable": {
                    "value": "cflds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(signals, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_122": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_129": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ts[1 * prop_res].numpy() - ts[0].numpy()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_166": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.math.reduce_mean(ts_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_172": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ts[1 * prop_res].numpy() - ts[0].numpy()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_u_rk4(Hs, dt, dim)",
                            "Call"
                        ],
                        [
                            "model.blowup_excitations(U)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(U)",
                            "Call"
                        ],
                        [
                            "tf_matmul_n(dUs, folding_stack)",
                            "Call"
                        ],
                        [
                            "model.blowup_excitations(tf_matmul_left(tf.cast(dUs, tf.complex128)))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_273": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "len(h0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expm_321": {
                "variable": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1j * h * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expm_365": {
                "variable": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lind_op * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_370": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ts[1 * prop_res].numpy() - ts[0].numpy(), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(ts[1 * prop_res].numpy() - ts[0].numpy(), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "dict_vals['dt']",
                            "Subscript"
                        ],
                        [
                            "ts[1] - ts[0]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_387": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ts[1 * prop_res].numpy() - ts[0].numpy(), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(ts[1 * prop_res].numpy() - ts[0].numpy(), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "dict_vals['dt']",
                            "Subscript"
                        ],
                        [
                            "ts[1] - ts[0]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_388": {
                "variable": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_389": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eigh_390": {
                "variable": {
                    "value": "(e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_Hamiltonian(signal)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_391": {
                "variable": {
                    "value": "ort",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_392": {
                "variable": {
                    "value": "dE",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-1j * tf.math.real(e) * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_395": {
                "variable": {
                    "value": "ht",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cflds * hks",
                            "BinOp"
                        ],
                        [
                            "cflds_t * hks",
                            "BinOp"
                        ],
                        [
                            "cflds * hks",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorArray_442": {
                "variable": {
                    "value": "dUs_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(tf.math.ceil(signals.shape[0] / batch_size))",
                            "Call"
                        ],
                        [
                            "int(tf.math.ceil(hamiltonian.shape[0] / batch_size))",
                            "Call"
                        ]
                    ]
                },
                "infer_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_487": {
                "variable": {
                    "value": "col_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(col_ops, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_488": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(ts[1 * prop_res].numpy() - ts[0].numpy(), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.constant(ts[1 * prop_res].numpy() - ts[0].numpy(), dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "dict_vals['dt']",
                            "Subscript"
                        ],
                        [
                            "ts[1] - ts[0]",
                            "BinOp"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(dt, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_500": {
                "variable": {
                    "value": "h_id",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "h.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[h.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_505": {
                "variable": {
                    "value": "col_ops_id",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "col_ops.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "[col_ops.shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_511": {
                "variable": {
                    "value": "super_clp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "l_col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(col_ops, col_ops_id)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "r_col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(col_ops_id, tf.linalg.matrix_transpose(col_ops))",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "expand_dims_514": {
                "variable": {
                    "value": "clp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(super_clp - anticom_L_clp - anticom_R_clp, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expm_519": {
                "variable": {
                    "value": "dU",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lind_op * dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_582": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "int(A.shape[-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "A.shape[:-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_610": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "int(A.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_614": {
                "variable": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_45": {
                "variable": {
                    "value": "tot_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "h + cflds_t[ii] * hks[ii]",
                            "BinOp"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "tf.cast(h0, tf.complex128)",
                            "Call"
                        ],
                        [
                            "h0 + tf.reduce_sum(prod, axis=0)",
                            "BinOp"
                        ],
                        [
                            "h0 + tf.reduce_sum(prod, axis=0)",
                            "BinOp"
                        ],
                        [
                            "h0",
                            "variable"
                        ]
                    ]
                }
            },
            "one_hot_57": {
                "variable": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(dim)",
                            "Call"
                        ],
                        [
                            "range(cflds[0].shape[0])",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ii + 1",
                            "BinOp"
                        ],
                        [
                            "range(dim)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "range(len(hks))",
                            "Call"
                        ],
                        [
                            "range(cflds[0].shape[0])",
                            "Call"
                        ],
                        [
                            "range(2, terms)",
                            "Call"
                        ],
                        [
                            "tf.constant(2, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tot_dim[1]",
                            "Subscript"
                        ],
                        [
                            "model.tot_dim",
                            "Attribute"
                        ],
                        [
                            "list(gates.values())[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "vectorized_map_208": {
                "variable": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "model.blowup_excitations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_dus_rk4(Hs, dt, dim)",
                            "Call"
                        ],
                        [
                            "tf.vectorized_map(model.blowup_excitations, dUs)",
                            "Call"
                        ],
                        [
                            "tf_batch_propagate(h0, hks, signals, dt, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.vectorized_map(model.blowup_excitations, dUs)",
                            "Call"
                        ],
                        [
                            "dU0 @ tf.linalg.expm(dh) @ (tf.identity(dU0) - dcomm)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "one_hot_216": {
                "variable": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(dim)",
                            "Call"
                        ],
                        [
                            "range(cflds[0].shape[0])",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ii + 1",
                            "BinOp"
                        ],
                        [
                            "range(dim)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "range(len(hks))",
                            "Call"
                        ],
                        [
                            "range(cflds[0].shape[0])",
                            "Call"
                        ],
                        [
                            "range(2, terms)",
                            "Call"
                        ],
                        [
                            "tf.constant(2, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tot_dim[1]",
                            "Subscript"
                        ],
                        [
                            "model.tot_dim",
                            "Attribute"
                        ],
                        [
                            "list(gates.values())[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_u_rk4(Hs, dt, dim)",
                            "Call"
                        ],
                        [
                            "model.blowup_excitations(U)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.stack(U)",
                            "Call"
                        ],
                        [
                            "tf_matmul_n(dUs, folding_stack)",
                            "Call"
                        ],
                        [
                            "model.blowup_excitations(tf_matmul_left(tf.cast(dUs, tf.complex128)))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_254": {
                "variable": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(signals, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_255": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_259": {
                "variable": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.math.reduce_mean(ts_list, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "vectorized_map_282": {
                "variable": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "model.blowup_excitations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_dus_rk4(Hs, dt, dim)",
                            "Call"
                        ],
                        [
                            "tf.vectorized_map(model.blowup_excitations, dUs)",
                            "Call"
                        ],
                        [
                            "tf_batch_propagate(h0, hks, signals, dt, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.vectorized_map(model.blowup_excitations, dUs)",
                            "Call"
                        ],
                        [
                            "dU0 @ tf.linalg.expm(dh) @ (tf.identity(dU0) - dcomm)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_353": {
                "variable": {
                    "value": "super_clp",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_spre(col_op)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf_spost(tf.linalg.adjoint(col_op))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_372": {
                "variable": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_373": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_374": {
                "input": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_375": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_381": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_Hamiltonian(signal)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expm_383": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1j * h * dt",
                            "BinOp"
                        ],
                        [
                            "-1j * ht * dt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TensorArray_425": {
                "variable": {
                    "value": "batch_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "signals.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(tf.math.ceil(signals.shape[0] / batch_size))",
                            "Call"
                        ],
                        [
                            "int(tf.math.ceil(hamiltonian.shape[0] / batch_size))",
                            "Call"
                        ]
                    ]
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorArray_434": {
                "variable": {
                    "value": "batch_array",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hamiltonian.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "batches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(tf.math.ceil(signals.shape[0] / batch_size))",
                            "Call"
                        ],
                        [
                            "int(tf.math.ceil(hamiltonian.shape[0] / batch_size))",
                            "Call"
                        ]
                    ]
                },
                "dynamic_size": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "infer_shape": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_490": {
                "variable": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_491": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_492": {
                "input": {
                    "value": "cflds_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(cflds_t, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_493": {
                "variable": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.cast(hks, tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(hks, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(hks, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_494": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_Hamiltonian(signal)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matvec_21": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "h + cflds_t[ii] * hks[ii]",
                            "BinOp"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "tf.cast(h0, tf.complex128)",
                            "Call"
                        ],
                        [
                            "h0 + tf.reduce_sum(prod, axis=0)",
                            "BinOp"
                        ],
                        [
                            "h0 + tf.reduce_sum(prod, axis=0)",
                            "BinOp"
                        ],
                        [
                            "h0",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(ii, dim, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "rk4_step(h, psi, dt)",
                            "Call"
                        ],
                        [
                            "psi + (k1 + 2 * k2 + 2 * k3 + k4) / 6.0",
                            "BinOp"
                        ],
                        [
                            "tf.one_hot(ii, dim, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "rk4_step(h[jj:jj + 3], psi, dt)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "ts_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ],
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_377": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_Hamiltonian(signal)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(h0, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_transpose_502": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "h + cflds_t[ii] * hks[ii]",
                            "BinOp"
                        ],
                        [
                            "h0",
                            "variable"
                        ],
                        [
                            "tf.cast(h0, tf.complex128)",
                            "Call"
                        ],
                        [
                            "h0 + tf.reduce_sum(prod, axis=0)",
                            "BinOp"
                        ],
                        [
                            "h0 + tf.reduce_sum(prod, axis=0)",
                            "BinOp"
                        ],
                        [
                            "h0",
                            "variable"
                        ]
                    ]
                }
            },
            "matrix_transpose_509": {
                "a": {
                    "value": "col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(col_ops, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_512": {
                "a": {
                    "value": "l_col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(col_ops, col_ops_id)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "l_col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(col_ops, col_ops_id)",
                            "Call"
                        ]
                    ]
                },
                "adjoint_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_513": {
                "a": {
                    "value": "r_col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(col_ops_id, tf.linalg.matrix_transpose(col_ops))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "r_col_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf_kron(col_ops_id, tf.linalg.matrix_transpose(col_ops))",
                            "Call"
                        ]
                    ]
                },
                "adjoint_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_515": {
                "input_tensor": {
                    "value": "super_clp - anticom_L_clp - anticom_R_clp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_559": {
                "variable": {
                    "value": "Us",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.cast(Us, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_615": {
                "input_tensor": {
                    "value": "tf.abs(A_powers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_259": {
                "input_tensor": {
                    "value": "ts_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ],
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_354": {
                "a": {
                    "value": "tf_spre(tf.linalg.adjoint(col_op))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf_spre(col_op)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_357": {
                "a": {
                    "value": "tf_spost(col_op)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf_spost(tf.linalg.adjoint(col_op))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_379": {
                "input_tensor": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cflds * hks",
                            "BinOp"
                        ],
                        [
                            "cflds_t * hks",
                            "BinOp"
                        ],
                        [
                            "cflds * hks",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_393": {
                "diagonal": {
                    "value": "dE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.exp(-1j * tf.math.real(e) * dt)",
                            "Call"
                        ]
                    ]
                }
            },
            "expm_399": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1j * h * dt",
                            "BinOp"
                        ],
                        [
                            "-1j * ht * dt",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_399": {
                "input": {
                    "value": "dU0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ort @ tf.linalg.diag(dE) @ ort.T",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ceil_424": {
                "x": {
                    "value": "signals.shape[0] / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ceil_433": {
                "x": {
                    "value": "hamiltonian.shape[0] / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_496": {
                "input_tensor": {
                    "value": "prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cflds * hks",
                            "BinOp"
                        ],
                        [
                            "cflds_t * hks",
                            "BinOp"
                        ],
                        [
                            "cflds * hks",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_587": {
                "a": {
                    "value": "A_powers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "variable"
                        ],
                        [
                            "tf.matmul(A_powers, A) / tf.cast(ii, tf.complex128)",
                            "BinOp"
                        ],
                        [
                            "A",
                            "variable"
                        ],
                        [
                            "tf.matmul(A_powers, A) / ii",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_587": {
                "x": {
                    "value": "ii",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(dim)",
                            "Call"
                        ],
                        [
                            "range(cflds[0].shape[0])",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "ii + 1",
                            "BinOp"
                        ],
                        [
                            "range(dim)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "range(len(hks))",
                            "Call"
                        ],
                        [
                            "range(cflds[0].shape[0])",
                            "Call"
                        ],
                        [
                            "range(2, terms)",
                            "Call"
                        ],
                        [
                            "tf.constant(2, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_615": {
                "x": {
                    "value": "A_powers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "variable"
                        ],
                        [
                            "tf.matmul(A_powers, A) / tf.cast(ii, tf.complex128)",
                            "BinOp"
                        ],
                        [
                            "A",
                            "variable"
                        ],
                        [
                            "tf.matmul(A_powers, A) / ii",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_616": {
                "a": {
                    "value": "A_powers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "variable"
                        ],
                        [
                            "tf.matmul(A_powers, A) / tf.cast(ii, tf.complex128)",
                            "BinOp"
                        ],
                        [
                            "A",
                            "variable"
                        ],
                        [
                            "tf.matmul(A_powers, A) / ii",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_126": {
                "x": {
                    "value": "fields[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_variance_167": {
                "input_tensor": {
                    "value": "ts_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ],
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_variance_169": {
                "input_tensor": {
                    "value": "ts[1:] - ts[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_281": {
                "x": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "gen_dus_rk4(Hs, dt, dim)",
                            "Call"
                        ],
                        [
                            "tf.vectorized_map(model.blowup_excitations, dUs)",
                            "Call"
                        ],
                        [
                            "tf_batch_propagate(h0, hks, signals, dt, batch_size=batch_size)",
                            "Call"
                        ],
                        [
                            "tf.vectorized_map(model.blowup_excitations, dUs)",
                            "Call"
                        ],
                        [
                            "dU0 @ tf.linalg.expm(dh) @ (tf.identity(dU0) - dcomm)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjoint_353": {
                "matrix": {
                    "value": "col_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "col_ops",
                            "variable"
                        ]
                    ]
                }
            },
            "real_392": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_481": {
                "x": {
                    "value": "fields[ii]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_553": {
                "num_rows": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tot_dim[1]",
                            "Subscript"
                        ],
                        [
                            "model.tot_dim",
                            "Attribute"
                        ],
                        [
                            "list(gates.values())[0].shape[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(gates.values())[0].dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_variance_263": {
                "input_tensor": {
                    "value": "ts_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ],
                        [
                            "[sig['ts'][1:] for sig in signal.values()]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_variance_267": {
                "input_tensor": {
                    "value": "ts[1:] - ts[:-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "adjoint_355": {
                "matrix": {
                    "value": "col_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "col_ops",
                            "variable"
                        ]
                    ]
                }
            },
            "adjoint_358": {
                "matrix": {
                    "value": "col_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "col_ops",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "c3/libraries/tasks.py": {
        "tensorflow": {
            "diag_part_68": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drift_ham",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_122": {
                "variable": {
                    "value": "conf_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "conf_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[1]], dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf_utils.tf_kron(conf_matrix, conf_mat)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "pops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(conf_matrix, pops)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_65": {
                "variable": {
                    "value": "init_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['init_temp'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_74": {
                "variable": {
                    "value": "det_bal",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-constants.hbar * freq_diff * beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_76": {
                "variable": {
                    "value": "dm",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "norm_bal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "det_bal / tf.reduce_sum(det_bal)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_82": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "qt_utils.basis(dim, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_126": {
                "variable": {
                    "value": "conf_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[row1], [row2]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_75": {
                "input_tensor": {
                    "value": "det_bal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-constants.hbar * freq_diff * beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_125": {
                "input": {
                    "value": "row1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf_row.get_value()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "c3/main.py": {
        "tensorflow": {
            "set_verbosity_130": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_49": {
                "device_name": {
                    "value": "/CPU:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "c3/model.py": {
        "tensorflow": {
            "vectorized_map_338": {
                "variable": {
                    "value": "sparse_controls",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "self.blowup_excitations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "elems": {
                    "value": "controls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.dressed_control_hams",
                            "Attribute"
                        ],
                        [
                            "self.control_hams",
                            "Attribute"
                        ],
                        [
                            "self.cut_excitations(controls)",
                            "Call"
                        ]
                    ]
                }
            },
            "eigh_463": {
                "variable": {
                    "value": "(e, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.drift_ham",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_468": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "tf.matmul(v, tf.transpose(signed_rm))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_482": {
                "variable": {
                    "value": "dressed_drift_ham",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matmul(tf.linalg.adjoint(self.transform), self.drift_ham)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_523": {
                "variable": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expm_544": {
                "variable": {
                    "value": "FR",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exponent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0.0, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "exponent + 1j * num_oper * (freq * t_final + framechange)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "real_548": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.linalg.diag_part(self.dressed_drift_ham)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_581": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tot_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tot_dim",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_640": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.tot_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_644": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transform",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "tf.matmul(v, tf.transpose(signed_rm))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_65": {
                "a": {
                    "value": "tf.constant(gs, dtype=tf.complex128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_181": {
                "variable": {
                    "value": "self.ex_cutter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "excitation_cutter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(proj)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_425": {
                "variable": {
                    "value": "v_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.math.real(v * tf.math.conj(v))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_427": {
                "variable": {
                    "value": "max_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_max(v_sq, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_444": {
                "variable": {
                    "value": "signed_rm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.math.real(v)) * reorder_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matvec_451": {
                "variable": {
                    "value": "eigenframe",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "reorder_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.tot_dim)",
                            "Call"
                        ],
                        [
                            "tf.cast(v_sq > 0.5, tf.float64)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(vc)",
                            "Call"
                        ],
                        [
                            "tf.constant(reorder_matrix, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.math.real(e)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_452": {
                "variable": {
                    "value": "transform",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.tot_dim, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "self.U_transform",
                            "Attribute"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(signed_rm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_454": {
                "variable": {
                    "value": "reorder_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "self.tot_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_455": {
                "variable": {
                    "value": "eigenframe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(self.tot_dim, dtype=tf.double)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_479": {
                "variable": {
                    "value": "dressed_hamiltonians[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matmul(tf.linalg.adjoint(self.transform), h)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_486": {
                "variable": {
                    "value": "dressed_control_hams[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matmul(tf.linalg.adjoint(self.transform), self.control_hams[key])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_537": {
                "variable": {
                    "value": "num_oper",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.matmul(ann_oper.T.conj(), ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_589": {
                "variable": {
                    "value": "num_oper",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.matmul(ann_oper.T.conj(), ann_oper)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_635": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "self.tot_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_65": {
                "value": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0] * self.tot_dim]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_188": {
                "a": {
                    "value": "cutter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ex_cutter",
                            "Attribute"
                        ],
                        [
                            "self.ex_cutter",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_429": {
                "variable": {
                    "value": "reorder_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "v_sq > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_443": {
                "variable": {
                    "value": "reorder_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "reorder_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.tot_dim)",
                            "Call"
                        ],
                        [
                            "tf.cast(v_sq > 0.5, tf.float64)",
                            "Call"
                        ],
                        [
                            "np.zeros_like(vc)",
                            "Call"
                        ],
                        [
                            "tf.constant(reorder_matrix, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_483": {
                "a": {
                    "value": "tf.linalg.adjoint(self.transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.drift_ham",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_543": {
                "num_rows": {
                    "value": "self.tot_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_part_548": {
                "input": {
                    "value": "self.dressed_drift_ham",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_582": {
                "diagonal": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones(tot_dim, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_192": {
                "a": {
                    "value": "cutter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ex_cutter",
                            "Attribute"
                        ],
                        [
                            "self.ex_cutter",
                            "Attribute"
                        ]
                    ]
                }
            },
            "real_425": {
                "input": {
                    "value": "v * tf.math.conj(v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_427": {
                "input_tensor": {
                    "value": "v_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(tf.math.real(v * tf.math.conj(v)))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_min_428": {
                "input_tensor": {
                    "value": "max_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_max(v_sq, axis=0), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_451": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(self.tot_dim, dtype=tf.double)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_452": {
                "a": {
                    "value": "signed_rm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sign(tf.math.real(v)) * reorder_matrix, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_480": {
                "a": {
                    "value": "tf.linalg.adjoint(self.transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adjoint_483": {
                "matrix": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_487": {
                "a": {
                    "value": "tf.linalg.adjoint(self.transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.control_hams[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expm_593": {
                "input": {
                    "value": "1j * num_oper * tf.constant(np.pi, dtype=tf.complex128)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_448": {
                "x": {
                    "value": "tf.math.real(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adjoint_480": {
                "matrix": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjoint_487": {
                "matrix": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_496": {
                "a": {
                    "value": "tf.matmul(tf.linalg.adjoint(self.transform), col_op)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_371": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conj_425": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.tot_dim, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "self.U_transform",
                            "Attribute"
                        ]
                    ]
                }
            },
            "real_448": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.eye(self.tot_dim, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "self.U_transform",
                            "Attribute"
                        ]
                    ]
                }
            },
            "matmul_497": {
                "a": {
                    "value": "tf.linalg.adjoint(self.transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "col_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.col_ops",
                            "Attribute"
                        ]
                    ]
                }
            },
            "constant_594": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjoint_497": {
                "matrix": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "c3/optimizers/modellearning.py": {
        "tensorflow": {
            "GradientTape_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_324": {
                "values": {
                    "value": "sim_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ],
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_325": {
                "value": {
                    "value": "m_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ],
                        [
                            "data_set['results_std'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_326": {
                "value": {
                    "value": "m_shots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_331": {
                "values": {
                    "value": "sim_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ],
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_332": {
                "value": {
                    "value": "m_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ],
                        [
                            "data_set['results_std'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_333": {
                "value": {
                    "value": "m_shots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_406": {
                "values": {
                    "value": "sim_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ],
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_407": {
                "value": {
                    "value": "m_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ],
                        [
                            "data_set['results_std'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_408": {
                "value": {
                    "value": "m_shots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_413": {
                "values": {
                    "value": "sim_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ],
                        [
                            "self._one_par_sim_vals(current_params, data_set, ipar, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_414": {
                "value": {
                    "value": "m_stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ],
                        [
                            "data_set['results_std'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "np.array(data_set['results_std'][:seqs_pp])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_415": {
                "value": {
                    "value": "m_shots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ],
                        [
                            "data_set['shots'][:seqs_pp]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "c3/optimizers/optimalcontrol.py": {
        "tensorflow": {}
    },
    "c3/optimizers/optimalcontrol_robust.py": {
        "tensorflow": {
            "GradientTape_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "goals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "input_tensor": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "c3/optimizers/optimizer.py": {
        "tensorflow": {
            "constant_290": {
                "variable": {
                    "value": "current_params",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "create_file_writer_364": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logdir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_264": {
                "variable": {
                    "value": "current_params",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_parameters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_295": {
                "condition": {
                    "value": "gradients == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "GradientTape_209": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "text_370": {
                "name": {
                    "value": "Parameters",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "hjson.dumpsJSON(opt.pmap.asdict(instructions_only=False), indent=2, default=hjson_encode)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_402": {
                "name": {
                    "value": "goal",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "opt_status.pop('goal')",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "evaluation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "histogram_405": {
                "name": {
                    "value": "gradient",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.clip_by_value(opt_status.pop('gradient'), -3, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "evaluation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_348": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(x)",
                            "Call"
                        ],
                        [
                            "self.opt_map[i]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "float(params[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_407": {
                "t": {
                    "value": "opt_status.pop('gradient')",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_414": {
                "name": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "evaluation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_350": {
                "name": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "str(x)",
                            "Call"
                        ],
                        [
                            "self.opt_map[i]",
                            "Subscript"
                        ]
                    ]
                },
                "data": {
                    "value": "float(params[i][0])",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "histogram_416": {
                "name": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "evaluation",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_353": {
                "name": {
                    "value": "key + '_' + str(jj)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "float(params[i][jj])",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "c3/parametermap.py": {
        "tensorflow": {
            "concat_348": {
                "values": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "c3/qiskit/c3_backend.py": {
        "tensorflow": {
            "reshape_390": {
                "variable": {
                    "value": "self._initial_statevector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.constant(psi_init, dtype=tf.complex128)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_391": {
                "value": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._initial_statevector",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "c3/qiskit/c3_backend_utils.py": {
        "tensorflow": {
            "transpose_68": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.constant(psi_init, tf.complex128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_68": {
                "value": {
                    "value": "psi_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0] * int(math.pow(n_levels, n_qubits))]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "c3/signal/gates.py": {
        "tensorflow": {
            "zeros_like_306": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_329": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(amp_tot_sq, tf.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_331": {
                "variable": {
                    "value": "inphase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(ts, tf.complex128)",
                            "Call"
                        ],
                        [
                            "signal + amp * env * tf.math.exp(tf.complex(tf.zeros_like(phase), phase))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "imag_332": {
                "variable": {
                    "value": "quadrature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(ts, tf.complex128)",
                            "Call"
                        ],
                        [
                            "signal + amp * env * tf.math.exp(tf.complex(tf.zeros_like(phase), phase))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "complex_315": {
                "variable": {
                    "value": "amp",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "amp_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp.params['amp'].get_value()",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "tf.zeros_like(amp_re)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_323": {
                "variable": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp.get_shape_values(ts_off, t_end - t_start)",
                            "Call"
                        ],
                        [
                            "tf.cast(env, tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_329": {
                "x": {
                    "value": "amp_tot_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "amp_tot_sq + amp ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_315": {
                "input": {
                    "value": "amp_re",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comp.params['amp'].get_value()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_326": {
                "x": {
                    "value": "tf.complex(tf.zeros_like(phase), phase)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_326": {
                "real": {
                    "value": "tf.zeros_like(phase)",
                    "type": "Call",
                    "possible_values": []
                },
                "imag": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-xy_angle - freq_offset * ts_off",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_326": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-xy_angle - freq_offset * ts_off",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "c3/signal/pulse.py": {
        "tensorflow": {
            "minimum_111": {
                "variable": {
                    "value": "t_final",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['t_final'].get_value()",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "t_end",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_235": {
                "variable": {
                    "value": "netzero_shape_values",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[shape_values, -shape_values, [0] * (len(ts) % 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "real_175": {
                "variable": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.base_env(ts, t_final)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_180": {
                "real": {
                    "value": "env",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.real(self.base_env(ts, t_final))",
                            "Call"
                        ]
                    ]
                },
                "imag": {
                    "value": "-denv * delta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_233": {
                "value": {
                    "value": "ts",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[N_red, len(ts) - N_red]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_114": {
                "x": {
                    "value": "(ts / dt + 0.001) * 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_115": {
                "x": {
                    "value": "(0.999 * t_final - ts) / dt * 1000000.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "c3/utils/tf_utils.py": {
        "tensorflow": {
            "list_physical_devices_12": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_physical_devices_79": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_198": {
                "variable": {
                    "value": "numerator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_199": {
                "variable": {
                    "value": "denominator",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(10, dtype=numerator.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "diagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[-1] * dim + [0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "l.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_230": {
                "variable": {
                    "value": "offdiagonal",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1] * dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "l.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_279": {
                "variable": {
                    "value": "superA",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf_spre(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf_spost(tf.linalg.matrix_transpose(A, conjugate=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "psi_ket",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "psi_ket",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(psi_ket, [psi_ket.shape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[psi_ket.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_288": {
                "variable": {
                    "value": "psi_bra",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "psi_ket",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(psi_ket, [psi_ket.shape[0], 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_300": {
                "variable": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(vec.shape[0], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrtm_307": {
                "variable": {
                    "value": "rhosqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_377": {
                "variable": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.linalg.adjoint(A)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pauli_basis([2] * len(dims)), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_385": {
                "variable": {
                    "value": "lambda_super",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.linalg.adjoint(tf_project_to_comp(A, lvls, True))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pauli_basis([2] * len(dims)), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_404": {
                "variable": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "pauli_basis([2] * len(dims))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_414": {
                "variable": {
                    "value": "A_choi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(tf.reshape(A, [sqrt_shape] * 4), perm=[3, 1, 2, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "A.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_427": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(diagonal) + tf.linalg.diag(offdiagonal, k=1)",
                            "BinOp"
                        ],
                        [
                            "projector(dims, index)",
                            "Call"
                        ],
                        [
                            "np.kron(proj, proj)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_448": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(sig, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(sig, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_449": {
                "variable": {
                    "value": "resp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "resp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(resp, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(resp, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_454": {
                "variable": {
                    "value": "signal_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([sig, tf.zeros(resp_len, dtype=tf.complex128)], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_457": {
                "variable": {
                    "value": "resp_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([resp, tf.zeros(sig_len, dtype=tf.complex128)], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_460": {
                "variable": {
                    "value": "sig_resp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[signal_pad, resp_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_462": {
                "variable": {
                    "value": "fft_sig_resp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_resp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([signal_pad, resp_pad], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([signal_pad, resp_pad], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_463": {
                "variable": {
                    "value": "fft_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fft_sig_resp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fft(sig_resp)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(sig_resp)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_464": {
                "variable": {
                    "value": "convolution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fft_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_prod(fft_sig_resp, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_prod(fft_sig_resp, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_485": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(sig, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(sig, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_486": {
                "variable": {
                    "value": "resp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "resp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(resp, dtype=tf.complex128)",
                            "Call"
                        ],
                        [
                            "tf.cast(resp, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_491": {
                "variable": {
                    "value": "signal_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([tf.zeros(resp_len, dtype=tf.complex128), sig, tf.zeros(resp_len, dtype=tf.complex128)], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_502": {
                "variable": {
                    "value": "resp_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.concat([resp, tf.zeros(sig_len + resp_len, dtype=tf.complex128)], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_505": {
                "variable": {
                    "value": "sig_resp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[signal_pad, resp_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_507": {
                "variable": {
                    "value": "fft_sig_resp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig_resp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([signal_pad, resp_pad], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([signal_pad, resp_pad], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_prod_508": {
                "variable": {
                    "value": "fft_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fft_sig_resp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fft(sig_resp)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(sig_resp)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_509": {
                "variable": {
                    "value": "convolution",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fft_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_prod(fft_sig_resp, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.math.reduce_prod(fft_sig_resp, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "trace_115": {
                "*args": {
                    "value": "tf.matmul(M, rho)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "foldr_128": {
                "fn": {
                    "value": "lambda a, x: tf.matmul(a, x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "foldl_140": {
                "fn": {
                    "value": "lambda a, x: tf.matmul(a, x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "dUs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "a": {
                    "value": "odd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "even",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_192": {
                "values": {
                    "value": "[tf.matmul(odd, even[:-1]), tf.expand_dims(even[-1], 0)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_205": {
                "tensor": {
                    "value": "tf.cast(tf.math.conj(x) * x, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "complex_209": {
                "real": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "imag": {
                    "value": "tf.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_215": {
                "x": {
                    "value": "tf_abs_squared(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matvec_232": {
                "a": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(diagonal) + tf.linalg.diag(offdiagonal, k=1)",
                            "BinOp"
                        ],
                        [
                            "projector(dims, index)",
                            "Call"
                        ],
                        [
                            "np.kron(proj, proj)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_241": {
                "num_rows": {
                    "value": "A.shape[length - 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_shape": {
                    "value": "A.shape[:length - 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "A.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_260": {
                "tensor": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.expand_dims(A, -1), -3) * tf.expand_dims(tf.expand_dims(B, -2), -4)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[A.shape[-2] * B.shape[-2], A.shape[-1] * B.shape[-1]]",
                            "List"
                        ],
                        [
                            "res.shape[:-4] + dims",
                            "BinOp"
                        ],
                        [
                            "[tf.sqrt(tf.cast(U.shape[0], U.dtype))]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_289": {
                "a": {
                    "value": "psi_ket",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(psi_ket, [psi_ket.shape[0], 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "psi_bra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(psi_ket)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_295": {
                "tensor": {
                    "value": "tf.transpose(dm)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_301": {
                "a": {
                    "value": "tf.reshape(vec, [dim, dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_308": {
                "*args": {
                    "value": "tf.linalg.sqrtm(tf.matmul(tf.matmul(rhosqrt, sigma), rhosqrt))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_315": {
                "x": {
                    "value": "tf.matmul(tf.matmul(tf.linalg.adjoint(psi), rho), psi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_365": {
                "variable": {
                    "value": "lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(B.shape[0], B.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_384": {
                "variable": {
                    "value": "lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(B.shape[0], B.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_428": {
                "a": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(proj, dtype=A.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "list_logical_devices_18": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_logical_devices_91": {
                "variable": {
                    "value": "logical_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_115": {
                "a": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_199": {
                "value": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "numerator.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "x": {
                    "value": "tf.math.conj(x) * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_209": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_n_220": {
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "diag_231": {
                "diagonal": {
                    "value": "offdiagonal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([1] * dim, dtype=l.dtype)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_256": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matrix_transpose_273": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "transpose_295": {
                "a": {
                    "value": "dm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_300": {
                "x": {
                    "value": "vec.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "tensor": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[dim, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrtm_309": {
                "input": {
                    "value": "tf.matmul(tf.matmul(rhosqrt, sigma), rhosqrt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_315": {
                "a": {
                    "value": "tf.linalg.adjoint(psi)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_320": {
                "a": {
                    "value": "tf.linalg.adjoint(psi1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "psi2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_349": {
                "variable": {
                    "value": "lvls",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "B.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "B.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjoint_377": {
                "matrix": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adjoint_385": {
                "matrix": {
                    "value": "tf_project_to_comp(A, lvls, True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_415": {
                "a": {
                    "value": "tf.reshape(A, [sqrt_shape] * 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[3, 1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_455": {
                "values": {
                    "value": "[sig, tf.zeros(resp_len, dtype=tf.complex128)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_458": {
                "values": {
                    "value": "[resp, tf.zeros(sig_len, dtype=tf.complex128)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_492": {
                "values": {
                    "value": "[tf.zeros(resp_len, dtype=tf.complex128), sig, tf.zeros(resp_len, dtype=tf.complex128)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_503": {
                "values": {
                    "value": "[resp, tf.zeros(sig_len + resp_len, dtype=tf.complex128)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "a": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "a": {
                    "value": "odd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list[1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "even[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_192": {
                "input": {
                    "value": "even[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_257": {
                "input": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pauli_basis([2] * len(dims)), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matrix_transpose_280": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_309": {
                "a": {
                    "value": "rhosqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.sqrtm(rho)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adjoint_320": {
                "matrix": {
                    "value": "psi1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_365": {
                "x": {
                    "value": "B.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "B.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_376": {
                "x": {
                    "value": "B.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "B.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_384": {
                "x": {
                    "value": "B.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "B.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_403": {
                "x": {
                    "value": "tf.cast(U.shape[0], U.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adjoint_405": {
                "matrix": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pauli_basis([2] * len(dims)), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_415": {
                "tensor": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sqrt_shape] * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_memory_growth_17": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "variable"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conj_205": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "adjoint_315": {
                "matrix": {
                    "value": "psi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trace_351": {
                "*args": {
                    "value": "tf.matmul(A, tf.linalg.adjoint(B))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_367": {
                "x": {
                    "value": "tf.linalg.trace(tf.matmul(A, tf.linalg.adjoint(B)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_403": {
                "x": {
                    "value": "U.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "U.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "shape": {
                    "value": "resp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(resp)",
                            "Call"
                        ],
                        [
                            "len(resp)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "shape": {
                    "value": "sig_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(sig)",
                            "Call"
                        ],
                        [
                            "len(sig)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "shape": {
                    "value": "resp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(resp)",
                            "Call"
                        ],
                        [
                            "len(resp)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_496": {
                "shape": {
                    "value": "resp_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(resp)",
                            "Call"
                        ],
                        [
                            "len(resp)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_503": {
                "shape": {
                    "value": "sig_len + resp_len",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_351": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.linalg.adjoint(B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_367": {
                "*args": {
                    "value": "tf.matmul(A, tf.linalg.adjoint(B))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adjoint_351": {
                "matrix": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pauli_basis([2] * len(dims)), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_367": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.linalg.adjoint(B)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adjoint_367": {
                "matrix": {
                    "value": "B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(pauli_basis([2] * len(dims)), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/conftest.py": {
        "tensorflow": {
            "matmul_207": {
                "variable": {
                    "value": "Lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.linalg.adjoint(tf_project_to_comp(U_actual, lvls, to_super=False))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "U_ideal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 / np.sqrt(2) * np.array([[1, 0, -1j, 0], [0, 1, 0, -1j], [-1j, 0, 1, 0], [0, -1j, 0, 1]])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "adjoint_208": {
                "matrix": {
                    "value": "tf_project_to_comp(U_actual, lvls, to_super=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_247": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stop": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_248": {
                "start": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "stop": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "num": {
                    "value": "101",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_exp.py": {
        "tensorflow": {
            "expm_32": {
                "input": {
                    "value": "1j * rot",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_freq_dependent_coupling.py": {
        "tensorflow": {
            "constant_26": {
                "variable": {
                    "value": "expected_ham",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[-0.0 + 0j, -0.0 + 0j, -0.0 + 0j, -1.0 + 0j], [-0.0 + 0j, -0.0 + 0j, 1.0 + 0j, -0.0 + 0j], [-0.0 + 0j, 1.0 + 0j, -0.0 + 0j, -0.0 + 0j], [-1.0 + 0j, -0.0 + 0j, -0.0 + 0j, -0.0 + 0j]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_model.py": {
        "tensorflow": {
            "cast_206": {
                "variable": {
                    "value": "U_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random.uniform([qubit_lvls ** 2] * 2, minval=0, maxval=1, seed=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_225": {
                "variable": {
                    "value": "signed_rm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sign(tf.math.real(U_transform)) * model_arb_basis.reorder_matrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex128",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "U_ordered",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random.uniform([qubit_lvls ** 2] * 2, minval=0, maxval=1, seed=0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(signed_rm)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "a": {
                    "value": "tf.linalg.adjoint(U_ordered)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "drift_ham",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_arb_basis.drift_ham",
                            "Attribute"
                        ]
                    ]
                }
            },
            "uniform_207": {
                "shape": {
                    "value": "[qubit_lvls ** 2] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_237": {
                "variable": {
                    "value": "H_test",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.matmul(tf.linalg.adjoint(U_ordered), control_hams[key])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "U_ordered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(U_transform, tf.transpose(signed_rm))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_231": {
                "a": {
                    "value": "signed_rm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.sign(tf.math.real(U_transform)) * model_arb_basis.reorder_matrix, dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_226": {
                "x": {
                    "value": "tf.math.real(U_transform)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adjoint_233": {
                "matrix": {
                    "value": "U_ordered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(U_transform, tf.transpose(signed_rm))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_238": {
                "a": {
                    "value": "tf.linalg.adjoint(U_ordered)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "control_hams[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "real_226": {
                "input": {
                    "value": "U_transform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random.uniform([qubit_lvls ** 2] * 2, minval=0, maxval=1, seed=0), dtype=tf.complex128)",
                            "Call"
                        ]
                    ]
                }
            },
            "adjoint_238": {
                "matrix": {
                    "value": "U_ordered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(U_transform, tf.transpose(signed_rm))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/test_tf_utils.py": {
        "tensorflow": {
            "constant_42": {
                "variable": {
                    "value": "pauli_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_43": {
                "variable": {
                    "value": "pauli_x_noisy",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x_noisy",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}