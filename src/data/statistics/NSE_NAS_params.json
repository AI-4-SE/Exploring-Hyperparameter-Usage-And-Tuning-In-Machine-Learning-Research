{
    "datasets/base_dataset.py": {
        "torch": {}
    },
    "main.py": {
        "torch": {
            "DistributedDataParallel_76": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[self.local_id], output_device=self.local_id, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "nasnet_utils.AMBImageNet(scale=config.scale, channel_dist=config.channel_dist, input_size=config.input_size, alloc_space=config.alloc_space, cell_plan=config.cell_plan, alloc_plan=config.alloc_plan, K=config.K)",
                            "Call"
                        ],
                        [
                            "nn.SyncBatchNorm.convert_sync_batchnorm(model)",
                            "Call"
                        ],
                        [
                            "self.get_model()",
                            "Call"
                        ],
                        [
                            "self.get_gpumodel(model)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[self.local_id]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "self.local_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_194": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_302": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_712": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_757": {
                "variable": {
                    "value": "total_num",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_758": {
                "variable": {
                    "value": "top1_sum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_759": {
                "variable": {
                    "value": "top5_sum",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('seed', 233)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_all_68": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.get('seed', 233)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_122": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(config.save_path, filename)",
                            "Call"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_91": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_group_no_wd(model)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.module.arch_parameters",
                            "Attribute"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.optim_W.lr if config.optim_W.warm_epochs == 0 else config.optim_W.lr_warm",
                            "IfExp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.optim_W.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optim_W.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_group_no_wd(model)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.module.arch_parameters",
                            "Attribute"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.optim_A.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(config.optim_A.beta1, config.optim_A.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "curr_order",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.permutation(45) + 27",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_489": {
                "dataset": {
                    "value": "self.val_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedGivenIterationSampler(self.val_dataset, math.ceil(len(self.train_dataset) * 1.0 / self.batch_size), self.batch_size, seed=epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_715": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "RMSprop_94": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_group_no_wd(model)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.module.arch_parameters",
                            "Attribute"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.optim_W.lr if config.optim_W.warm_epochs == 0 else config.optim_W.lr_warm",
                            "IfExp"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optim_W.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "config.optim_W.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_356": {
                "tensor": {
                    "value": "curr_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.random.permutation(45) + 27).cuda()",
                            "Call"
                        ],
                        [
                            "curr_order.tolist()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_97": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_group_no_wd(model)",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.module.arch_parameters",
                            "Attribute"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.optim_W.lr if config.optim_W.warm_epochs == 0 else config.optim_W.lr_warm",
                            "IfExp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "config.optim_W.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.optim_W.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/distributed_utils.py": {
        "torch": {
            "device_count_10": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_12": {
                "device": {
                    "value": "local_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "proc_id % num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "Generator_95": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_226": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_func",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_97": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/scheduler.py": {
        "torch": {}
    },
    "utils/supernet_utils.py": {
        "torch": {
            "AdaptiveAvgPool2d_99": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_105": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_419": {
                "variable": {
                    "value": "self.candidates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_480": {
                "variable": {
                    "value": "self.candidates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_539": {
                "variable": {
                    "value": "self.candidates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_615": {
                "variable": {
                    "value": "self.pathes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_654": {
                "variable": {
                    "value": "self.pathes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_700": {
                "variable": {
                    "value": "self.pathes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_736": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_832": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.c[0], 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_838": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.c[self.stage], 1024, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_841": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.curr_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_843": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_854": {
                "variable": {
                    "value": "self._time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_867": {
                "variable": {
                    "value": "self.cells",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_1329": {
                "variable": {
                    "value": "self.stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.c[0], 3, stride=2, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_1342": {
                "variable": {
                    "value": "self.last_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.c[self.stage], 1024, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_1352": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.curr_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1358": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LUT[(LUT.type_code == type) & (LUT.hw == hw) & (LUT.c_in == cin) & (LUT.c_out == cout) & (LUT.kernel == k) & (LUT.stride == stride) & (LUT.padding == padding) & (LUT.dilation == dilation) & (LUT.group == group)].exec_time.values",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(k, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(stride, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(padding, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_207": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.conv2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k[0]",
                            "Subscript"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "dk // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.conv2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k[0]",
                            "Subscript"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "dk // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_282": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k[0]",
                            "Subscript"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "dk // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_289": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "group_fore",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_355": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k[0]",
                            "Subscript"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[3, 5, 7]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "[5, 7]",
                            "List"
                        ],
                        [
                            "[3, 5, 7, 9, 11]",
                            "List"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "k // 2",
                            "BinOp"
                        ],
                        [
                            "dk // 2",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_359": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "group_post",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_905": {
                "variable": {
                    "value": "curr_order",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.permutation(cell.candidate_num)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1277": {
                "variable": {
                    "value": "self.sub_space[cell_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "new_sub_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.prev_best[cell_idx]) if len(self.prev_best) > 0 else []",
                            "IfExp"
                        ],
                        [
                            "[curr_sub_space[i].item() for i in range(len(curr_sub_space)) if sub_branch_space_alpha[i] >= threshold or (not (cell.cin == cell.cout and cell.stride == 1) and len(curr_sub_space) == 2) or (len(self.prev_best) > 0 and preserve and (len(self.prev_best[cell_idx]) > 0) and (curr_sub_space[i].item() in list(self.prev_best[cell_idx])))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "tensor_1295": {
                "variable": {
                    "value": "self.sub_space[cell_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "new_sub_space",
                    "type": "variable",
                    "possible_values": [
                        [
                            "copy.deepcopy(self.prev_best[cell_idx]) if len(self.prev_best) > 0 else []",
                            "IfExp"
                        ],
                        [
                            "[curr_sub_space[i].item() for i in range(len(curr_sub_space)) if sub_branch_space_alpha[i] >= threshold or (not (cell.cin == cell.cout and cell.stride == 1) and len(curr_sub_space) == 2) or (len(self.prev_best) > 0 and preserve and (len(self.prev_best[cell_idx]) > 0) and (curr_sub_space[i].item() in list(self.prev_best[cell_idx])))]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sigmoid_92": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_164": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_165": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_167": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_168": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_174": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_239": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_240": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_242": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_243": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_245": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_248": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_249": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_311": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_312": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_314": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_315": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_317": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_318": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_381": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_382": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_384": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_385": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_387": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inplanes * t",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_388": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "outplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.size_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_832": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_838": {
                "in_channels": {
                    "value": "self.c[self.stage]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_870": {
                "size": {
                    "value": "(len(_cells), Cell.candidate_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "broadcast_906": {
                "tensor": {
                    "value": "curr_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(np.random.permutation(cell.candidate_num)).cuda()",
                            "Call"
                        ],
                        [
                            "curr_order.tolist()",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumprod_938": {
                "input": {
                    "value": "torch.stack([AMBNet._probnize(prob_pool[i], gate) for (i, gate) in enumerate(gates)])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1003": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.full((len(self.cells), self.cells[0].candidate_num), -1).cuda().type(torch.int64)",
                            "Call"
                        ],
                        [
                            "[[], []]",
                            "List"
                        ],
                        [
                            "torch.full((2, len(self.cells), self.cells[0].candidate_num), -1).cuda().type(torch.int64)",
                            "Call"
                        ],
                        [
                            "[path_set[path_set > -1].tolist() for path_set in paths]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(paths).cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.stack(paths[0]).cuda(), torch.stack(paths[1]).cuda()])",
                            "Call"
                        ],
                        [
                            "self.paths_pin",
                            "Attribute"
                        ],
                        [
                            "self.prev_paths_pin",
                            "Attribute"
                        ],
                        [
                            "self.sampler(arch_update, balance, strict_prev, round > 0, balance_s_rate=balance_s_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_1005": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(self.cells), self.cells[0].candidate_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_1007": {
                "tensor": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.full((len(self.cells), self.cells[0].candidate_num), -1).cuda().type(torch.int64)",
                            "Call"
                        ],
                        [
                            "[[], []]",
                            "List"
                        ],
                        [
                            "torch.full((2, len(self.cells), self.cells[0].candidate_num), -1).cuda().type(torch.int64)",
                            "Call"
                        ],
                        [
                            "[path_set[path_set > -1].tolist() for path_set in paths]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(paths).cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.stack(paths[0]).cuda(), torch.stack(paths[1]).cuda()])",
                            "Call"
                        ],
                        [
                            "self.paths_pin",
                            "Attribute"
                        ],
                        [
                            "self.prev_paths_pin",
                            "Attribute"
                        ],
                        [
                            "self.sampler(arch_update, balance, strict_prev, round > 0, balance_s_rate=balance_s_rate)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_1094": {
                "tensors": {
                    "value": "paths[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "full_1096": {
                "variable": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(2, len(self.cells), self.cells[0].candidate_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_1097": {
                "tensor": {
                    "value": "paths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.full((len(self.cells), self.cells[0].candidate_num), -1).cuda().type(torch.int64)",
                            "Call"
                        ],
                        [
                            "[[], []]",
                            "List"
                        ],
                        [
                            "torch.full((2, len(self.cells), self.cells[0].candidate_num), -1).cuda().type(torch.int64)",
                            "Call"
                        ],
                        [
                            "[path_set[path_set > -1].tolist() for path_set in paths]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(paths).cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack([torch.stack(paths[0]).cuda(), torch.stack(paths[1]).cuda()])",
                            "Call"
                        ],
                        [
                            "self.paths_pin",
                            "Attribute"
                        ],
                        [
                            "self.prev_paths_pin",
                            "Attribute"
                        ],
                        [
                            "self.sampler(arch_update, balance, strict_prev, round > 0, balance_s_rate=balance_s_rate)",
                            "Call"
                        ]
                    ]
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_like_1261": {
                "input": {
                    "value": "self.arch_parameters[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1329": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.c[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1331": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_1338": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1339": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.c[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "112",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_1342": {
                "in_channels": {
                    "value": "self.c[self.stage]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_1343": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_1349": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.c[self.stage]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1350": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1356": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1362": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_910": {
                "data": {
                    "value": "curr_order[:self.K]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_938": {
                "tensors": {
                    "value": "[AMBNet._probnize(prob_pool[i], gate) for (i, gate) in enumerate(gates)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "full_1026": {
                "variable": {
                    "value": "sub_branch_space_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(curr_sub_space),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_1039": {
                "variable": {
                    "value": "sub_comb_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._comb_prob(sub_branch_space_prob, gates) for gates in bin_sequnece]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "multinomial_1041": {
                "variable": {
                    "value": "sample_path_combs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_comb_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([self._comb_prob(sub_branch_space_prob, gates) for gates in bin_sequnece])",
                            "Call"
                        ],
                        [
                            "torch.stack([self._comb_prob(sub_branch_space_prob, gates) for gates in bin_sequnece])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_1233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1077": {
                "variable": {
                    "value": "path_str",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1] * len(self.prev_best[cell_idx]) + [0] * (len(curr_sub_space) - len(self.prev_best[cell_idx]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1091": {
                "data": {
                    "value": "path_selected + [-1] * (cell.candidate_num - len(path_selected))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1093": {
                "data": {
                    "value": "path_unselected + [-1] * (cell.candidate_num - len(path_unselected))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_1109": {
                "input": {
                    "value": "self.arch_parameters[0][cell_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_958": {
                "data": {
                    "value": "[-1] * cell.candidate_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1018": {
                "data": {
                    "value": "[-1] * cell.candidate_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1019": {
                "data": {
                    "value": "[-1] * cell.candidate_num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1107": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_960": {
                "data": {
                    "value": "list(curr_sub_space) + [-1] * (cell.candidate_num - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_973": {
                "variable": {
                    "value": "sub_comb_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._comb_prob(sub_branch_space_prob, gates) for gates in bin_sequnece]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "multinomial_975": {
                "variable": {
                    "value": "sample_path_combs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sub_comb_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([self._comb_prob(sub_branch_space_prob, gates) for gates in bin_sequnece])",
                            "Call"
                        ],
                        [
                            "torch.stack([self._comb_prob(sub_branch_space_prob, gates) for gates in bin_sequnece])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "full_987": {
                "variable": {
                    "value": "demi_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(curr_sub_space) + 1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "balance_s_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "full_994": {
                "variable": {
                    "value": "demi_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(curr_sub_space),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "balance_s_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_1001": {
                "data": {
                    "value": "path + [-1] * (cell.candidate_num - len(path))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1022": {
                "data": {
                    "value": "list(curr_sub_space) + [-1] * (cell.candidate_num - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1023": {
                "data": {
                    "value": "list(curr_sub_space) + [-1] * (cell.candidate_num - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_1028": {
                "input": {
                    "value": "self.arch_parameters[0][cell_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "all_1084": {
                "input": {
                    "value": "gate_2 == path_str",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "multinomial_989": {
                "variable": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "demi_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.full((len(curr_sub_space) + 1,), balance_s_rate).cuda()",
                            "Call"
                        ],
                        [
                            "torch.full((len(curr_sub_space),), balance_s_rate).cuda()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_1073": {
                "input": {
                    "value": "gate_1 == gate_2",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_1080": {
                "input": {
                    "value": "gate_2 == path_str",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sigmoid_963": {
                "input": {
                    "value": "self.arch_parameters[0][cell_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}