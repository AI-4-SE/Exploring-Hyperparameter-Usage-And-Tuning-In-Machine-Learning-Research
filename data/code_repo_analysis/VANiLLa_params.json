{
    "Baseline_Models/attn_trainer.py": {
        "sklearn": {
            "KFold_74": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "N_FOLDS",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LR",
                            "variable"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "TRG_PAD_IDX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "QnA_vocab.stoi[Ans_Sen.pad_token]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_144": {
                "f": {
                    "value": "checkpoints/attn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/attn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/cnn_trainer.py": {
        "sklearn": {
            "KFold_63": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "N_FOLDS",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LR",
                            "variable"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "WEIGHT_DECAY",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "TRG_PAD_IDX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "QnA_vocab.stoi[Ans_Sen.pad_token]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_127": {
                "f": {
                    "value": "checkpoints/cnn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/cnn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/copynet_trainer.py": {
        "sklearn": {
            "KFold_74": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "N_FOLDS",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "TRG_PAD_IDX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "QnA_vocab.stoi[Ans_Sen.pad_token]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "checkpoints/copynet-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/copynet-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/data/.ipynb_checkpoints/dataset-checkpoint.py": {
        "sklearn": {
            "train_test_split_76": {
                "variable": {
                    "value": "(train, val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/data/dataset_pos.py": {
        "sklearn": {
            "train_test_split_112": {
                "variable": {
                    "value": "(train, test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/training/attn_trainer.py": {
        "sklearn": {
            "KFold_74": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "N_FOLDS",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:1 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_93": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "TRG_PAD_IDX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "QnA_vocab.stoi[Ans_Sen.pad_token]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_144": {
                "f": {
                    "value": "checkpoints/attn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/attn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/training/cnn_trainer.py": {
        "sklearn": {
            "KFold_63": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "N_FOLDS",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_81": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "TRG_PAD_IDX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "QnA_vocab.stoi[Ans_Sen.pad_token]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_127": {
                "f": {
                    "value": "checkpoints/cnn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_112": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/cnn-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/training/copynet_trainer.py": {
        "sklearn": {
            "KFold_74": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "N_FOLDS",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:2 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_90": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "TRG_PAD_IDX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "QnA_vocab.stoi[Ans_Sen.pad_token]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_142": {
                "f": {
                    "value": "checkpoints/copynet-model.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/copynet-model1.pt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/models/.ipynb_checkpoints/attn_model-checkpoint.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_33": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_37": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_43": {
                "variable": {
                    "value": "packed_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.embedding(src))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.embedding(input))",
                            "Call"
                        ],
                        [
                            "embedded.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_52": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed_embedded)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(torch.cat((hidden[-2, :, :], hidden[-1, :, :]), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2 + dec_hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_82": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((hidden, encoder_outputs), dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_107": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_109": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "enc_hid_dim * 2 + emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2 + dec_hid_dim + emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_126": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "encoder_outputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(src, src_len)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_130": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, weighted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_88": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v(energy).squeeze(2)",
                            "Call"
                        ],
                        [
                            "attention.masked_fill(mask == 0, -10000000000.0)",
                            "Call"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "(output, weighted, embedded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/models/.ipynb_checkpoints/cnn_model-checkpoint.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "sqrt_34": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_36": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_37": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_41": {
                "variable": {
                    "value": "self.emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_44": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hid_dim, out_channels=2 * hid_dim, kernel_size=kernel_size, padding=(kernel_size - 1) // 2) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_58": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_114": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_117": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.attn_hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self.attn_emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_127": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hid_dim, out_channels=2 * hid_dim, kernel_size=kernel_size) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved + embedded) * self.scale",
                            "BinOp"
                        ],
                        [
                            "(conved_emb + embedded) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "encoder_conved.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_143": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(combined, encoder_conved.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_144": {
                "variable": {
                    "value": "attended_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy, dim=2)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(trg, encoder_conved, encoder_combined)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "encoder_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src)",
                            "Call"
                        ],
                        [
                            "encoder_combined",
                            "Method Argument"
                        ],
                        [
                            "encoder_combined",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_160": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_79": {
                "variable": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(self.dropout(conv_input))",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conv(padded_conv_input)",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conved",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[0]",
                            "Subscript"
                        ],
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ],
                        [
                            "conv_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "padded_conv_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(padding, conv_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_194": {
                "variable": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(self.dropout(conv_input))",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conv(padded_conv_input)",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conved",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_44": {
                "in_channels": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_129": {
                "in_channels": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Baseline_Models/models/.ipynb_checkpoints/rnn_model-checkpoint.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_34": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_61": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_63": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Baseline_Models/models/attn_model.py": {
        "torch": {
            "Embedding_22": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_id",
                            "Method Argument"
                        ],
                        [
                            "pad_id",
                            "Method Argument"
                        ],
                        [
                            "pad_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_25": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_29": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_padded_sequence_42": {
                "variable": {
                    "value": "packed_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.embedding(src))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.embedding(input)).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "embedded.squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ],
                        [
                            "src_len",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_packed_sequence_50": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "packed_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rnn(packed_embedded)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "self.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc(torch.cat((hidden[-2, :, :], hidden[-1, :, :]), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2 + dec_hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(dec_hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_85": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((hidden, encoder_outputs), dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.v.repeat(batch_size, 1).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.attn(torch.cat((hidden, encoder_outputs), dim=2)))",
                            "Call"
                        ],
                        [
                            "energy.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_id",
                            "Method Argument"
                        ],
                        [
                            "pad_id",
                            "Method Argument"
                        ],
                        [
                            "pad_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_118": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "enc_hid_dim * 2 + emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_hid_dim * 2 + dec_hid_dim + emb_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_122": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_143": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attention(hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "self.dropout(a)",
                            "Call"
                        ],
                        [
                            "a.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "encoder_outputs.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.encoder(src, src_len)",
                            "Call"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ],
                        [
                            "encoder_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_149": {
                "variable": {
                    "value": "rnn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded, weighted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_outputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "src.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(v, energy).squeeze(1)",
                            "Call"
                        ],
                        [
                            "attention.masked_fill(mask == 0, float('-inf'))",
                            "Call"
                        ],
                        [
                            "self.decoder(input, hidden, encoder_outputs, mask)",
                            "Call"
                        ],
                        [
                            "attention",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_68": {
                "*size": {
                    "value": "dec_hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ],
                        [
                            "dec_hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_161": {
                "tensors": {
                    "value": "(output, weighted, embedded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "(hidden[-2, :, :], hidden[-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/models/cnn_model.py": {
        "torch": {
            "sqrt_23": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_25": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_26": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_33": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hid_dim, out_channels=2 * hid_dim, kernel_size=kernel_size, padding=(kernel_size - 1) // 2) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_39": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_52": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_52": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_108": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.FloatTensor([0.5])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_110": {
                "variable": {
                    "value": "self.tok_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_111": {
                "variable": {
                    "value": "self.pos_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.attn_hid2emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.attn_emb2hid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_123": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv1d(in_channels=hid_dim, out_channels=2 * hid_dim, kernel_size=kernel_size) for _ in range(n_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(conved + embedded) * self.scale",
                            "BinOp"
                        ],
                        [
                            "(conved_emb + embedded) * self.scale",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "encoder_conved.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(combined, encoder_conved.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "variable": {
                    "value": "attended_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(energy, dim=2)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "self.decoder(trg, encoder_conved, encoder_combined)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "encoder_combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src)",
                            "Call"
                        ],
                        [
                            "encoder_combined",
                            "Method Argument"
                        ],
                        [
                            "encoder_combined",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_155": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_73": {
                "variable": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(self.dropout(conv_input))",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conv(padded_conv_input)",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conved",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[0]",
                            "Subscript"
                        ],
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ],
                        [
                            "conv_input.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.kernel_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_183": {
                "variable": {
                    "value": "padded_conv_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(padding, conv_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "glu_189": {
                "variable": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(self.dropout(conv_input))",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conv(padded_conv_input)",
                            "Call"
                        ],
                        [
                            "F.glu(conved, dim=1)",
                            "Call"
                        ],
                        [
                            "self.calculate_attention(embedded, conved, encoder_conved, encoder_combined)",
                            "Call"
                        ],
                        [
                            "(conved + conv_input) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.hid2emb(conved.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "conved",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "in_channels": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv1d_123": {
                "in_channels": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_input.shape[1]",
                            "Subscript"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * hid_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "Baseline_Models/models/copynet_model.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "pad_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_id",
                            "Method Argument"
                        ],
                        [
                            "pad_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_23": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dim",
                            "Attribute"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_52": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim + hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hid_dim",
                            "Attribute"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.Wo",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hid_dim",
                            "Attribute"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.output_dim",
                            "Attribute"
                        ],
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.Wc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.hid_dim",
                            "Attribute"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tanh_58": {
                "variable": {
                    "value": "self.nonlinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "gru_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding, weighted]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_115": {
                "variable": {
                    "value": "score_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Wc(encoded.contiguous().view(-1, hid_dim * 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_118": {
                "variable": {
                    "value": "score_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.Wc(encoded.contiguous().view(-1, hid_dim * 2)))",
                            "Call"
                        ],
                        [
                            "score_c.view(batch, -1, hid_dim)",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c, hidden.unsqueeze(2)).squeeze()",
                            "Call"
                        ],
                        [
                            "score_c + encoded_mask",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(score_c)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "hidden.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "score_c",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_122": {
                "variable": {
                    "value": "encoded_mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "score_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.tanh(self.Wc(encoded.contiguous().view(-1, hid_dim * 2)))",
                            "Call"
                        ],
                        [
                            "score_c.view(batch, -1, hid_dim)",
                            "Call"
                        ],
                        [
                            "torch.bmm(score_c, hidden.unsqueeze(2)).squeeze()",
                            "Call"
                        ],
                        [
                            "score_c + encoded_mask",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(score_c)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_129": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[score_g, score_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([score_g, score_c], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_141": {
                "variable": {
                    "value": "prob_c_to_g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_152": {
                "variable": {
                    "value": "idx_from_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bmm_165": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_c * idx_from_input",
                            "BinOp"
                        ],
                        [
                            "attn.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(src)",
                            "Call"
                        ],
                        [
                            "encoded",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_179": {
                "variable": {
                    "value": "self.Ws",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.hid_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.encoder.hid_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_81": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_194": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, tmp_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/models/rnn_model.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "int"
                        ]
                    ]
                }
            },
            "Embedding_31": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_34": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_61": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "emb_dim",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRU_63": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hid_dim",
                            "Method Argument"
                        ],
                        [
                            "hid_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "trg_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trg.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "trg_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder.output_dim",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Baseline_Models/train_eval/.ipynb_checkpoints/attn_train_eval-checkpoint.py": {
        "torch": {
            "unsqueeze_97": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(src_indexes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__45": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/train_eval/.ipynb_checkpoints/cnn_train_eval-checkpoint.py": {
        "torch": {
            "unsqueeze_90": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "trg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__41": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/train_eval/.ipynb_checkpoints/rnn_train_eval-checkpoint.py": {
        "torch": {
            "unsqueeze_97": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__44": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/train_eval/attn_train_eval.py": {
        "torch": {
            "unsqueeze_123": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(src_indexes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_26": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_27": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_28": {
                "variable": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ],
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "QnA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_30": {
                "variable": {
                    "value": "QnA_len",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "QnA.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__52": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_79": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_80": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_81": {
                "variable": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ],
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=False)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "QnA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_83": {
                "variable": {
                    "value": "QnA_len",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "QnA.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/train_eval/cnn_train_eval.py": {
        "torch": {
            "unsqueeze_97": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_18": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_19": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_20": {
                "variable": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "QnA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "trg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__36": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_59": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_60": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_61": {
                "variable": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "QnA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/train_eval/copynet_train_eval.py": {
        "torch": {
            "unsqueeze_137": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_26": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_27": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_28": {
                "variable": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "QnA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__62": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_sequence_89": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Q, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_90": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(A, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_sequence_91": {
                "variable": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "Ans_Sen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ],
                        [
                            "batch.Ans_Sen",
                            "Attribute"
                        ],
                        [
                            "nn.utils.rnn.pad_sequence(Ans_Sen, padding_value=model.pad_id, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "padding_value": {
                    "value": "model.pad_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "QnA",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Q, A)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Baseline_Models/train_eval/rnn_train_eval.py": {
        "torch": {
            "unsqueeze_97": {
                "variable": {
                    "value": "src_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__44": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "clip",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}