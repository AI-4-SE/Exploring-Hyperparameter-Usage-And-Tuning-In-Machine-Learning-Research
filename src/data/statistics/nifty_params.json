{
    "baseline_fairGNN.py": {
        "sklearn": {
            "roc_auc_score_222": {
                "variable": {
                    "value": "roc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[idx_val].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output[idx_val].detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_227": {
                "variable": {
                    "value": "roc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output[idx_test].detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_275": {
                "variable": {
                    "value": "auc_roc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.detach().cpu().numpy()[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "f1_score_278": {
                "variable": {
                    "value": "f1_s",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_preds[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "sigmoid_41": {
                "variable": {
                    "value": "s_score_sigmoid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_44": {
                "variable": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.classifier(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_45": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((s_score_sigmoid[idx_train] - torch.mean(s_score_sigmoid[idx_train])) * (y_score[idx_train] - torch.mean(y_score[idx_train])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_129": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_206": {
                "variable": {
                    "value": "optimizer_G",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "G_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.GNN.parameters()) + list(model.classifier.parameters()) + list(model.estimator.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_207": {
                "variable": {
                    "value": "optimizer_A",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.adv.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_208": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_134": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "y_score[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_136": {
                "seed": {
                    "value": "args.run",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_241": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'./fairgnn_model_{args.run + 1:02d}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "load_267": {
                "f": {
                    "value": "f'./fairgnn_model_{args.run + 1:02d}.pth'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "ones_272": {
                "*size": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/rgcn.py": {
        "sklearn": {
            "roc_auc_score_237": {
                "variable": {
                    "value": "acc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.labels[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.detach()[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_212": {
                "variable": {
                    "value": "acc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[idx_val].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output[idx_val].detach().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_40": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(features, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_41": {
                "variable": {
                    "value": "self.miu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(features, self.weight_miu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_42": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mm(features, self.weight_sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_44": {
                "variable": {
                    "value": "Att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-gamma * self.sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "variable": {
                    "value": "miu_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_norm1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(self.miu * Att).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "sigma_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_norm2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(self.sigma * Att * Att).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_58": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "miu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "miu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(miu, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(torch.matmul(miu, self.weight_miu.float()))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_68": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(sigma, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.matmul(sigma, self.weight_sigma.float()))",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "elu_69": {
                "variable": {
                    "value": "miu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(miu, self.weight_miu.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(sigma, self.weight_sigma.float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_72": {
                "variable": {
                    "value": "Att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-gamma * sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "mean_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_norm1.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(miu * Att).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "sigma_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_norm2.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "(sigma * Att * Att).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_102": {
                "variable": {
                    "value": "Att",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-gamma * previous_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "input": {
                    "value": "previous_miu * Att",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "input": {
                    "value": "previous_sigma * Att * Att",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultivariateNormal_143": {
                "variable": {
                    "value": "self.gaussian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(nnodes, self.nclass)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.diag_embed(torch.ones(nnodes, self.nclass))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_190": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_233": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "self.labels[idx_test].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_251": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_276": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_277": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adj.todense()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_280": {
                "variable": {
                    "value": "D_power",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_power",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.sum(1).pow(power)",
                            "Call"
                        ],
                        [
                            "torch.diag(D_power)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_207": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val][:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_41": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(features, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_42": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(features, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.features",
                            "Attribute"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "input": {
                    "value": "miu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(miu, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.elu(torch.matmul(miu, self.weight_miu.float()))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_miu.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(sigma, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(torch.matmul(sigma, self.weight_sigma.float()))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight_sigma.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "nnodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_embed_144": {
                "input": {
                    "value": "torch.ones(nnodes, self.nclass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_256": {
                "input": {
                    "value": "self.gc1.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_256": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_257": {
                "input": {
                    "value": "self.gc1.weight_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_257": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_279": {
                "input": {
                    "value": "D_power",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A.sum(1).pow(power)",
                            "Call"
                        ],
                        [
                            "torch.diag(D_power)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_283": {
                "input": {
                    "value": "A.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "D_power.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_98": {
                "input": {
                    "value": "previous_miu",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_99": {
                "input": {
                    "value": "previous_miu",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight_miu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_144": {
                "*size": {
                    "value": "nnodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nclass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_154": {
                "input": {
                    "value": "sigma + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'weights_rogcn_{self.seed}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'weights_rogcn_{self.seed}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "sigma + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_254": {
                "input": {
                    "value": "1e-08 + sigma1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/ssf.py": {
        "sklearn": {},
        "torch": {
            "spectral_norm_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(ft_in, nb_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_29": {
                "variable": {
                    "value": "self.gc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "GCNConv(nfeat, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.mlp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Linear(nfeat, nhid))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "GCNConv(nfeat, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_57": {
                "variable": {
                    "value": "self.convx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "GCNConv(nhid, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_121": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "GCNConv(nfeat, self.hidden_ch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "PReLU_122": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Linear(num_hidden, num_proj_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Linear(num_proj_hidden, num_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(nn.Linear(num_hidden, num_hidden))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_203": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(num_hidden, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_235": {
                "variable": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.clone()",
                            "Call"
                        ],
                        [
                            "self.gc1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.transition(x)",
                            "Call"
                        ],
                        [
                            "self.convx(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.transition(x)",
                            "Call"
                        ],
                        [
                            "self.jk(xs)",
                            "Call"
                        ],
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.transition(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "self.activation(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x, edge_index)",
                            "Call"
                        ],
                        [
                            "x.div(val.unsqueeze(dim=1).expand_as(x))",
                            "Call"
                        ],
                        [
                            "emb.detach()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_261": {
                "variable": {
                    "value": "l3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c1[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "z3[idx].squeeze().long().detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_292": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_294": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_317": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "input": {
                    "value": "z.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_298": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(x[idx_train])",
                            "Call"
                        ],
                        [
                            "classifier(x[idx_test]).argmax(dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_309": {
                "*size": {
                    "value": "(x.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "ft_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nb_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "spectral_norm_41": {
                "module": {
                    "value": "nn.Linear(nfeat, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_43": {
                "num_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "spectral_norm_44": {
                "module": {
                    "value": "nn.Linear(nhid, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_95": {
                "num_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "spectral_norm_188": {
                "module": {
                    "value": "nn.Linear(num_hidden, num_proj_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_189": {
                "num_features": {
                    "value": "num_proj_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_193": {
                "module": {
                    "value": "nn.Linear(num_proj_hidden, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_194": {
                "num_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "spectral_norm_199": {
                "module": {
                    "value": "nn.Linear(num_hidden, num_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_200": {
                "num_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_203": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cosine_similarity_244": {
                "x1": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "x2.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_127": {
                "n": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_proj_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "num_proj_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_241": {
                "input": {
                    "value": "torch.max(F.softmax(x1), dim=1)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_241": {
                "input": {
                    "value": "F.softmax(x1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_241": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "nifty_sota_gnn.py": {
        "sklearn": {
            "roc_auc_score_369": {
                "variable": {
                    "value": "auc_roc_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()[idx_test.cpu()]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.detach().cpu().numpy()[idx_test.cpu()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "f1_score_374": {
                "variable": {
                    "value": "f1_s",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "output_preds[idx_test].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_247": {
                "variable": {
                    "value": "auc_roc_train",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.detach().cpu().numpy()[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_259": {
                "variable": {
                    "value": "auc_roc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.detach().cpu().numpy()[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "f1_score_260": {
                "variable": {
                    "value": "f1_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels[idx_val].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds[idx_val].cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_320": {
                "variable": {
                    "value": "auc_roc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels.cpu().numpy()[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "output.detach().cpu().numpy()[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_114": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_106": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_245": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train].unsqueeze(1).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_257": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val].unsqueeze(1).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_55": {
                "input": {
                    "value": "c1[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y[idx_val].unsqueeze(1).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_56": {
                "input": {
                    "value": "c2[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "y[idx_val].unsqueeze(1).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_189": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_334": {
                "f": {
                    "value": "weights_vanilla.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_340": {
                "*size": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_vanilla.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_344": {
                "f": {
                    "value": "f'weights_rogcn_{args.seed}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "ones_351": {
                "*size": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_355": {
                "f": {
                    "value": "f'weights_ssf_{args.encoder}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "ones_362": {
                "*size": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_204": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_306": {
                "input": {
                    "value": "c1[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train].unsqueeze(1).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_307": {
                "input": {
                    "value": "c2[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train].unsqueeze(1).float().to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'weights_ssf_{args.encoder}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "optimizer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "par_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.encoder.parameters()) + list(model.fc1.parameters()) + list(model.fc2.parameters()) + list(model.fc3.parameters()) + list(model.fc4.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_220": {
                "variable": {
                    "value": "optimizer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "par_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model.c1.parameters()) + list(model.encoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "fairgnn_utils.py": {
        "torch": {
            "from_numpy_301": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_303": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/fairgnn.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_hidden",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_hidden",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "s_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_62": {
                "variable": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier(z)",
                            "Call"
                        ],
                        [
                            "self.classifier(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_63": {
                "variable": {
                    "value": "self.cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mean((s_score - torch.mean(s_score)) * (y_score - torch.mean(y_score)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_63": {
                "input": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/gat.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.gat_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/gcn.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/gin.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.mlp1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nfeat, nhid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "nfeat",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_14": {
                "num_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/infomax.py": {
        "torch": {
            "PReLU_12": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_20": {
                "input": {
                    "value": "z.mean(dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_17": {
                "n": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/jk.py": {
        "torch": {
            "Linear_13": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/prognn.py": {
        "torch": {
            "Adam_54": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_58": {
                "variable": {
                    "value": "self.optimizer_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "estimator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_adj",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_109": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_119": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_156": {
                "variable": {
                    "value": "loss_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimator.estimated_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_157": {
                "variable": {
                    "value": "loss_fro",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimator.estimated_adj - adj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_166": {
                "variable": {
                    "value": "loss_gcn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_train]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_169": {
                "variable": {
                    "value": "loss_symmetric",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "estimator.estimated_adj - estimator.estimated_adj.t()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "nll_loss_201": {
                "variable": {
                    "value": "loss_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_val]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nll_loss_245": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "labels[idx_test]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_255": {
                "variable": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rowsum.flatten()",
                            "Call"
                        ],
                        [
                            "r_inv + 0.001",
                            "BinOp"
                        ],
                        [
                            "r_inv.pow(-1 / 2).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow(-1 / 2).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_261": {
                "variable": {
                    "value": "r_mat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rowsum.flatten()",
                            "Call"
                        ],
                        [
                            "r_inv + 0.001",
                            "BinOp"
                        ],
                        [
                            "r_inv.pow(-1 / 2).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow(-1 / 2).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_265": {
                "input": {
                    "value": "X.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D - adj",
                            "BinOp"
                        ],
                        [
                            "r_mat_inv @ L @ r_mat_inv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_266": {
                "variable": {
                    "value": "loss_smooth_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "XLXT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(torch.matmul(X.t(), L), X)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_278": {
                "variable": {
                    "value": "self.estimated_adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(n, n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_305": {
                "variable": {
                    "value": "r_mat_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rowsum.flatten()",
                            "Call"
                        ],
                        [
                            "r_inv + 0.001",
                            "BinOp"
                        ],
                        [
                            "r_inv.pow(-1 / 2).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow(-1 / 2).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_192": {
                "input": {
                    "value": "estimator.estimated_adj.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_260": {
                "input": {
                    "value": "r_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rowsum.flatten()",
                            "Call"
                        ],
                        [
                            "r_inv + 0.001",
                            "BinOp"
                        ],
                        [
                            "r_inv.pow(-1 / 2).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow(-1 / 2).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_304": {
                "input": {
                    "value": "r_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rowsum.flatten()",
                            "Call"
                        ],
                        [
                            "r_inv + 0.001",
                            "BinOp"
                        ],
                        [
                            "r_inv.pow(-1 / 2).flatten()",
                            "Call"
                        ],
                        [
                            "rowsum.pow(-1 / 2).flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_298": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_230": {
                "input": {
                    "value": "estimator.estimated_adj - adj",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/sage.py": {
        "torch": {
            "Sequential_12": {
                "variable": {
                    "value": "self.transition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_14": {
                "num_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_274": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}