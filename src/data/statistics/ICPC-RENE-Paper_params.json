{
    "RQ 1/RQ 1.1/execute.py": {
        "sklearn": {
            "learning_curve_68": {
                "variable": {
                    "value": "(train_sizes, train_scores, test_scores, fit_times, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVR(kernel='linear')",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "df['klass']",
                            "Subscript"
                        ]
                    ]
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "n_jobs": {
                    "value": "n_jobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "train_sizes": {
                    "value": "train_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "return_times": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CountVectorizer_135": {
                "variable": {
                    "value": "vectorizer",
                    "type": "variable",
                    "possible_values": []
                },
                "analyzer": {
                    "value": "word",
                    "type": "str",
                    "possible_values": []
                },
                "max_features": {
                    "value": "1500",
                    "type": "int",
                    "possible_values": []
                },
                "tokenizer": {
                    "value": "weka_tokenizer",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "train_test_split_148": {
                "variable": {
                    "value": "(X_train, x_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Binarizer_185": {
                "variable": {
                    "value": "trainScaler",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Binarizer_186": {
                "variable": {
                    "value": "testScaler",
                    "type": "variable",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SVR_249": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RFECV_250": {
                "variable": {
                    "value": "selector",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SVR(kernel='linear')",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "cv": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "calibration_curve_111": {
                "variable": {
                    "value": "(fraction_of_positives, mean_predicted_value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "classifier['y_test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_prob": {
                    "value": "classifier['y_probs']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n_bins": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_154": {
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_155": {
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GaussianNB_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CalibratedClassifierCV_157": {
                "base_estimator": {
                    "value": "LinearSVC(fit_intercept=False, tol=0.001, C=1, dual=False, max_iter=100000)",
                    "type": "Call",
                    "possible_values": []
                },
                "method": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_158": {
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_159": {
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CalibratedClassifierCV_160": {
                "base_estimator": {
                    "value": "Perceptron()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LinearDiscriminantAnalysis_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "plot_confusion_matrix_230": {
                "variable": {
                    "value": "disp",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "x_test_exec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_test",
                            "variable"
                        ],
                        [
                            "x_test_norm",
                            "variable"
                        ]
                    ]
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "display_labels": {
                    "value": "['flaky', 'nonflaky']",
                    "type": "List",
                    "possible_values": []
                },
                "cmap": {
                    "value": "plt.cm.Blues",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LinearSVC_157": {
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "C": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dual": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Perceptron_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_211": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(x_test_exec)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            },
            "confusion_matrix_213": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(x_test_exec)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_215": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(x_test_exec)",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "roc_auc_score_216": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict_proba(x_test_exec)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_217": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(x_test_exec)",
                            "Call"
                        ]
                    ]
                }
            },
            "matthews_corrcoef_240": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(x_test_exec)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_240": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict_proba(x_test_exec)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "classification_report_240": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier.predict(x_test_exec)",
                            "Call"
                        ]
                    ]
                },
                "output_dict": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}