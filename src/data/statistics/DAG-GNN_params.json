{
    "src/modules.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.adj_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.from_numpy(adj_A).double(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.Wa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_xdims",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(tol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.z_positive",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones_like(torch.from_numpy(adj_A)).double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sinh_44": {
                "variable": {
                    "value": "adj_A1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3.0 * self.adj_A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_49": {
                "variable": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "adj_A1.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_60": {
                "variable": {
                    "value": "self.adj_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.from_numpy(adj_A).double(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.Wa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_68": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.div(torch.ones(n_var, n_out), n_out)).double()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(tol)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.z_positive",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones_like(torch.from_numpy(adj_A)).double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sinh_90": {
                "variable": {
                    "value": "adj_A1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3.0 * self.adj_A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_93": {
                "variable": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "adj_A1.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "H1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(bninput)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.adj_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "Variable(torch.from_numpy(adj_A).double(), requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sinh_127": {
                "variable": {
                    "value": "adj_A1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3.0 * self.adj_A",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "input": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "inputs - meanF",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_148": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_in_node * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.out_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_z",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.out_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "variable": {
                    "value": "self.out_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_153": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_in_node * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_182": {
                "variable": {
                    "value": "adj_A_new",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "origin_A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_191": {
                "variable": {
                    "value": "H3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_fc1(mat_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_224": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_in_node * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.out_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_z",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_226": {
                "variable": {
                    "value": "self.out_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_228": {
                "variable": {
                    "value": "self.out_fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_230": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_in_node * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_238": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_260": {
                "variable": {
                    "value": "adj_A_new",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "origin_A.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_269": {
                "variable": {
                    "value": "H3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_fc1(mat_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_296": {
                "variable": {
                    "value": "self.out_fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_in_z",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_297": {
                "variable": {
                    "value": "self.out_fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_321": {
                "variable": {
                    "value": "H3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out_fc1(mat_z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_344": {
                "variable": {
                    "value": "mat_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_A_new1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_z + Wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "input": {
                    "value": "self.adj_A != self.adj_A",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_87": {
                "input": {
                    "value": "self.adj_A != self.adj_A",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "self.adj_A != self.adj_A",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "*size": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_26": {
                "input": {
                    "value": "torch.from_numpy(adj_A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "input": {
                    "value": "adj_Aforz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x + self.Wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "tol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_73": {
                "input": {
                    "value": "torch.from_numpy(adj_A)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "input": {
                    "value": "adj_Aforz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x + self.Wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_133": {
                "input": {
                    "value": "torch.matmul(adj_A, inputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "input": {
                    "value": "adj_A_new1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_z + Wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_262": {
                "input": {
                    "value": "adj_A_new1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_z + Wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "input": {
                    "value": "adj_A_new1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new1(origin_A)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_z + Wa",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "ndarray": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_60": {
                "ndarray": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_115": {
                "ndarray": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_70": {
                "input": {
                    "value": "torch.ones(n_var, n_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "ndarray": {
                    "value": "adj_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(adj_A1.size()[0]).double()",
                            "Call"
                        ],
                        [
                            "preprocess_adj_new(adj_A1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_70": {
                "*size": {
                    "value": "n_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_A.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "StepLR_230": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(list(encoder.parameters()) + list(decoder.parameters()), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.LBFGS(list(encoder.parameters()) + list(decoder.parameters()), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optim.SGD(list(encoder.parameters()) + list(decoder.parameters()), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LBFGS_224": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_227": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(encoder.parameters()) + list(decoder.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "softmax_202": {
                "variable": {
                    "value": "soft_max_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "trans_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.transpose(axis, 0).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_225": {
                "variable": {
                    "value": "uniform",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "mx.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_239": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "mx.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_302": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "zsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_303": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "zsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_309": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "logits.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "zsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "logits.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "zsize",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_393": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_394": {
                "variable": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_valid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_395": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_397": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, feat_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, feat_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_398": {
                "variable": {
                    "value": "valid_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_valid, feat_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_valid, feat_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_399": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, feat_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, feat_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorDataset_430": {
                "variable": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_train",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_431": {
                "variable": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_valid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "TensorDataset_432": {
                "variable": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "feat_test",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_434": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_train, feat_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_train, feat_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_435": {
                "variable": {
                    "value": "valid_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_valid, feat_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_valid, feat_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_436": {
                "variable": {
                    "value": "test_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(feat_test, feat_train)",
                            "Call"
                        ],
                        [
                            "TensorDataset(feat_test, feat_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_459": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_460": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_468": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_469": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_477": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_478": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "m": {
                    "value": "num_nodes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_486": {
                "variable": {
                    "value": "triu_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes * num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "variable": {
                    "value": "tril_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_nodes * num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_607": {
                "variable": {
                    "value": "rowsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(adj, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_608": {
                "variable": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rowsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(torch.sum(adj, 1))",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_610": {
                "variable": {
                    "value": "d_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(rowsum, -0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_611": {
                "input": {
                    "value": "d_mat_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(d_inv_sqrt)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "inverse_624": {
                "variable": {
                    "value": "adj_normalized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.eye(adj.shape[0]).double() - adj.transpose(0, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_631": {
                "variable": {
                    "value": "znor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_673": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-A + z_positive * z_positive",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_221": {
                "input": {
                    "value": "y / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "norm_633": {
                "variable": {
                    "value": "testnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z[i, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_power_659": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(logits.size(0), 1, zsize).double()",
                            "Call"
                        ],
                        [
                            "torch.zeros(logits.size(0), logits.size(1), zsize).double()",
                            "Call"
                        ],
                        [
                            "torch.eye(d).double() + torch.div(matrix, d)",
                            "BinOp"
                        ]
                    ]
                },
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[0]",
                            "Subscript"
                        ],
                        [
                            "B.shape[0]",
                            "Subscript"
                        ],
                        [
                            "A.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_226": {
                "input": {
                    "value": "1 - uniform + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_240": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_579": {
                "input": {
                    "value": "preds + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_599": {
                "input": {
                    "value": "torch.pow(mean1 - mean2, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "2.0 * np.exp(2.0 * variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_607": {
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_609": {
                "input": {
                    "value": "d_inv_sqrt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(rowsum, -0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_616": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_620": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_658": {
                "n": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[0]",
                            "Subscript"
                        ],
                        [
                            "B.shape[0]",
                            "Subscript"
                        ],
                        [
                            "A.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "div_658": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W.shape[0]",
                            "Subscript"
                        ],
                        [
                            "W.shape[0]",
                            "Subscript"
                        ],
                        [
                            "B.shape[0]",
                            "Subscript"
                        ],
                        [
                            "A.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_505": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.loadtxt(file, skiprows=0, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "data[:, :, :, :2].transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "data.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_560": {
                "input": {
                    "value": "log_prior + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_567": {
                "input": {
                    "value": "2 * log_sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_599": {
                "input": {
                    "value": "mean1 - mean2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_601": {
                "input": {
                    "value": "2 * torch.from_numpy(np.pi) * variance",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_624": {
                "n": {
                    "value": "adj.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_305": {
                "input": {
                    "value": "logits[j, 0, zsize:2 * zsize]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_667": {
                "input": {
                    "value": "torch.abs(A[:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_667": {
                "input": {
                    "value": "A[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_592": {
                "input": {
                    "value": "preds[:, node_size, target[:, node_size].long()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_601": {
                "ndarray": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}