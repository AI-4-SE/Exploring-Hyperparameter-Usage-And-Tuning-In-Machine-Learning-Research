{
    "TreeCRF.py": {
        "torch": {
            "max_17": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_158": {
                "variable": {
                    "value": "all_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_log_probs, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "torch.exp(x - d) + torch.exp(y - d)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_22": {
                "input": {
                    "value": "torch.exp(x - d.unsqueeze(dim).expand_as(x)).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.alpha[s][u] + self.alpha[u + 1][t] + scores[:, s, t] for u in np.arange(s, t)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(tmp, 1)",
                            "Call"
                        ],
                        [
                            "self.beta[s][t] + self.alpha[u + 1][t] + scores[:, s, t]",
                            "BinOp"
                        ],
                        [
                            "self.beta[s][t] + self.alpha[s][u] + scores[:, s, t]",
                            "BinOp"
                        ],
                        [
                            "scores.new(batch_size, n).zero_()",
                            "Call"
                        ],
                        [
                            "self.max_scores[:, s, u] + self.max_scores[:, u + 1, t] + scores[:, s, t]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "prev_ent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "prev_ent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(prev_ent, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_98": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_133": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(score, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_22": {
                "input": {
                    "value": "x - d.unsqueeze(dim).expand_as(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multinomial_138": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_152": {
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_152": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_180": {
                "variable": {
                    "value": "self.max_scores[:, s, t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.max_scores[:, s, t]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_18": {
                "input": {
                    "value": "y - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_135": {
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(score, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(score, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "from_numpy_20": {
                "ndarray": {
                    "value": "np.asarray(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "eval_ppl.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_45": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "ll_word_all2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ll_word_all2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ll_word_all2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "ll_action_p_all2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ll_action_p_all2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ll_action_p_all2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "ll_action_q_all2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ll_action_q_all2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ll_action_q_all2, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "variable": {
                    "value": "sample_ll",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "ll_word_all2.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.word_vecs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "650",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_19": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_20": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.vocab_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "650",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_28": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_linear(self.dropout(h))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_29": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.vocab_linear(self.dropout(h)), 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "sent[:, 1:].unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_29": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_57": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(h_dim + i_dim, h_dim * 4) if l == 0 else nn.Linear(h_dim * 2, h_dim * 4) for l in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h1, h2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_117": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "650",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_118": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.vocab_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.q_binary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(q_dim * 2, q_dim * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.action_mlp_p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_129": {
                "variable": {
                    "value": "self.q_leaf_rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_133": {
                "variable": {
                    "value": "self.q_pos_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "150",
                            "Method Argument"
                        ],
                        [
                            "250",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "w_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "650",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bos, x, eos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_142": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_142": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[fwd_diff, bwd_diff]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_205": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_218": {
                "variable": {
                    "value": "word_vecs_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.word_vecs(sent[:, :-1]))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.emb(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.emb(x_expand))",
                            "Call"
                        ],
                        [
                            "word_vecs.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.emb(x))",
                            "Call"
                        ],
                        [
                            "word_vecs.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_276": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(contexts, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(contexts, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_278": {
                "variable": {
                    "value": "action_prob_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logit_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_mlp_p(contexts).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.action_mlp_p(contexts).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_278": {
                "variable": {
                    "value": "action_prob_p",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_287": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_mlp(word_contexts)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_288": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.vocab_mlp(word_contexts), 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_probs_word, 2, x_expand.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "log_probs_word.sum(1)",
                            "Call"
                        ],
                        [
                            "log_probs_word.contiguous().view(batch, samples)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.vocab_mlp(word_contexts), 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_probs_word, 2, x.unsqueeze(2)).squeeze(2).sum(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x_expand.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_288": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_307": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_314": {
                "variable": {
                    "value": "word_vecs_zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.word_vecs(sent[:, :-1]))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.emb(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(self.emb(x_expand))",
                            "Call"
                        ],
                        [
                            "word_vecs.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "self.dropout(self.emb(x))",
                            "Call"
                        ],
                        [
                            "word_vecs.unsqueeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_369": {
                "variable": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "contexts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(contexts, 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(contexts, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_371": {
                "variable": {
                    "value": "action_prob_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "action_logit_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.action_mlp_p(contexts).squeeze(2)",
                            "Call"
                        ],
                        [
                            "self.action_mlp_p(contexts).squeeze(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_371": {
                "variable": {
                    "value": "action_prob_p",
                    "type": "variable",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - 1e-07",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_379": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_mlp(word_contexts)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_380": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(self.vocab_mlp(word_contexts), 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_probs_word, 2, x_expand.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "log_probs_word.sum(1)",
                            "Call"
                        ],
                        [
                            "log_probs_word.contiguous().view(batch, samples)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.vocab_mlp(word_contexts), 2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_probs_word, 2, x.unsqueeze(2)).squeeze(2).sum(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "x.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_380": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_380": {
                "variable": {
                    "value": "log_probs_word",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.vocab_linear(self.dropout(h.squeeze(1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multinomial_40": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(self.vocab_linear(self.dropout(h.squeeze(1))), 1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input, prev_h[l][0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_95": {
                "variable": {
                    "value": "c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "c2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "stack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(stack_input, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(stack_input, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "stack_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(stack_input, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(stack_input, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sum.split(self.h_dim, 1)",
                            "Call"
                        ],
                        [
                            "all_sum.split(self.dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_103": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(f) * prev_h[l][1] + F.sigmoid(i) * F.tanh(g)",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(f1) * c1 + F.sigmoid(f2) * c2 + F.sigmoid(i) * F.tanh(g)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_121": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "650",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_123": {
                "in_features": {
                    "value": "q_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "q_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_123": {
                "normalized_shape": {
                    "value": "q_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_124": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "q_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_125": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_125": {
                "in_features": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "650",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_245": {
                "variable": {
                    "value": "child1_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_h, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_h, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "child1_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child1_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_c, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_c, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "child2_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_h, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_h, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "child2_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child2_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_c, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_c, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "child1_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child1_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_h, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_h, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_341": {
                "variable": {
                    "value": "child1_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child1_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_c, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child1_c, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_342": {
                "variable": {
                    "value": "child2_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child2_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_h, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_h, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_343": {
                "variable": {
                    "value": "child2_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child2_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_c, 0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(child2_c, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_405": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat([bos, x, eos], 1)",
                            "Call"
                        ],
                        [
                            "x[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1:-1]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_75": {
                "input": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sum.split(self.h_dim, 1)",
                            "Call"
                        ],
                        [
                            "all_sum.split(self.dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_75": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(f) * prev_h[l][1] + F.sigmoid(i) * F.tanh(g)",
                            "BinOp"
                        ],
                        [
                            "F.sigmoid(f1) * c1 + F.sigmoid(f2) * c2 + F.sigmoid(i) * F.tanh(g)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_90": {
                "input": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_102": {
                "input": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sum.split(self.dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_102": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sum.split(self.h_dim, 1)",
                            "Call"
                        ],
                        [
                            "all_sum.split(self.dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_394": {
                "n": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "x.size(1)",
                            "Call"
                        ],
                        [
                            "length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_407": {
                "input": {
                    "value": "torch.exp(x - d).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_409": {
                "input": {
                    "value": "torch.exp(x - d.unsqueeze(dim).expand_as(x)).sum(dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "h_dim + i_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "h_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "h_dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_74": {
                "input": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sum.split(self.h_dim, 1)",
                            "Call"
                        ],
                        [
                            "all_sum.split(self.dim, 1)",
                            "Call"
                        ],
                        [
                            "i in range(len(self.q_crf.alpha))",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_74": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_sum.split(self.h_dim, 1)",
                            "Call"
                        ],
                        [
                            "all_sum.split(self.dim, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_407": {
                "input": {
                    "value": "x - d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_407": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_409": {
                "input": {
                    "value": "x - d.unsqueeze(dim).expand_as(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_409": {
                "input": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_270": {
                "tensors": {
                    "value": "stack_h[k][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_364": {
                "tensors": {
                    "value": "stack_h[k][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parse.py": {
        "torch": {
            "load_118": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_121": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(sent_idx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_143": {
                "variable": {
                    "value": "sents",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "SGD_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "q_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "q_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "q_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.q_lr",
                            "Attribute"
                        ]
                    ]
                }
            },
            "SGD_103": {
                "variable": {
                    "value": "action_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "action_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.action_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_71": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.train_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_273": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.train_from)",
                            "Call"
                        ],
                        [
                            "{'args': args.__dict__, 'model': model.cpu(), 'word2idx': train_data.word2idx, 'idx2word': train_data.idx2word}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_280": {
                "variable": {
                    "value": "sample_ll",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.samples",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_156": {
                "variable": {
                    "value": "baseline",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ll_word + kl_pen * ll_action_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "baseline_k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ll_word + kl_pen * ll_action_p",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_grad_norm__179": {
                "parameters": {
                    "value": "model_params + action_params",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__181": {
                "parameters": {
                    "value": "q_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "args.q_max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_lm.py": {
        "torch": {
            "SGD_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_62": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.train_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_130": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.train_from)",
                            "Call"
                        ],
                        [
                            "{'args': args.__dict__, 'model': model.cpu(), 'word2idx': train_data.word2idx, 'idx2word': train_data.idx2word}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "args.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__108": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}