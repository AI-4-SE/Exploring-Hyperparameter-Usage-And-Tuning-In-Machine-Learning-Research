{
    "train.py": {
        "sklearn": {
            "accuracy_score_394": {
                "y_true": {
                    "value": "pred_index_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "target_index_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_103": {
                "variable": {
                    "value": "criterion_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_106": {
                "variable": {
                    "value": "criterion_content",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "opt_E_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "E_rgb.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "opt_D_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_rgb.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_113": {
                "variable": {
                    "value": "opt_E_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "E_depth.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_114": {
                "variable": {
                    "value": "opt_D_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "D_depth.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "opt_C",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "C.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_144": {
                "variable": {
                    "value": "E_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "E_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Encoder(cfg)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(E_rgb).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_145": {
                "variable": {
                    "value": "D_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "D_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Decoder(cfg, E_rgb)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(D_rgb).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_146": {
                "variable": {
                    "value": "E_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "E_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Encoder(cfg)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(E_depth).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_147": {
                "variable": {
                    "value": "D_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "D_depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Decoder(cfg, E_depth)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(D_depth).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Classifier(cfg)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(C).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_203": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rgb_encoded_features, depth_encoded_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_209": {
                "variable": {
                    "value": "loss_total",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_312": {
                "obj": {
                    "value": "E_rgb.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, f'{model_basename}_E_rgb.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "D_rgb.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, f'{model_basename}_D_rgb.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_314": {
                "obj": {
                    "value": "E_depth.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, f'{model_basename}_E_depth.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_315": {
                "obj": {
                    "value": "D_depth.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, f'{model_basename}_D_depth.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_316": {
                "obj": {
                    "value": "C.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, f'{model_basename}_C.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_359": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_372": {
                "variable": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rgb_encoded_features, depth_encoded_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util/utils.py": {
        "sklearn": {
            "accuracy_score_37": {
                "variable": {
                    "value": "class_correct",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "target_indice[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_indice[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data/__init__.py": {
        "torch": {}
    },
    "data/aligned_conc_dataset.py": {
        "torch": {}
    },
    "model/classifier.py": {
        "torch": {
            "AvgPool2d_9": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "14",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_13": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_16": {
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "cfg.NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/decoder.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.up_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 3, 7, 1, 3, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tanh_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/encoder.py": {
        "torch": {}
    },
    "model/networks.py": {
        "torch": {
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_out, kernel_size=kernel_size, stride=stride, padding=padding, bias=use_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes, kernel_size=kernel_size, stride=1, padding=padding, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, scale_factor=self.scale, mode=self.mode, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "orthogonal_20": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "gain",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/pretrained_resnet.py": {
        "torch": {}
    },
    "util/utilities.py": {
        "torch": {
            "LambdaLR_21": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizers",
                            "variable"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_118": {
                "variable": {
                    "value": "temp_chk",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}