{
    "config/hparams.py": {
        "tensorflow": {}
    },
    "tacorn/tacotron2_wrapper.py": {
        "tensorflow": {
            "reset_default_graph_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "wavernn/hyperparams.py": {
        "tensorflow": {}
    },
    "wavernn/dataset.py": {
        "torch": {
            "DataLoader_110": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AudiobookDataset(data_path)",
                            "Call"
                        ],
                        [
                            "AudiobookDataset(data_path)",
                            "Call"
                        ],
                        [
                            "AudiobookDataset(data_path)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "raw_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AudiobookDataset(data_path)",
                            "Call"
                        ],
                        [
                            "AudiobookDataset(data_path)",
                            "Call"
                        ],
                        [
                            "AudiobookDataset(data_path)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "discrete_collate",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "wavernn/distributions.py": {
        "torch": {
            "Beta_21": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_y[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "loc_y[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_y[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "loc_y[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Beta_37": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "concentration1": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_y[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "loc_y[:, :, 0].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "concentration0": {
                    "value": "beta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loc_y[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "loc_y[:, :, 1].unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(y + 1.0) / 2.0",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y, 1e-05, 0.99999)",
                            "Call"
                        ],
                        [
                            "y.expand_as(means)",
                            "Call"
                        ],
                        [
                            "y.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "0.99999",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.clamp(x, min=-1.0), max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_55": {
                "variable": {
                    "value": "(m2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.clamp(x, min=-1.0), max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[:, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "log_scale_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hp.log_scale_min",
                            "MethodArgument"
                        ],
                        [
                            "hp.log_scale_min",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "exp_94": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plus_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_y + 1.0 / (num_classes - 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_98": {
                "variable": {
                    "value": "cdf_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_y - 1.0 / (num_classes - 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_180": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y[:, :, nr_mix:2 * nr_mix] * one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_181": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(y[:, :, 2 * nr_mix:3 * nr_mix] * one_hot, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "log_scale_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hp.log_scale_min",
                            "MethodArgument"
                        ],
                        [
                            "hp.log_scale_min",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_188": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.clamp(x, min=-1.0), max=1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_202": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[:, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "log_std_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-7.0",
                            "MethodArgument"
                        ],
                        [
                            "-7.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_220": {
                "variable": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat[:, :, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "log_std_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-7.0",
                            "MethodArgument"
                        ],
                        [
                            "-7.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_221": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_hat[:, :, :1]",
                            "Subscript"
                        ],
                        [
                            "y_hat[:, :, :1]",
                            "Subscript"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.exp(log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_223": {
                "input": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "2.0 * sample - 1.0",
                            "BinOp"
                        ],
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.clamp(sample, min=-scale_factor), max=scale_factor)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-scale_factor",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_231": {
                "variable": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_232": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_56": {
                "input": {
                    "value": "torch.sum(torch.exp(x - m2), dim=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_102": {
                "input": {
                    "value": "plus_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_y + 1.0 / (num_classes - 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_106": {
                "input": {
                    "value": "min_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_y - 1.0 / (num_classes - 1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_137": {
                "input": {
                    "value": "logit_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_hat[:, :, :nr_mix]",
                            "Subscript"
                        ],
                        [
                            "y[:, :, :nr_mix]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logit_probs.data.new(logit_probs.size()).uniform_(1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "logit_probs.data - torch.log(-torch.log(temp))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_181": {
                "input": {
                    "value": "y[:, :, 2 * nr_mix:3 * nr_mix] * one_hot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_221": {
                "input": {
                    "value": "log_std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y_hat[:, :, 1:], min=log_std_min)",
                            "Call"
                        ],
                        [
                            "torch.clamp(y_hat[:, :, 1:], min=log_std_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_56": {
                "input": {
                    "value": "torch.exp(x - m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_114": {
                "input": {
                    "value": "mid_in",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inv_stdv * centered_y",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_129": {
                "input": {
                    "value": "torch.clamp(cdf_delta, min=1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_186": {
                "input": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(y_hat[:, :, 2 * nr_mix:3 * nr_mix], min=log_scale_min)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sum(y[:, :, 2 * nr_mix:3 * nr_mix] * one_hot, dim=-1), min=log_scale_min)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_56": {
                "input": {
                    "value": "x - m2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_129": {
                "input": {
                    "value": "cdf_delta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "log_186": {
                "input": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_205": {
                "input": {
                    "value": "y - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "input": {
                    "value": "-2.0 * log_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "wavernn/loss_function.py": {
        "torch": {
            "nll_loss_8": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y_hat.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "y.squeeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.rand(16, 100, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_12": {
                "variable": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "54",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_13": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "wavernn/model.py": {
        "torch": {
            "Tensor_18": {
                "variable": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_551": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "rand_571": {
                "variable": {
                    "value": "batch_mel",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "80",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_26": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_34": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_35": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv1d_50": {
                "variable": {
                    "value": "self.conv_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "compute_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_52": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "compute_dims",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_53": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1d_56": {
                "variable": {
                    "value": "self.conv_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "compute_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "res_out_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_88": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "rnn_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "rnn_num_layers",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_109": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_155": {
                "variable": {
                    "value": "self.rnn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * self.rnn_cond_dims + self.n_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "rnn_dims",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.fc_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[netinput, mels]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_179": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_256": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.batch_generate(batch_mel)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.xfade_and_unfold(output, target, overlap)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.swapaxes(1, 0).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "padded",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(batch_size)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "total",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t + 2 * pad if side == 'both' else t + pad",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_310": {
                "variable": {
                    "value": "folded",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_folds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(total_len - overlap) // (target + overlap)",
                            "BinOp"
                        ],
                        [
                            "num_folds + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "target + 2 * overlap",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_442": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.batch_generate(batch_mel)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.xfade_and_unfold(output, target, overlap)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.swapaxes(1, 0).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_442": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_520": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.batch_generate(batch_mel)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "output.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "self.xfade_and_unfold(output, target, overlap)",
                            "Call"
                        ],
                        [
                            "output[0]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "output.swapaxes(1, 0).reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRUCell_529": {
                "variable": {
                    "value": "gru_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_size": {
                    "value": "gru.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "gru.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1, scale * 2 + 1)",
                            "Tuple"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0, scale)",
                            "Tuple"
                        ],
                        [
                            "target + 2 * overlap - remaining",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.rnn_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_208": {
                "variable": {
                    "value": "mels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_394": {
                "variable": {
                    "value": "mels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_406": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mels.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_407": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mels.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mels.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mels.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_466": {
                "variable": {
                    "value": "h1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mels.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_467": {
                "variable": {
                    "value": "h2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mels.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.rnn_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, m_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_226": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_249": {
                "variable": {
                    "value": "new_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_420": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, m_t, a1_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a2_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a3_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_430": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a4_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_433": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_436": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_437": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_488": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, m_t, a1_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a2_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_497": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a3_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_498": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_500": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, a4_t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_501": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_551": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_187": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_248": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_238": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_239": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_509": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_510": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_243": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_513": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm2(x)",
                            "Call"
                        ],
                        [
                            "self.conv_in(x)",
                            "Call"
                        ],
                        [
                            "self.batch_norm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1).unsqueeze(3)",
                            "Call"
                        ],
                        [
                            "x.repeat(1, 1, 1, self.y_scale, 1, self.x_scale)",
                            "Call"
                        ],
                        [
                            "torch.cat([netinput, mels], dim=2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.n_classes).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t], dim=1)",
                            "Call"
                        ],
                        [
                            "rnn1cell(x, h1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "new_x",
                            "Name"
                        ],
                        [
                            "self.pad_tensor(x, padding, side='after')",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "sample.unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(b_size, 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([x, m_t, a1_t], dim=1)",
                            "Call"
                        ],
                        [
                            "self.I(x)",
                            "Call"
                        ],
                        [
                            "x + h1",
                            "BinOp"
                        ],
                        [
                            "x + h2",
                            "BinOp"
                        ],
                        [
                            "torch.cat([x, a3_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "torch.cat([x, a4_t], dim=1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "sample.view(b_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_514": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1).view(b_size, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "wavernn/model_wrnn.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.O1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.O2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "quantisation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.O3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.O4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "quantisation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.I_coarse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.split_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.I_fine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3 * self.split_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_33": {
                "variable": {
                    "value": "self.bias_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.bias_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.bias_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_45": {
                "variable": {
                    "value": "(R_u, R_r, R_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "R_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.R(prev_hidden)",
                            "Call"
                        ],
                        [
                            "self.R(hidden)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_50": {
                "variable": {
                    "value": "(I_coarse_u, I_coarse_r, I_coarse_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coarse_input_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.I_coarse(prev_y)",
                            "Call"
                        ],
                        [
                            "self.I_coarse(prev_outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "fine_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_y, current_coarse]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_56": {
                "variable": {
                    "value": "(I_fine_u, I_fine_r, I_fine_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fine_input_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.I_fine(fine_input)",
                            "Call"
                        ],
                        [
                            "self.I_fine(fine_input)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "I_u",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[I_coarse_u, I_fine_u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "I_r",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[I_coarse_r, I_fine_r]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "I_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[I_coarse_e, I_fine_e]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_65": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_u + I_u + self.bias_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_r + I_r + self.bias_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_67": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r * R_e + I_e + self.bias_e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_71": {
                "variable": {
                    "value": "(hidden_coarse, hidden_fine)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u * prev_hidden + (1.0 - u) * e",
                            "BinOp"
                        ],
                        [
                            "self.init_hidden()",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden_coarse, hidden_fine], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_83": {
                "variable": {
                    "value": "(b_coarse_u, b_fine_u)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.bias_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "(b_coarse_r, b_fine_r)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.bias_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_85": {
                "variable": {
                    "value": "(b_coarse_e, b_fine_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.bias_e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_105": {
                "variable": {
                    "value": "(hidden_coarse, hidden_fine)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "u * prev_hidden + (1.0 - u) * e",
                            "BinOp"
                        ],
                        [
                            "self.init_hidden()",
                            "Call"
                        ],
                        [
                            "torch.cat([hidden_coarse, hidden_fine], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "prev_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out_coarse, out_fine]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_115": {
                "variable": {
                    "value": "(I_coarse_u, I_coarse_r, I_coarse_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "coarse_input_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.I_coarse(prev_y)",
                            "Call"
                        ],
                        [
                            "self.I_coarse(prev_outputs)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_121": {
                "variable": {
                    "value": "(R_coarse_u, R_fine_u, R_coarse_r, R_fine_r, R_coarse_e, R_fine_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "R_hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.R(prev_hidden)",
                            "Call"
                        ],
                        [
                            "self.R(hidden)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_124": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_coarse_u + I_coarse_u + b_coarse_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_coarse_r + I_coarse_r + b_coarse_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_126": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r * R_coarse_e + I_coarse_e + b_coarse_e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_131": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_coarse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.O2(F.relu(self.O1(hidden_coarse)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([0])).cuda()",
                            "Call"
                        ],
                        [
                            "out_coarse.unsqueeze(0).float() / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "self.O2(F.relu(self.O1(hidden_coarse)))",
                            "Call"
                        ],
                        [
                            "distrib.sample()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_132": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(out_coarse, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out_fine, dim=1).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_138": {
                "variable": {
                    "value": "fine_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prev_outputs, coarse_pred.unsqueeze(0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_141": {
                "variable": {
                    "value": "(I_fine_u, I_fine_r, I_fine_e)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fine_input_proj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.I_fine(fine_input)",
                            "Call"
                        ],
                        [
                            "self.I_fine(fine_input)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "self.split_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_144": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_fine_u + I_fine_u + b_fine_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_145": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R_fine_r + I_fine_r + b_fine_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "e",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r * R_fine_e + I_fine_e + b_fine_e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_151": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_fine",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.O4(F.relu(self.O3(hidden_fine)))",
                            "Call"
                        ],
                        [
                            "Variable(torch.LongTensor([0])).cuda()",
                            "Call"
                        ],
                        [
                            "out_fine.unsqueeze(0).float() / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "self.O4(F.relu(self.O3(hidden_fine)))",
                            "Call"
                        ],
                        [
                            "distrib.sample()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_152": {
                "variable": {
                    "value": "distrib",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(out_coarse, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(out_fine, dim=1).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_157": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden_coarse, hidden_fine]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "*size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_74": {
                "input": {
                    "value": "self.O1(hidden_coarse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "input": {
                    "value": "self.O3(hidden_fine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_130": {
                "input": {
                    "value": "self.O1(hidden_coarse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_150": {
                "input": {
                    "value": "self.O3(hidden_fine)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_163": {
                "tensors": {
                    "value": "c_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_164": {
                "tensors": {
                    "value": "f_outputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_164": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "wavernn/train.py": {
        "torch": {
            "is_available_39": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_90": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AudiobookDataset(data_root)",
                            "Call"
                        ],
                        [
                            "AudiobookDataset(data_root)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw_collate",
                            "Name"
                        ],
                        [
                            "raw_collate",
                            "Name"
                        ],
                        [
                            "discrete_collate",
                            "Name"
                        ],
                        [
                            "raw_collate",
                            "Name"
                        ],
                        [
                            "discrete_collate",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "int(hp.num_workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_217": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_222": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "hp.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(hp.adam_beta1, hp.adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "hp.adam_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "hp.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "hp.amsgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AudiobookDataset(data_root)",
                            "Call"
                        ],
                        [
                            "AudiobookDataset(data_root)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "raw_collate",
                            "Name"
                        ],
                        [
                            "raw_collate",
                            "Name"
                        ],
                        [
                            "discrete_collate",
                            "Name"
                        ],
                        [
                            "raw_collate",
                            "Name"
                        ],
                        [
                            "discrete_collate",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "hp.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_276": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_48": {
                "obj": {
                    "value": "{'state_dict': model.state_dict(), 'optimizer': optimizer_state, 'global_step': step, 'global_epoch': epoch, 'global_test_step': global_test_step}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args['--checkpoint']",
                            "Subscript"
                        ],
                        [
                            "join(checkpoint_dir, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "'checkpoints/'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args['--checkpoint']",
                            "Subscript"
                        ],
                        [
                            "join(checkpoint_dir, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "'checkpoints/'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_63": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "args['--checkpoint']",
                            "Subscript"
                        ],
                        [
                            "join(checkpoint_dir, 'checkpoint_step{:09d}.pth'.format(step))",
                            "Call"
                        ],
                        [
                            "'checkpoints/'",
                            "Constant"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "clip_grad_norm__176": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "hp.grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "wavernn/utils.py": {
        "torch": {
            "rand_83": {
                "variable": {
                    "value": "wav",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log1p_50": {
                "input": {
                    "value": "mu * torch.abs(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_50": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "np.sign(x) * (np.exp(np.abs(x) * np.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.sign(x) * (torch.exp(torch.abs(x) * torch.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_78": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "np.sign(x) * (np.exp(np.abs(x) * np.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.sign(x) * (torch.exp(torch.abs(x) * torch.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_78": {
                "input": {
                    "value": "torch.abs(x) * torch.log1p(mu)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_50": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "np.sign(x) * (np.exp(np.abs(x) * np.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.sign(x) * (torch.exp(torch.abs(x) * torch.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_78": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "np.sign(x) * (np.exp(np.abs(x) * np.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ],
                        [
                            "x_mu / mu * 2 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.sign(x) * (torch.exp(torch.abs(x) * torch.log1p(mu)) - 1.0) / mu",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log1p_78": {
                "input": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "quantization_channels - 1",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor([mu])",
                            "Call"
                        ],
                        [
                            "quantization_channels - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor([mu]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([mu])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}