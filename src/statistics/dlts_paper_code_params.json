{
    "TF1 version/cnn_target_space_tf1.py": {
        "tensorflow": {
            "Session_161": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_332": {
                "variable": {
                    "value": "input_realisation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[realisation_batch_size, input_image_side_length, input_image_side_length, input_image_channels]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_realisation_network",
                    "possible_values": []
                }
            },
            "placeholder_333": {
                "variable": {
                    "value": "input_error_calculation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, input_image_side_length, input_image_side_length, input_image_channels]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_error_calculation_network",
                    "possible_values": []
                }
            },
            "placeholder_334": {
                "variable": {
                    "value": "target_labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "data_labels",
                    "possible_values": []
                }
            },
            "placeholder_335": {
                "variable": {
                    "value": "ph_use_identical_patterns_across_ensemble",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_testing",
                    "possible_values": []
                }
            },
            "placeholder_336": {
                "variable": {
                    "value": "keep_prob_ph",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(training_keep_prob)] if training_keep_prob != None else []",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_probs",
                    "possible_values": []
                }
            },
            "placeholder_337": {
                "variable": {
                    "value": "is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "get_collection_373": {
                "variable": {
                    "value": "update_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                }
            },
            "lstsq_164": {
                "variable": {
                    "value": "weight_matrix",
                    "possible_values": []
                },
                "matrix": {
                    "value": "input_matrix",
                    "possible_values": []
                },
                "rhs": {
                    "value": "target_matrix",
                    "possible_values": [
                        [
                            "layer_target_matrices[l]",
                            "Subscript"
                        ]
                    ]
                },
                "l2_regularizer": {
                    "value": "l2_regularizer",
                    "possible_values": []
                }
            },
            "extract_image_patches_169": {
                "variable": {
                    "value": "input_patches",
                    "possible_values": []
                },
                "images": {
                    "value": "input_image",
                    "possible_values": []
                },
                "ksizes": {
                    "value": "[1, kernel_side_length, kernel_side_length, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "flattened_input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_patches",
                    "possible_values": [
                        [
                            "tf.image.extract_image_patches(images=input_image, ksizes=[1, kernel_side_length, kernel_side_length, 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, kernel_side_length * kernel_side_length * num_channels]",
                    "possible_values": []
                }
            },
            "concat_171": {
                "variable": {
                    "value": "flattened_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(flattened_input[:, 0:1]), flattened_input]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Variable_191": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_in, n_out], stddev=initialiser_standard_deviation(n_in, n_out))",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "Variable_195": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1 + num_inputs, num_outputs], stddev=initialiser_standard_deviation(1 + num_inputs, num_outputs))",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_image_side_length, input_image_side_length, input_image_channels]",
                    "possible_values": []
                }
            },
            "reshape_287": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_image_side_length, input_image_side_length, input_image_channels]",
                    "possible_values": []
                }
            },
            "reduce_mean_360": {
                "variable": {
                    "value": "loss_mean",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target_labels[:], logits=y[:, :])",
                    "possible_values": []
                }
            },
            "argmax_361": {
                "variable": {
                    "value": "y_integer",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "ecn_output",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "equal_362": {
                "variable": {
                    "value": "y_matches",
                    "possible_values": []
                },
                "x": {
                    "value": "y_integer",
                    "possible_values": [
                        [
                            "tf.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_labels",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None], name='data_labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_363": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(y_matches, tf.float32)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_367": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.01 if use_adam and use_target_space else 0.001 if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_369": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.01 if use_adam and use_target_space else 0.001 if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "group_376": {
                "variable": {
                    "value": "update",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[update, update_ops]",
                    "possible_values": []
                }
            },
            "disable_v2_behavior_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "lstsq_172": {
                "matrix": {
                    "value": "flattened_input",
                    "possible_values": [
                        [
                            "tf.reshape(input_patches, [-1, kernel_side_length * kernel_side_length * num_channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(flattened_input[:, 0:1]), flattened_input], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "target_matrix",
                    "possible_values": [
                        [
                            "layer_target_matrices[l]",
                            "Subscript"
                        ]
                    ]
                },
                "l2_regularizer": {
                    "value": "l2_regularizer",
                    "possible_values": []
                }
            },
            "name_scope_340": {
                "name": {
                    "value": "realisation_network",
                    "possible_values": []
                }
            },
            "name_scope_350": {
                "name": {
                    "value": "error_network",
                    "possible_values": []
                }
            },
            "name_scope_359": {
                "name": {
                    "value": "loss_function_calculation",
                    "possible_values": []
                }
            },
            "global_variables_initializer_378": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "name_scope_242": {
                "name": {
                    "value": "convert_target_matrices_to_weights",
                    "possible_values": []
                }
            },
            "name_scope_292": {
                "name": {
                    "value": "convolutional_layers",
                    "possible_values": []
                }
            },
            "reshape_312": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value]",
                    "possible_values": []
                }
            },
            "name_scope_313": {
                "name": {
                    "value": "dense_layers",
                    "possible_values": []
                }
            },
            "name_scope_344": {
                "name": {
                    "value": "initialise_targets",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_360": {
                "labels": {
                    "value": "target_labels[:]",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None], name='data_labels')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y[:, :]",
                    "possible_values": [
                        [
                            "ecn_output",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_363": {
                "x": {
                    "value": "y_matches",
                    "possible_values": [
                        [
                            "tf.equal(y_integer, target_labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "ones_like_171": {
                "input": {
                    "value": "flattened_input[:, 0:1]",
                    "possible_values": []
                }
            },
            "Variable_228": {
                "initial_value": {
                    "value": "tf.truncated_normal([realisation_batch_size * num_patches, channels_per_layer[l]], stddev=target_initialiser)",
                    "possible_values": []
                },
                "name": {
                    "value": "'TargetMatrixConvayer' + str(l)",
                    "possible_values": []
                }
            },
            "Variable_233": {
                "initial_value": {
                    "value": "tf.truncated_normal([realisation_batch_size, fully_connected_hidden_nodes_per_layer[l]], stddev=target_initialiser)",
                    "possible_values": []
                },
                "name": {
                    "value": "'TargetMatrixDenseLayer' + str(l + len(conv_kernel_side_length_per_layer))",
                    "possible_values": []
                }
            },
            "name_scope_243": {
                "name": {
                    "value": "convolutional_layers",
                    "possible_values": []
                }
            },
            "reshape_267": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value]",
                    "possible_values": []
                }
            },
            "name_scope_268": {
                "name": {
                    "value": "dense_layers",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "variable": {
                    "value": "W",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_reshaped[1:, :]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[conv_kernel_side_length_per_layer[l], conv_kernel_side_length_per_layer[l], num_channels, channels_per_layer[l]]",
                    "possible_values": []
                }
            },
            "conv2d_299": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "possible_values": [
                        [
                            "tf.reshape(w_reshaped[1:, :], [conv_kernel_side_length_per_layer[l], conv_kernel_side_length_per_layer[l], num_channels, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_reshaped[1:, :], [conv_kernel_side_length_per_layer[l], conv_kernel_side_length_per_layer[l], num_channels, channels_per_layer[l]])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                },
                "name": {
                    "value": "'ConvLayer' + str(l)",
                    "possible_values": []
                }
            },
            "bias_add_300": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "possible_values": [
                        [
                            "w_reshaped[0, :]",
                            "Subscript"
                        ],
                        [
                            "w_reshaped[0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "name_scope_311": {
                "name": {
                    "value": "flatten",
                    "possible_values": []
                }
            },
            "concat_317": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(x[:, 0:1]), x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputToLayer' + str(l)",
                    "possible_values": []
                }
            },
            "matmul_319": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "generate_fully_connected_weights(num_nodes, fully_connected_hidden_nodes_per_layer[l], name='DenseWeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(layer_target_matrices[l + len(conv_kernel_side_length_per_layer)], x, pseudoinverse_regularisation_constant, name='CalculatedWeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "weight_matrices[l + len(conv_kernel_side_length_per_layer)]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'SumsInLayer' + str(l)",
                    "possible_values": []
                }
            },
            "truncated_normal_228": {
                "shape": {
                    "value": "[realisation_batch_size * num_patches, channels_per_layer[l]]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "target_initialiser",
                    "possible_values": [
                        [
                            "args.ti",
                            "Attribute"
                        ]
                    ]
                }
            },
            "truncated_normal_233": {
                "shape": {
                    "value": "[realisation_batch_size, fully_connected_hidden_nodes_per_layer[l]]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "target_initialiser",
                    "possible_values": [
                        [
                            "args.ti",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "W",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_reshaped[1:, :]",
                    "possible_values": []
                },
                "shape": {
                    "value": "[conv_kernel_side_length_per_layer[l], conv_kernel_side_length_per_layer[l], num_channels, channels_per_layer[l]]",
                    "possible_values": []
                }
            },
            "conv2d_252": {
                "variable": {
                    "value": "test_output_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "possible_values": [
                        [
                            "tf.reshape(w_reshaped[1:, :], [conv_kernel_side_length_per_layer[l], conv_kernel_side_length_per_layer[l], num_channels, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(w_reshaped[1:, :], [conv_kernel_side_length_per_layer[l], conv_kernel_side_length_per_layer[l], num_channels, channels_per_layer[l]])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, strides, strides, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                },
                "name": {
                    "value": "'ConvLayer' + str(l)",
                    "possible_values": []
                }
            },
            "bias_add_253": {
                "variable": {
                    "value": "test_output_matrix",
                    "possible_values": []
                },
                "value": {
                    "value": "test_output_matrix",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(test_output_matrix, b[:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, channels_per_layer[l]])",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b[:]",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "variable": {
                    "value": "test_output_matrix",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test_output_matrix",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(test_output_matrix, b[:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, channels_per_layer[l]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, channels_per_layer[l]]",
                    "possible_values": []
                }
            },
            "reshape_257": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensor": {
                    "value": "test_output_matrix",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(test_output_matrix, b[:])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, channels_per_layer[l]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, image_side_length, image_side_length, channels_per_layer[l]]",
                    "possible_values": []
                }
            },
            "name_scope_266": {
                "name": {
                    "value": "flatten",
                    "possible_values": []
                }
            },
            "concat_272": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(x[:, 0:1]), x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputToLayer' + str(l)",
                    "possible_values": []
                }
            },
            "matmul_275": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "generate_fully_connected_weights(num_nodes, fully_connected_hidden_nodes_per_layer[l], name='DenseWeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(layer_target_matrices[l + len(conv_kernel_side_length_per_layer)], x, pseudoinverse_regularisation_constant, name='CalculatedWeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "weight_matrices[l + len(conv_kernel_side_length_per_layer)]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'SumsInLayer' + str(l)",
                    "possible_values": []
                }
            },
            "name_scope_294": {
                "name": {
                    "value": "'layer' + str(l)",
                    "possible_values": []
                }
            },
            "batch_normalization_303": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, name='is_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_306": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                },
                "name": {
                    "value": "'MaxPoolLayer' + str(l)",
                    "possible_values": []
                }
            },
            "dropout_309": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_probs[l]",
                    "possible_values": []
                }
            },
            "name_scope_316": {
                "name": {
                    "value": "'layer' + str(l)",
                    "possible_values": []
                }
            },
            "batch_normalization_324": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, name='is_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_326": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_probs[l + len(conv_kernel_side_length_per_layer)]",
                    "possible_values": []
                }
            },
            "assign_346": {
                "ref": {
                    "value": "layer_target_matrices[i]",
                    "possible_values": []
                },
                "value": {
                    "value": "layer_outputs_realisation_network[i]",
                    "possible_values": []
                }
            },
            "name_scope_245": {
                "name": {
                    "value": "'layer' + str(l)",
                    "possible_values": []
                }
            },
            "max_pool_261": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                },
                "name": {
                    "value": "'MaxPoolLayer' + str(l)",
                    "possible_values": []
                }
            },
            "dropout_264": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_probs[l]",
                    "possible_values": []
                }
            },
            "name_scope_271": {
                "name": {
                    "value": "'layer' + str(l)",
                    "possible_values": []
                }
            },
            "dropout_280": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.reshape(test_output_matrix, [-1, image_side_length, image_side_length, channels_per_layer[l]])",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, input_image_side_length, input_image_side_length, input_image_channels])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME', name='ConvLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(x, b)",
                            "Call"
                        ],
                        [
                            "af(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, x.get_shape()[1].value * x.get_shape()[2].value * x.get_shape()[3].value])",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME', name='MaxPoolLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(x[:, 0:1]), x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, keep_probs[l + len(conv_kernel_side_length_per_layer)])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_probs[l + len(conv_kernel_side_length_per_layer)]",
                    "possible_values": []
                }
            },
            "ones_like_317": {
                "input": {
                    "value": "x[:, 0:1]",
                    "possible_values": []
                }
            },
            "ones_like_272": {
                "input": {
                    "value": "x[:, 0:1]",
                    "possible_values": []
                }
            }
        }
    },
    "TF1 version/rnn_bitsequences_target_space_tf1.py": {
        "tensorflow": {
            "GPUOptions_94": {
                "variable": {
                    "value": "gpu_options",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "Session_95": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "possible_values": []
                }
            },
            "placeholder_266": {
                "variable": {
                    "value": "input_realisation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[seqLength, realisation_batch_size, num_inputs_per_loop]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_realisation_network",
                    "possible_values": []
                }
            },
            "placeholder_267": {
                "variable": {
                    "value": "input_error_calculation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[seqLength, mini_batch_size, num_inputs_per_loop]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_error_calculation_network",
                    "possible_values": []
                }
            },
            "lstsq_99": {
                "variable": {
                    "value": "weight_matrix",
                    "possible_values": []
                },
                "matrix": {
                    "value": "input_matrix",
                    "possible_values": []
                },
                "rhs": {
                    "value": "target_matrix",
                    "possible_values": []
                },
                "l2_regularizer": {
                    "value": "regularization",
                    "possible_values": []
                },
                "fast": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "constant_215": {
                "variable": {
                    "value": "initialHiddenState",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mini_batch_size, numContextNodes]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "datatype_tf",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_221": {
                "variable": {
                    "value": "bias_nodes",
                    "possible_values": []
                },
                "input": {
                    "value": "input_matrix[0, :, 0:1]",
                    "possible_values": []
                }
            },
            "stack_253": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "values": {
                    "value": "network_output_matrices",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "BlockOutputMatrix",
                    "possible_values": []
                }
            },
            "equal_306": {
                "variable": {
                    "value": "y_matches",
                    "possible_values": []
                },
                "x": {
                    "value": "y_integer",
                    "possible_values": [
                        [
                            "tf.argmax(y, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(y > 0.5, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [seqLength - delay_length, None], name='data_labels') if use_cross_entropy else tf.placeholder(tf.float32, [seqLength - delay_length, None, num_outputs], name='data_labels')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "reduce_mean_307": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(y_matches, tf.float32)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_310": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else (0.01 if use_target_space else 0.001) if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_312": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else (0.01 if use_target_space else 0.001) if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "disable_v2_behavior_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "WL",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_bias_inputs, num_nodes], stddev=initialiser_standard_deviation(num_bias_inputs, hids[layer + 1]), dtype=datatype_tf, name='WeightMatrix' + str(layer))",
                    "possible_values": []
                }
            },
            "Variable_167": {
                "variable": {
                    "value": "TL",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(SL.get_shape(), stddev=targets_initialiser, dtype=datatype_tf, name='TargetsMatrix' + str(layer))",
                    "possible_values": []
                }
            },
            "fill_217": {
                "variable": {
                    "value": "initialHiddenCState",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(input_matrix)[1], numContextNodes]",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "concat_226": {
                "variable": {
                    "value": "previous_layer_output",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_matrix[loop, :, :], previous_context_layer]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "placeholder_268": {
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[seqLength - delay_length, None, num_outputs]",
                    "possible_values": []
                },
                "name": {
                    "value": "data_labels",
                    "possible_values": []
                }
            },
            "name_scope_275": {
                "name": {
                    "value": "realisation_network",
                    "possible_values": []
                }
            },
            "name_scope_281": {
                "name": {
                    "value": "error_network",
                    "possible_values": []
                }
            },
            "name_scope_293": {
                "name": {
                    "value": "initialise_targets",
                    "possible_values": []
                }
            },
            "name_scope_296": {
                "name": {
                    "value": "loss_function_calculation",
                    "possible_values": []
                }
            },
            "reduce_mean_298": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.reshape(targets, [-1]), logits=tf.reshape(y, [-1, 2]))",
                    "possible_values": []
                }
            },
            "argmax_299": {
                "variable": {
                    "value": "y_integer",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ],
                        [
                            "tf.stack(network_output_matrices, axis=0, name='BlockOutputMatrix')",
                            "Call"
                        ],
                        [
                            "y[delay_length:, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "subtract_301": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ],
                        [
                            "tf.stack(network_output_matrices, axis=0, name='BlockOutputMatrix')",
                            "Call"
                        ],
                        [
                            "y[delay_length:, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "targets",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [seqLength - delay_length, None], name='data_labels') if use_cross_entropy else tf.placeholder(tf.float32, [seqLength - delay_length, None, num_outputs], name='data_labels')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "square_302": {
                "variable": {
                    "value": "squared_deltas",
                    "possible_values": []
                },
                "x": {
                    "value": "deltas",
                    "possible_values": [
                        [
                            "tf.subtract(y, targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_303": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "squared_deltas",
                    "possible_values": [
                        [
                            "tf.square(deltas)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_304": {
                "variable": {
                    "value": "y_integer",
                    "possible_values": []
                },
                "x": {
                    "value": "y > 0.5",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "global_variables_initializer_314": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_95": {
                "gpu_options": {
                    "value": "gpu_options",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.3)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_185": {
                "variable": {
                    "value": "BL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_inputs_temp[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_186": {
                "variable": {
                    "value": "TL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_target_matrices[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_193": {
                "variable": {
                    "value": "BL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_inputs_temp[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "TL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_target_matrices[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_204": {
                "variable": {
                    "value": "BL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_inputs_temp[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "TL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_target_matrices[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_229": {
                "variable": {
                    "value": "BL",
                    "possible_values": []
                },
                "values": {
                    "value": "[bias_nodes1, previous_layer_output]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputMatrix' + str(layer) + '-' + str(loop)",
                    "possible_values": []
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "SL",
                    "possible_values": []
                },
                "a": {
                    "value": "BL",
                    "possible_values": [
                        [
                            "tf.concat([bias_nodes1, previous_layer_output], axis=1, name='InputMatrix' + str(layer) + '-' + str(loop))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "WL",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([num_bias_inputs, num_nodes], stddev=initialiser_standard_deviation(num_bias_inputs, hids[layer + 1]), dtype=datatype_tf, name='WeightMatrix' + str(layer)))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(TL_concatenated, BL_concatenated, pseudoinverse_regularisation_constant, 'CalculateWeightMatrix' + str(layer))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(TL_concatenated, BL_concatenated, pseudoinverse_regularisation_constant, 'CalculateWeightMatrix' + str(layer))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(TL_concatenated, BL_concatenated, pseudoinverse_regularisation_constant, 'CalculateWeightMatrix' + str(layer))",
                            "Call"
                        ],
                        [
                            "weight_matrices[layer]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'Sums' + str(layer) + '-' + str(loop)",
                    "possible_values": []
                }
            },
            "assign_294": {
                "ref": {
                    "value": "target_matrices[i]",
                    "possible_values": []
                },
                "value": {
                    "value": "realisation_network_layer_sums[i]",
                    "possible_values": []
                }
            },
            "cast_307": {
                "x": {
                    "value": "y_matches",
                    "possible_values": [
                        [
                            "tf.equal(y_integer, targets)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "truncated_normal_152": {
                "shape": {
                    "value": "[num_bias_inputs, num_nodes]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "initialiser_standard_deviation(num_bias_inputs, hids[layer + 1])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "datatype_tf",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "'WeightMatrix' + str(layer)",
                    "possible_values": []
                }
            },
            "truncated_normal_167": {
                "shape": {
                    "value": "SL.get_shape()",
                    "possible_values": []
                },
                "stddev": {
                    "value": "targets_initialiser",
                    "possible_values": [
                        [
                            "args.ti",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "datatype_tf",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "'TargetsMatrix' + str(layer)",
                    "possible_values": []
                }
            },
            "split_237": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "possible_values": []
                },
                "value": {
                    "value": "SL",
                    "possible_values": [
                        [
                            "layer_sums_temp[layer]",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(BL, WL, name='Sums' + str(layer) + '-' + str(loop))",
                            "Call"
                        ],
                        [
                            "given_loop_sums[len(layer_sums) - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "multiply_240": {
                "variable": {
                    "value": "new_h",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tanh(new_c)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sigmoid(o)",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_298": {
                "labels": {
                    "value": "tf.reshape(targets, [-1])",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(y, [-1, 2])",
                    "possible_values": []
                }
            },
            "multiply_239": {
                "x": {
                    "value": "tf.sigmoid(i)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.tanh(j)",
                    "possible_values": []
                }
            },
            "tanh_240": {
                "x": {
                    "value": "new_c",
                    "possible_values": [
                        [
                            "tf.multiply(previous_context_layerC, tf.sigmoid(tf.add(f, forget_bias_tensor))) + tf.multiply(tf.sigmoid(i), tf.tanh(j))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_240": {
                "x": {
                    "value": "o",
                    "possible_values": []
                }
            },
            "reshape_298": {
                "tensor": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ],
                        [
                            "tf.stack(network_output_matrices, axis=0, name='BlockOutputMatrix')",
                            "Call"
                        ],
                        [
                            "y[delay_length:, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "possible_values": []
                }
            },
            "shape_217": {
                "input": {
                    "value": "input_matrix",
                    "possible_values": []
                }
            },
            "sigmoid_239": {
                "x": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(max_its)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_239": {
                "x": {
                    "value": "j",
                    "possible_values": []
                }
            },
            "add_239": {
                "x": {
                    "value": "f",
                    "possible_values": []
                },
                "y": {
                    "value": "forget_bias_tensor",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "TF1 version/rnn_imdb_target_space_tf1.py": {
        "tensorflow": {
            "load_data_57": {
                "variable": {
                    "value": "((X_train, y_train), (X_test, y_test))",
                    "possible_values": []
                },
                "num_words": {
                    "value": "top_words",
                    "possible_values": [
                        [
                            "args.top_words",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequences_59": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(X_train, maxlen=max_review_length)",
                            "Call"
                        ],
                        [
                            "X_train.transpose().reshape([max_review_length, -1])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequences_60": {
                "variable": {
                    "value": "X_test",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_test",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(X_test, maxlen=max_review_length)",
                            "Call"
                        ],
                        [
                            "X_test.transpose().reshape([max_review_length, -1])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "GPUOptions_104": {
                "variable": {
                    "value": "gpu_options",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.3",
                    "possible_values": []
                }
            },
            "Session_105": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "variable": {
                    "value": "ph_input_error_calculation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[seqLength, None]",
                    "possible_values": []
                },
                "name": {
                    "value": "ph_input_error_calculation_network",
                    "possible_values": []
                }
            },
            "placeholder_262": {
                "variable": {
                    "value": "ph_data_labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "data_labels",
                    "possible_values": []
                }
            },
            "Variable_138": {
                "variable": {
                    "value": "embedding_weights_matrix",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([top_words, embedding_vector_length], stddev=0.1, dtype=datatype_tf, name='EmbeddingMatrix')",
                    "possible_values": []
                }
            },
            "fill_195": {
                "variable": {
                    "value": "initialHiddenState",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(input_matrix)[1], numContextNodes]",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "placeholder_255": {
                "variable": {
                    "value": "input_realisation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[realisation_sequence_length, realisation_batch_size, embedding_vector_length]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_realisation_network",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "input_realisation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[realisation_sequence_length, realisation_batch_size]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_realisation_network",
                    "possible_values": []
                }
            },
            "reduce_mean_293": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=tf.reshape(ph_data_labels, [-1]), logits=tf.reshape(y, [-1, 2]))",
                    "possible_values": []
                }
            },
            "argmax_294": {
                "variable": {
                    "value": "y_integer",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ],
                        [
                            "network_output_matrices[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "equal_295": {
                "variable": {
                    "value": "y_matches",
                    "possible_values": []
                },
                "x": {
                    "value": "y_integer",
                    "possible_values": [
                        [
                            "tf.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ph_data_labels",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None], name='data_labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_296": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(y_matches, tf.float32)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_299": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else (0.01 if use_target_space else 0.001) if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_301": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else (0.01 if use_target_space else 0.001) if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "disable_v2_behavior_25": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "lstsq_109": {
                "variable": {
                    "value": "weight_matrix",
                    "possible_values": []
                },
                "matrix": {
                    "value": "input_matrix",
                    "possible_values": []
                },
                "rhs": {
                    "value": "target_matrix",
                    "possible_values": []
                },
                "l2_regularizer": {
                    "value": "regularization",
                    "possible_values": []
                },
                "fast": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "WL",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_bias_inputs, num_nodes], stddev=initialiser_standard_deviation(num_bias_inputs, hids[layer + 1]), dtype=datatype_tf, name='WeightMatrix' + str(layer))",
                    "possible_values": []
                }
            },
            "Variable_148": {
                "variable": {
                    "value": "TL",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(SL.get_shape(), stddev=targets_initialiser, dtype=datatype_tf, name='TargetsMatrix' + str(layer))",
                    "possible_values": []
                }
            },
            "concat_173": {
                "variable": {
                    "value": "BL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_inputs_temp[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_174": {
                "variable": {
                    "value": "TL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_target_matrices[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "BL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_inputs_temp[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "TL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_target_matrices[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "fill_197": {
                "variable": {
                    "value": "initialHiddenCState",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(input_matrix)[1], numContextNodes]",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "concat_219": {
                "variable": {
                    "value": "previous_layer_output",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_input_matrix, previous_context_layer]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "name_scope_269": {
                "name": {
                    "value": "realisation_network",
                    "possible_values": []
                }
            },
            "name_scope_276": {
                "name": {
                    "value": "error_network",
                    "possible_values": []
                }
            },
            "name_scope_289": {
                "name": {
                    "value": "initialise_targets",
                    "possible_values": []
                }
            },
            "name_scope_292": {
                "name": {
                    "value": "loss_function_calculation",
                    "possible_values": []
                }
            },
            "global_variables_initializer_304": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_105": {
                "gpu_options": {
                    "value": "gpu_options",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.3)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "pseudoinverse_calculation",
                    "possible_values": []
                }
            },
            "truncated_normal_138": {
                "shape": {
                    "value": "[top_words, embedding_vector_length]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "datatype_tf",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "EmbeddingMatrix",
                    "possible_values": []
                }
            },
            "concat_165": {
                "variable": {
                    "value": "BL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_inputs_temp[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "TL_concatenated",
                    "possible_values": []
                },
                "values": {
                    "value": "[layer_target_matrices[x] for x in unrolled_layers_corresponding_to_layers_temp[layer]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "gather_213": {
                "variable": {
                    "value": "layer_input_matrix",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_matrix",
                    "possible_values": []
                },
                "indices": {
                    "value": "input_matrix[loop, :]",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ones_like_215": {
                "variable": {
                    "value": "bias_nodes",
                    "possible_values": []
                },
                "input": {
                    "value": "layer_input_matrix[:, 0:1]",
                    "possible_values": []
                }
            },
            "concat_222": {
                "variable": {
                    "value": "BL",
                    "possible_values": []
                },
                "values": {
                    "value": "[bias_nodes1, previous_layer_output]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputMatrix' + str(layer) + '-' + str(loop)",
                    "possible_values": []
                }
            },
            "matmul_224": {
                "variable": {
                    "value": "SL",
                    "possible_values": []
                },
                "a": {
                    "value": "BL",
                    "possible_values": [
                        [
                            "tf.concat([bias_nodes1, previous_layer_output], axis=1, name='InputMatrix' + str(layer) + '-' + str(loop))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "WL",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([num_bias_inputs, num_nodes], stddev=initialiser_standard_deviation(num_bias_inputs, hids[layer + 1]), dtype=datatype_tf, name='WeightMatrix' + str(layer)))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(TL_concatenated, BL_concatenated, pseudoinverse_regularisation_constant, 'CalculateWeightMatrix' + str(layer))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(TL_concatenated, BL_concatenated, pseudoinverse_regularisation_constant, 'CalculateWeightMatrix' + str(layer))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(TL_concatenated, BL_concatenated, pseudoinverse_regularisation_constant, 'CalculateWeightMatrix' + str(layer))",
                            "Call"
                        ],
                        [
                            "weight_matrices[layer]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'Sums' + str(layer) + '-' + str(loop)",
                    "possible_values": []
                }
            },
            "assign_290": {
                "ref": {
                    "value": "target_matrices[i]",
                    "possible_values": []
                },
                "value": {
                    "value": "realisation_network_layer_sums[i]",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_293": {
                "labels": {
                    "value": "tf.reshape(ph_data_labels, [-1])",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(y, [-1, 2])",
                    "possible_values": []
                }
            },
            "cast_296": {
                "x": {
                    "value": "y_matches",
                    "possible_values": [
                        [
                            "tf.equal(y_integer, ph_data_labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "truncated_normal_132": {
                "shape": {
                    "value": "[num_bias_inputs, num_nodes]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "initialiser_standard_deviation(num_bias_inputs, hids[layer + 1])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "datatype_tf",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "'WeightMatrix' + str(layer)",
                    "possible_values": []
                }
            },
            "truncated_normal_148": {
                "shape": {
                    "value": "SL.get_shape()",
                    "possible_values": []
                },
                "stddev": {
                    "value": "targets_initialiser",
                    "possible_values": [
                        [
                            "args.ti",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "datatype_tf",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "'TargetsMatrix' + str(layer)",
                    "possible_values": []
                }
            },
            "split_230": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "possible_values": []
                },
                "value": {
                    "value": "SL",
                    "possible_values": [
                        [
                            "layer_sums_temp[layer]",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(BL, WL, name='Sums' + str(layer) + '-' + str(loop))",
                            "Call"
                        ],
                        [
                            "given_loop_sums[len(layer_sums) - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "multiply_233": {
                "variable": {
                    "value": "new_h",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.tanh(new_c)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.sigmoid(o)",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "tensor": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ],
                        [
                            "network_output_matrices[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 2]",
                    "possible_values": []
                }
            },
            "shape_195": {
                "input": {
                    "value": "input_matrix",
                    "possible_values": []
                }
            },
            "multiply_232": {
                "x": {
                    "value": "tf.sigmoid(i)",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.tanh(j)",
                    "possible_values": []
                }
            },
            "tanh_233": {
                "x": {
                    "value": "new_c",
                    "possible_values": [
                        [
                            "tf.multiply(previous_context_layerC, tf.sigmoid(tf.add(f, forget_bias_tensor))) + tf.multiply(tf.sigmoid(i), tf.tanh(j))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_233": {
                "x": {
                    "value": "o",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "input_matrix",
                    "possible_values": []
                }
            },
            "sigmoid_232": {
                "x": {
                    "value": "i",
                    "possible_values": [
                        [
                            "range(max_its)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_232": {
                "x": {
                    "value": "j",
                    "possible_values": []
                }
            },
            "add_232": {
                "x": {
                    "value": "f",
                    "possible_values": []
                },
                "y": {
                    "value": "forget_bias_tensor",
                    "possible_values": [
                        [
                            "1.0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "TF1 version/twoSpirals_target_space_tf1.py": {
        "tensorflow": {
            "Session_63": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "input_realisation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(train_inputs), hids[0]]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_realisation_network",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "input_error_calculation_network",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, hids[0]]",
                    "possible_values": []
                },
                "name": {
                    "value": "input_error_calculation_network",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "target_labels",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "name": {
                    "value": "data_labels",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "is_train",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "possible_values": []
                }
            },
            "ones_like_111": {
                "variable": {
                    "value": "bias_nodes",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 0:1]",
                    "possible_values": []
                }
            },
            "ones_like_137": {
                "variable": {
                    "value": "bias_nodes",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, 0:1]",
                    "possible_values": []
                }
            },
            "reduce_mean_189": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=target_labels, logits=y)",
                    "possible_values": []
                }
            },
            "argmax_190": {
                "variable": {
                    "value": "y_integer",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "equal_191": {
                "variable": {
                    "value": "y_matches",
                    "possible_values": []
                },
                "x": {
                    "value": "y_integer",
                    "possible_values": [
                        [
                            "tf.argmax(y, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_labels",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None], name='data_labels')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_192": {
                "variable": {
                    "value": "accuracy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(y_matches, tf.float32)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_195": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.01 if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_197": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.01 if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "get_collection_201": {
                "variable": {
                    "value": "update_ops",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "possible_values": []
                }
            },
            "group_203": {
                "variable": {
                    "value": "update",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[update, update_ops]",
                    "possible_values": []
                }
            },
            "disable_v2_behavior_20": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "lstsq_67": {
                "variable": {
                    "value": "weight_matrix",
                    "possible_values": []
                },
                "matrix": {
                    "value": "input_matrix",
                    "possible_values": []
                },
                "rhs": {
                    "value": "target_matrix",
                    "possible_values": []
                },
                "l2_regularizer": {
                    "value": "regularization",
                    "possible_values": []
                },
                "fast": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Variable_92": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([num_inputs, num_outputs], stddev=initialiser_standard_deviation(num_inputs, num_outputs), seed=None)",
                    "possible_values": []
                },
                "name": {
                    "value": "'WeightMatrixLayer' + str(l)",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "TL",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([batch_size, hids[layer + 1]], stddev=target_initialiser, name='TargetsMatrix' + str(layer))",
                    "possible_values": []
                }
            },
            "name_scope_177": {
                "name": {
                    "value": "error_network",
                    "possible_values": []
                }
            },
            "softmax_186": {
                "logits": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "name_scope_188": {
                "name": {
                    "value": "loss_function_calculation",
                    "possible_values": []
                }
            },
            "global_variables_initializer_209": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "name_scope_66": {
                "name": {
                    "value": "pseudoinverse_calculation",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input_matrix",
                            "Name"
                        ],
                        [
                            "tf.concat([previous_input_matrix, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.concat([bias_nodes, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "target_matrices[l]",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "input_matrix",
                            "Name"
                        ],
                        [
                            "tf.concat([previous_input_matrix, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.concat([bias_nodes, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([num_inputs, num_outputs], stddev=initialiser_standard_deviation(num_inputs, num_outputs), seed=None), name='WeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(target_matrices[l], x, pseudoinverse_regularisation_constant, name='CalculatedWeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "weight_matrices[l]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'SumsInLayer' + str(l)",
                    "possible_values": []
                }
            },
            "name_scope_170": {
                "name": {
                    "value": "realisation_network",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_189": {
                "labels": {
                    "value": "target_labels",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int64, [None], name='data_labels')",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "possible_values": [
                        [
                            "error_calculation_network_output",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_192": {
                "x": {
                    "value": "y_matches",
                    "possible_values": [
                        [
                            "tf.equal(y_integer, target_labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "name_scope_212": {
                "name": {
                    "value": "initialise_targets",
                    "possible_values": []
                }
            },
            "truncated_normal_92": {
                "shape": {
                    "value": "[num_inputs, num_outputs]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "initialiser_standard_deviation(num_inputs, num_outputs)",
                    "possible_values": []
                },
                "seed": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "truncated_normal_102": {
                "shape": {
                    "value": "[batch_size, hids[layer + 1]]",
                    "possible_values": []
                },
                "stddev": {
                    "value": "target_initialiser",
                    "possible_values": [
                        [
                            "args.target_initialiser",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "'TargetsMatrix' + str(layer)",
                    "possible_values": []
                }
            },
            "name_scope_115": {
                "name": {
                    "value": "'targetsRealisationLayer' + str(l)",
                    "possible_values": []
                }
            },
            "concat_117": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[previous_input_matrix, x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputToLayer' + str(l)",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[bias_nodes, x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputToLayer' + str(l)",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input_matrix",
                            "Name"
                        ],
                        [
                            "tf.concat([previous_input_matrix, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.concat([bias_nodes, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "target_matrices[l]",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "input_matrix",
                            "Name"
                        ],
                        [
                            "tf.concat([previous_input_matrix, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.concat([bias_nodes, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([num_inputs, num_outputs], stddev=initialiser_standard_deviation(num_inputs, num_outputs), seed=None), name='WeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "computeLayerWeightMatrix(target_matrices[l], x, pseudoinverse_regularisation_constant, name='CalculatedWeightMatrixLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "weight_matrices[l]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'SumsInLayer' + str(l)",
                    "possible_values": []
                }
            },
            "name_scope_140": {
                "name": {
                    "value": "'layer' + str(l)",
                    "possible_values": []
                }
            },
            "concat_142": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[previous_input_matrix, x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputToLayer' + str(l)",
                    "possible_values": []
                }
            },
            "concat_145": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[bias_nodes, x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                },
                "name": {
                    "value": "'InputToLayer' + str(l)",
                    "possible_values": []
                }
            },
            "batch_normalization_147": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "possible_values": [
                        [
                            "input_matrix",
                            "Name"
                        ],
                        [
                            "tf.concat([previous_input_matrix, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.concat([bias_nodes, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "target_matrices[l]",
                            "Subscript"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "input_matrix",
                            "Name"
                        ],
                        [
                            "tf.concat([previous_input_matrix, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.concat([bias_nodes, x], axis=1, name='InputToLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(x, training=is_train)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w, name='SumsInLayer' + str(l))",
                            "Call"
                        ],
                        [
                            "af(x, name='OutputFromLayer' + str(l))",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_train",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, name='is_train')",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_213": {
                "ref": {
                    "value": "target_matrices[i]",
                    "possible_values": []
                },
                "value": {
                    "value": "realisation_network_layer_sums[i]",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_target_space.py": {
        "tensorflow": {
            "LeakyReLU_101": {
                "variable": {
                    "value": "af",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "TSModel_106": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "constant_109": {
                    "variable": {
                        "value": "self.fixed_targets_input_matrix",
                        "possible_values": []
                    },
                    "value": {
                        "value": "train_images[:realisation_batch_size]",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "tf.float32",
                        "possible_values": []
                    }
                }
            },
            "Input_159": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_image_side_length, input_image_side_length, input_image_channels)",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "Model_179": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "keras.Input(shape=(input_image_side_length, input_image_side_length, input_image_channels), name='input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "layers.Dense(num_classification_categories, name='output')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_183": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.1 if args.sgd else 0.001",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_185": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.1 if args.sgd else 0.001",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CustomCallback_190": {
                "base_class_0": {
                    "value": "tensorflow.keras.callbacks.Callback",
                    "possible_values": []
                }
            },
            "Conv2D_161": {
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "Conv2D_162": {
                "filters": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "MaxPool2D_163": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "Conv2D_166": {
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "Conv2D_167": {
                "filters": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "MaxPool2D_168": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "Conv2D_171": {
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "Conv2D_172": {
                "filters": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "possible_values": []
                }
            },
            "MaxPool2D_173": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "Flatten_176": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dense_177": {
                "units": {
                    "value": "128",
                    "possible_values": []
                },
                "activation": {
                    "value": "af",
                    "possible_values": [
                        [
                            "layers.LeakyReLU(alpha=0.2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "dense_1",
                    "possible_values": []
                }
            },
            "Dense_178": {
                "units": {
                    "value": "num_classification_categories",
                    "possible_values": [
                        [
                            "train_labels.max() + 1",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_205": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_165": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Dropout_170": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Dropout_175": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "MaxPool2D_114": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "MaxPool2D_119": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "MaxPool2D_124": {
                "pool_size": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "possible_values": []
                }
            },
            "Flatten_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Dropout_121": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Dropout_126": {
                "rate": {
                    "value": "0.2",
                    "possible_values": []
                }
            }
        }
    },
    "rnn_bit_adder_target_space.py": {
        "tensorflow": {
            "TSModel_80": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "constant_83": {
                    "variable": {
                        "value": "self.fixed_targets_input_matrix",
                        "possible_values": []
                    },
                    "value": {
                        "value": "train_inputs[:realisation_batch_size, :realisation_seq_length, :]",
                        "possible_values": []
                    },
                    "dtype": {
                        "value": "tf.float32",
                        "possible_values": []
                    }
                }
            },
            "Input_114": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "(seq_length, input_vector_length)",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "Model_118": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "keras.Input(shape=(seq_length, input_vector_length), name='input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "layers.Dense(num_output_categories, name='output')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_123": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": []
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "args.lr",
                    "possible_values": []
                }
            },
            "SimpleRNN_115": {
                "units": {
                    "value": "num_hids",
                    "possible_values": [
                        [
                            "delay_length + (5 if adder else 3)",
                            "BinOp"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                }
            },
            "Dense_117": {
                "units": {
                    "value": "num_output_categories",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_128": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Lambda_89": {
                "function": {
                    "value": "lambda x: x[:, -num_sequence_outputs_to_retain:, :]",
                    "possible_values": []
                }
            }
        }
    },
    "rnn_imdb_target_space.py": {
        "tensorflow": {
            "load_data_55": {
                "variable": {
                    "value": "((X_train, y_train), (X_test, y_test))",
                    "possible_values": []
                },
                "num_words": {
                    "value": "top_words",
                    "possible_values": [
                        [
                            "args.top_words",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequences_57": {
                "variable": {
                    "value": "X_train",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_train",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(X_train, maxlen=max_review_length)",
                            "Call"
                        ],
                        [
                            "X_train.reshape([-1, max_review_length])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_sequences_58": {
                "variable": {
                    "value": "X_test",
                    "possible_values": []
                },
                "sequences": {
                    "value": "X_test",
                    "possible_values": [
                        [
                            "tf.keras.preprocessing.sequence.pad_sequences(X_test, maxlen=max_review_length)",
                            "Call"
                        ],
                        [
                            "X_test.reshape([-1, max_review_length])",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "TSModel_92": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "constant_95": {
                    "variable": {
                        "value": "self.fixed_targets_input_matrix",
                        "possible_values": []
                    },
                    "value": {
                        "value": "tf.random.uniform([realisation_batch_size, realisation_seq_length, embedding_vector_length], minval=-1, maxval=1.0, dtype=tf.float32)",
                        "possible_values": []
                    }
                }
            },
            "Input_138": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                },
                "name": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "Model_145": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "keras.Input(shape=max_review_length, name='input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "layers.Dense(num_outputs, name='output')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_149": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.1 if args.sgd else 0.001",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Adam_151": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.1 if args.sgd else 0.001",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CustomCallback_159": {
                "base_class_0": {
                    "value": "tensorflow.keras.callbacks.Callback",
                    "possible_values": []
                }
            },
            "Embedding_139": {
                "input_dim": {
                    "value": "top_words",
                    "possible_values": [
                        [
                            "args.top_words",
                            "Attribute"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_vector_length",
                    "possible_values": [
                        [
                            "args.embedding_length",
                            "Attribute"
                        ]
                    ]
                },
                "input_length": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dense_144": {
                "units": {
                    "value": "num_outputs",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_153": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LSTM_141": {
                "units": {
                    "value": "args.context_nodes",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "False",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                }
            },
            "SimpleRNN_143": {
                "units": {
                    "value": "args.context_nodes",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "False",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                }
            },
            "uniform_95": {
                "shape": {
                    "value": "[realisation_batch_size, realisation_seq_length, embedding_vector_length]",
                    "possible_values": []
                },
                "minval": {
                    "value": "-1",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "Embedding_98": {
                "input_dim": {
                    "value": "top_words",
                    "possible_values": [
                        [
                            "args.top_words",
                            "Attribute"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_vector_length",
                    "possible_values": [
                        [
                            "args.embedding_length",
                            "Attribute"
                        ]
                    ]
                },
                "input_length": {
                    "value": "max_review_length",
                    "possible_values": [
                        [
                            "args.max_review_length",
                            "Attribute"
                        ]
                    ]
                },
                "embeddings_initializer": {
                    "value": "tf.keras.initializers.TruncatedNormal(mean=0.0, stddev=0.1)",
                    "possible_values": []
                }
            },
            "Lambda_107": {
                "function": {
                    "value": "lambda x: x[:, -1, :]",
                    "possible_values": []
                }
            },
            "TruncatedNormal_98": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "possible_values": []
                }
            }
        }
    },
    "ts_layers.py": {
        "tensorflow": {
            "TSLayer_40": {
                "base_class_0": {
                    "value": "tensorflow.keras.layers.Layer",
                    "possible_values": []
                },
                "self.realisation_batch_size": {
                    "value": "realisation_batch_size",
                    "possible_values": []
                },
                "self.pseudoinverse_l2_regularisation": {
                    "value": "pseudoinverse_l2_regularisation",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_104": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": []
                }
            },
            "get_105": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_106": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_115": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_dtype_145": {
                "variable": {
                    "value": "dtype",
                    "possible_values": []
                },
                "type_value": {
                    "value": "self.dtype or K.floatx()",
                    "possible_values": []
                }
            },
            "TensorShape_149": {
                "variable": {
                    "value": "input_shape_main",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape_main",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "dimension_value_153": {
                "variable": {
                    "value": "last_dim",
                    "possible_values": []
                },
                "dimension": {
                    "value": "input_shape_main[-1]",
                    "possible_values": []
                }
            },
            "cast_208": {
                "variable": {
                    "value": "inputs_with_bias",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs_with_bias",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones_like(target_input_matrix[:, 0:1]), target_input_matrix], axis=1)",
                            "Call"
                        ],
                        [
                            "target_input_matrix",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([tf.ones_like(inputs[:, 0:1]), inputs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(inputs[:, :, 0:1]), inputs], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs_with_bias, self._compute_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._compute_dtype",
                    "possible_values": []
                }
            },
            "TensorShape_218": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_323": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_325": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": []
                }
            },
            "get_326": {
                "variable": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_327": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_328": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_329": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_330": {
                "variable": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_336": {
                "variable": {
                    "value": "input_shape_main",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape_main",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "extract_patches_430": {
                "variable": {
                    "value": "input_patches",
                    "possible_values": []
                },
                "images": {
                    "value": "input_image",
                    "possible_values": []
                },
                "sizes": {
                    "value": "[1, self.kernel_size[0], self.kernel_size[1], 1]",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._padding_op",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "variable": {
                    "value": "flattened_input",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_patches",
                    "possible_values": [
                        [
                            "tf.image.extract_patches(images=input_image, sizes=[1, self.kernel_size[0], self.kernel_size[1], 1], strides=[1, 1, 1, 1], rates=[1, 1, 1, 1], padding=self._padding_op)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.kernel_size[0] * self.kernel_size[1] * num_channels]",
                    "possible_values": []
                }
            },
            "lstsq_435": {
                "variable": {
                    "value": "flattened_kernel",
                    "possible_values": []
                },
                "matrix": {
                    "value": "flattened_input",
                    "possible_values": [
                        [
                            "tf.reshape(input_patches, [-1, self.kernel_size[0] * self.kernel_size[1] * num_channels])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(flattened_input[:, 0:1]), flattened_input], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "self.target_matrix",
                    "possible_values": []
                },
                "l2_regularizer": {
                    "value": "self.pseudoinverse_l2_regularisation",
                    "possible_values": []
                }
            },
            "reshape_441": {
                "variable": {
                    "value": "W",
                    "possible_values": []
                },
                "tensor": {
                    "value": "W",
                    "possible_values": [
                        [
                            "tf.reshape(W, [self.kernel_size[0], self.kernel_size[1], num_channels, self.filters])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.kernel_size[0], self.kernel_size[1], num_channels, self.filters]",
                    "possible_values": []
                }
            },
            "TensorShape_446": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_613": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "possible_values": []
                }
            },
            "get_614": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_615": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_624": {
                "variable": {
                    "value": "self.activation",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_637": {
                "variable": {
                    "value": "zeros_input_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "estimated_output_matrix[:, 0:1, :]",
                    "possible_values": []
                }
            },
            "concat_639": {
                "variable": {
                    "value": "estimated_recurrent_input_matrix",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros_input_matrix, estimated_output_matrix[:, :-1, :]]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "concat_640": {
                "variable": {
                    "value": "estimated_full_input_matrix",
                    "possible_values": []
                },
                "values": {
                    "value": "[target_input_matrix, estimated_recurrent_input_matrix]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "reshape_644": {
                "variable": {
                    "value": "A",
                    "possible_values": []
                },
                "tensor": {
                    "value": "estimated_full_input_matrix",
                    "possible_values": [
                        [
                            "tf.concat([target_input_matrix, estimated_recurrent_input_matrix], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(estimated_full_input_matrix[:, :, 0:1]), estimated_full_input_matrix], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, estimated_full_input_matrix.get_shape()[2]]",
                    "possible_values": []
                }
            },
            "reshape_645": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.target_matrix",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.target_matrix.get_shape()[2]]",
                    "possible_values": []
                }
            },
            "lstsq_646": {
                "variable": {
                    "value": "full_kernel",
                    "possible_values": []
                },
                "matrix": {
                    "value": "A",
                    "possible_values": [
                        [
                            "tf.reshape(estimated_full_input_matrix, [-1, estimated_full_input_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.target_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(b, [-1, b.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.target_matrix, [-1, self.target_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "l2_regularizer": {
                    "value": "self.pseudoinverse_l2_regularisation",
                    "possible_values": []
                }
            },
            "fill_652": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "dims": {
                    "value": "[tf.shape(input_matrix)[0], self.units]",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "possible_values": []
                }
            },
            "as_dtype_667": {
                "variable": {
                    "value": "dtype",
                    "possible_values": []
                },
                "type_value": {
                    "value": "self.dtype or K.floatx()",
                    "possible_values": []
                }
            },
            "TensorShape_671": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape_main",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ]
                    ]
                }
            },
            "dimension_value_675": {
                "variable": {
                    "value": "last_dim",
                    "possible_values": []
                },
                "dimension": {
                    "value": "input_shape[-1]",
                    "possible_values": []
                }
            },
            "dimension_value_676": {
                "variable": {
                    "value": "time_seq_length",
                    "possible_values": []
                },
                "dimension": {
                    "value": "input_shape[-2]",
                    "possible_values": []
                }
            },
            "TensorShape_704": {
                "variable": {
                    "value": "input_shape",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape_main)",
                            "Call"
                        ],
                        [
                            "tensor_shape.TensorShape(input_shape)",
                            "Call"
                        ],
                        [
                            "input_shape.with_rank_at_least(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "TruncatedNormal_91": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "target_input_matrix",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_input_matrix",
                    "possible_values": [
                        [
                            "tf.reshape(target_input_matrix, [-1, target_input_matrix.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, target_input_matrix.get_shape()[-1]]",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "b",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.target_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(b, [-1, b.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.target_matrix, [-1, self.target_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, b.get_shape()[-1]]",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "inputs_with_bias",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(target_input_matrix[:, 0:1]), target_input_matrix]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "lstsq_141": {
                "matrix": {
                    "value": "inputs_with_bias",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones_like(target_input_matrix[:, 0:1]), target_input_matrix], axis=1)",
                            "Call"
                        ],
                        [
                            "target_input_matrix",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([tf.ones_like(inputs[:, 0:1]), inputs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(inputs[:, :, 0:1]), inputs], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs_with_bias, self._compute_dtype)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.target_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(b, [-1, b.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.target_matrix, [-1, self.target_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "l2_regularizer": {
                    "value": "self.pseudoinverse_l2_regularisation",
                    "possible_values": []
                }
            },
            "reshape_207": {
                "variable": {
                    "value": "internal_weight_matrix",
                    "possible_values": []
                },
                "tensor": {
                    "value": "internal_weight_matrix",
                    "possible_values": [
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(internal_weight_matrix, [1, internal_weight_matrix.get_shape()[0], internal_weight_matrix.get_shape()[1]])",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, internal_weight_matrix.get_shape()[0], internal_weight_matrix.get_shape()[1]]",
                    "possible_values": []
                }
            },
            "matmul_212": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs_with_bias",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones_like(target_input_matrix[:, 0:1]), target_input_matrix], axis=1)",
                            "Call"
                        ],
                        [
                            "target_input_matrix",
                            "Name"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.concat([tf.ones_like(inputs[:, 0:1]), inputs], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.ones_like(inputs[:, :, 0:1]), inputs], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.cast(inputs_with_bias, self._compute_dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "internal_weight_matrix",
                    "possible_values": [
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "tf.reshape(internal_weight_matrix, [1, internal_weight_matrix.get_shape()[0], internal_weight_matrix.get_shape()[1]])",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ],
                        [
                            "self.calculate_internal_weight_matrix(target_input_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "TruncatedNormal_291": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "pad_383": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "array_ops.pad(inputs, self._compute_causal_padding())",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "self._compute_causal_padding()",
                    "possible_values": []
                }
            },
            "concat_434": {
                "variable": {
                    "value": "flattened_input",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(flattened_input[:, 0:1]), flattened_input]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "TruncatedNormal_598": {
                "mean": {
                    "value": "0.0",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "concat_643": {
                "variable": {
                    "value": "estimated_full_input_matrix",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(estimated_full_input_matrix[:, :, 0:1]), estimated_full_input_matrix]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_651": {
                "variable": {
                    "value": "input_matrix",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(input_matrix[:, :, 0:1]), input_matrix]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "concat_655": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_matrix[:, t, :], x]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_656": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.fill([tf.shape(input_matrix)[0], self.units], 0.0)",
                            "Call"
                        ],
                        [
                            "tf.concat([input_matrix[:, t, :], x], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, full_kernel_matrix)",
                            "Call"
                        ],
                        [
                            "x_act",
                            "Name"
                        ]
                    ]
                },
                "b": {
                    "value": "full_kernel_matrix",
                    "possible_values": []
                }
            },
            "dimension_value_150": {
                "dimension": {
                    "value": "input_shape_main[-1]",
                    "possible_values": []
                }
            },
            "concat_201": {
                "variable": {
                    "value": "inputs_with_bias",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(inputs[:, 0:1]), inputs]",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dimension_value_220": {
                "dimension": {
                    "value": "input_shape[-1]",
                    "possible_values": []
                }
            },
            "serialize_230": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_232": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_233": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_235": {
                "activation": {
                    "value": "self.activity_regularizer",
                    "possible_values": []
                }
            },
            "serialize_236": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "InputSpec_331": {
                "ndim": {
                    "value": "self.rank + 2",
                    "possible_values": []
                }
            },
            "InputSpec_340": {
                "ndim": {
                    "value": "self.rank + 2",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: input_channel}",
                    "possible_values": []
                }
            },
            "InputSpec_341": {
                "ndim": {
                    "value": "self.rank + 2",
                    "possible_values": []
                },
                "axes": {
                    "value": "{channel_axis: input_channel}",
                    "possible_values": []
                }
            },
            "reshape_396": {
                "tensor": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.propagate_layer(target_input_matrix, internal_weight_matrix, apply_activation=False)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(target_input_matrix, internal_weight_matrix, apply_activation=True)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(target_input_matrix, W, b, apply_activation=False)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(target_input_matrix, W, b, apply_activation=True)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(target_input_matrix, internal_weight_matrix, self.realisation_seq_length, return_sequences=True, apply_activation=False)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(target_input_matrix, internal_weight_matrix, self.realisation_seq_length, return_sequences=True, apply_activation=True)",
                            "Call"
                        ],
                        [
                            "output[:, -1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.filters]",
                    "possible_values": []
                }
            },
            "bias_add_415": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "sparse_ops.sparse_tensor_dense_matmul(inputs_with_bias, internal_weight_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_with_bias, internal_weight_matrix)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(inputs, W, b)",
                            "Call"
                        ],
                        [
                            "self._convolution_op(input_image, W)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, b, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + bias",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, b, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.target_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(b, [-1, b.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.target_matrix, [-1, self.target_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NHWC",
                    "possible_values": []
                }
            },
            "TensorShape_458": {
                "dims": {
                    "value": "[input_shape[0]] + new_space + [self.filters]",
                    "possible_values": []
                }
            },
            "TensorShape_471": {
                "dims": {
                    "value": "[input_shape[0], self.filters] + new_space",
                    "possible_values": []
                }
            },
            "serialize_483": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_485": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_486": {
                "activation": {
                    "value": "self.bias_initializer",
                    "possible_values": []
                }
            },
            "serialize_487": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_488": {
                "activation": {
                    "value": "self.bias_regularizer",
                    "possible_values": []
                }
            },
            "serialize_490": {
                "activation": {
                    "value": "self.activity_regularizer",
                    "possible_values": []
                }
            },
            "serialize_491": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "serialize_492": {
                "activation": {
                    "value": "self.bias_constraint",
                    "possible_values": []
                }
            },
            "InputSpec_627": {
                "min_ndim": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "stack_661": {
                "values": {
                    "value": "result_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "dimension_value_672": {
                "dimension": {
                    "value": "input_shape[-1]",
                    "possible_values": []
                }
            },
            "InputSpec_677": {
                "min_ndim": {
                    "value": "3",
                    "possible_values": []
                },
                "axes": {
                    "value": "{1: time_seq_length, -1: last_dim}",
                    "possible_values": []
                }
            },
            "dimension_value_706": {
                "dimension": {
                    "value": "input_shape[-1]",
                    "possible_values": []
                }
            },
            "serialize_716": {
                "activation": {
                    "value": "self.activation",
                    "possible_values": []
                }
            },
            "serialize_718": {
                "activation": {
                    "value": "self.kernel_initializer",
                    "possible_values": []
                }
            },
            "serialize_719": {
                "activation": {
                    "value": "self.kernel_regularizer",
                    "possible_values": []
                }
            },
            "serialize_721": {
                "activation": {
                    "value": "self.activity_regularizer",
                    "possible_values": []
                }
            },
            "serialize_722": {
                "activation": {
                    "value": "self.kernel_constraint",
                    "possible_values": []
                }
            },
            "get_47": {
                "identifier": {
                    "value": "activity_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_102": {
                "identifier": {
                    "value": "activity_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InputSpec_121": {
                "min_ndim": {
                    "value": "1 + len(self.realisation_batch_size)",
                    "possible_values": []
                }
            },
            "InputSpec_123": {
                "min_ndim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "floatx_145": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InputSpec_156": {
                "min_ndim": {
                    "value": "1 + len(self.realisation_batch_size)",
                    "possible_values": []
                },
                "axes": {
                    "value": "{-1: last_dim}",
                    "possible_values": []
                }
            },
            "InputSpec_158": {
                "min_ndim": {
                    "value": "2",
                    "possible_values": []
                },
                "axes": {
                    "value": "{-1: last_dim}",
                    "possible_values": []
                }
            },
            "concat_203": {
                "variable": {
                    "value": "inputs_with_bias",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones_like(inputs[:, :, 0:1]), inputs]",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "get_306": {
                "identifier": {
                    "value": "activity_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_350": {
                "dims": {
                    "value": "kernel_shape",
                    "possible_values": [
                        [
                            "self.kernel_size + (input_channel, self.filters)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_410": {
                "variable": {
                    "value": "bias",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.target_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(b, [-1, b.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.target_matrix, [-1, self.target_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, self.filters, 1)",
                    "possible_values": []
                }
            },
            "bias_add_413": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "sparse_ops.sparse_tensor_dense_matmul(inputs_with_bias, internal_weight_matrix)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs_with_bias, internal_weight_matrix)",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "self.propagate_layer(inputs, W, b)",
                            "Call"
                        ],
                        [
                            "self._convolution_op(input_image, W)",
                            "Call"
                        ],
                        [
                            "nn.bias_add(outputs, b, data_format='NHWC')",
                            "Call"
                        ],
                        [
                            "self.activation(outputs)",
                            "Call"
                        ],
                        [
                            "outputs + bias",
                            "BinOp"
                        ],
                        [
                            "nn.bias_add(outputs, b, data_format='NCHW')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "possible_values": [
                        [
                            "self.target_matrix",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(b, [-1, b.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(self.target_matrix, [-1, self.target_matrix.get_shape()[2]])",
                            "Call"
                        ]
                    ]
                },
                "data_format": {
                    "value": "NCHW",
                    "possible_values": []
                }
            },
            "get_608": {
                "identifier": {
                    "value": "activity_regularizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "floatx_667": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ones_like_138": {
                "input": {
                    "value": "target_input_matrix[:, 0:1]",
                    "possible_values": []
                }
            },
            "ones_like_434": {
                "input": {
                    "value": "flattened_input[:, 0:1]",
                    "possible_values": []
                }
            },
            "ones_like_643": {
                "input": {
                    "value": "estimated_full_input_matrix[:, :, 0:1]",
                    "possible_values": []
                }
            },
            "ones_like_651": {
                "input": {
                    "value": "input_matrix[:, :, 0:1]",
                    "possible_values": []
                }
            },
            "shape_652": {
                "input": {
                    "value": "input_matrix",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones_like(input_matrix[:, :, 0:1]), input_matrix], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_201": {
                "input": {
                    "value": "inputs[:, 0:1]",
                    "possible_values": []
                }
            },
            "ones_like_203": {
                "input": {
                    "value": "inputs[:, :, 0:1]",
                    "possible_values": []
                }
            }
        }
    },
    "twoSpirals_target_space.py": {
        "tensorflow": {
            "CallbackUpdateGraphics_121": {
                "base_class_0": {
                    "value": "tensorflow.keras.callbacks.Callback",
                    "possible_values": []
                }
            },
            "TSModel_58": {
                "base_class_0": {
                    "value": "tensorflow.keras.Model",
                    "possible_values": []
                },
                "constant_61": {
                    "variable": {
                        "value": "self.fixed_targets_input_matrix",
                        "possible_values": []
                    },
                    "value": {
                        "value": "train_inputs",
                        "possible_values": [
                            [
                                "pd.read_csv('datasets/twoSpirals.csv', usecols=[0, 1], skiprows=None, header=None).values.astype(np.float32)",
                                "Call"
                            ]
                        ]
                    },
                    "dtype": {
                        "value": "tf.float32",
                        "possible_values": []
                    }
                }
            },
            "Input_93": {
                "variable": {
                    "value": "inputs",
                    "possible_values": []
                },
                "shape": {
                    "value": "(2,)",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "possible_values": []
                }
            },
            "Model_98": {
                "variable": {
                    "value": "keras_model",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "possible_values": [
                        [
                            "keras.Input(shape=(2,), name='input')",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "layers.Dense(2, name='output')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_138": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.01 if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "SGD_140": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "args.lr if args.lr != None else 0.01 if use_adam else 0.1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Dense_94": {
                "units": {
                    "value": "12",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "possible_values": []
                }
            },
            "Dense_95": {
                "units": {
                    "value": "12",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_2",
                    "possible_values": []
                }
            },
            "Dense_96": {
                "units": {
                    "value": "12",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_3",
                    "possible_values": []
                }
            },
            "Dense_97": {
                "units": {
                    "value": "2",
                    "possible_values": []
                },
                "name": {
                    "value": "output",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_143": {
                "from_logits": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "logits": {
                    "value": "keras_model(image_input_matrix)",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}