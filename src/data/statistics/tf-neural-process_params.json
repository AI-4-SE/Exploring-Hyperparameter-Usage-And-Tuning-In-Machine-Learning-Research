{
    "gp_curves.py": {
        "tensorflow": {
            "square_60": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "diff[:, None, :, :, :] / l1[:, :, None, None, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(diff[:, None, :, :, :] / l1[:, :, None, None, :])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(dist, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_113": {
                "variable": {
                    "value": "cholesky",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(sigma)[:, :, None, None] * tf.exp(-1.0 / 2 * dist)",
                            "BinOp"
                        ],
                        [
                            "kernel + sigma_noise ** 2 * tf.eye(n_context)",
                            "BinOp"
                        ],
                        [
                            "self.gaussian_kernels(x, l1, sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(y, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(self.x_start, self.x_end, interval, dtype=tf.float32)[None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_97": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([self.batch_size, n_total, self.x_dim], self.x_start, self.x_end)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(self.x_start, self.x_end, interval, dtype=tf.float32)[None, :], [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_120": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform([self.batch_size, n_total, self.x_dim], self.x_start, self.x_end)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.range(self.x_start, self.x_end, interval, dtype=tf.float32)[None, :], [self.batch_size, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx[:n_context]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_121": {
                "variable": {
                    "value": "cy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cholesky @ tf.random_normal([self.batch_size, self.y_dim, n_total, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(tf.squeeze(y, 3), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx[:n_context]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_53": {
                "input": {
                    "value": "xdata",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_66": {
                "x": {
                    "value": "-1.0 / 2 * dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_67": {
                "num_rows": {
                    "value": "n_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(xdata)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.random_uniform([], 3, self.max_size, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_116": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cholesky @ tf.random_normal([self.batch_size, self.y_dim, n_total, 1])",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(tf.squeeze(y, 3), [0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_66": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(param_shape[:-1], 0.1, self.sigma_scale)",
                            "Call"
                        ],
                        [
                            "tf.ones(param_shape[:-1]) * self.sigma_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_109": {
                "shape": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.batch_size, self.y_dim, self.x_dim]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_110": {
                "shape": {
                    "value": "param_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "range_94": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_process/anp.py": {
        "tensorflow": {
            "concat_53": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[latent, cross_attended]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_54": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(context, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(query)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_66": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(target)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_72": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfp.distributions.kl_divergence(prior, posterior)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_54": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([latent, cross_attended], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(context, 1), [1, tf.shape(query)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "neural_process/cnp.py": {
        "tensorflow": {
            "tile_27": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(context, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_query, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_27": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(context)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(context, 1), [1, n_query, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "neural_process/module/attention.py": {
        "tensorflow": {
            "reduce_mean_9": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_10": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(value, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.tile(rep, [1, n_target, 1])",
                            "Call"
                        ],
                        [
                            "tf.constant(0.0)",
                            "Call"
                        ],
                        [
                            "rep + param['do'](o)",
                            "BinOp"
                        ],
                        [
                            "self.attention_fn(query, key, value)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, n_target, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_19": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(key, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dk(key)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_20": {
                "variable": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(query, axis=2)",
                            "Call"
                        ],
                        [
                            "self.dq(query)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_24": {
                "variable": {
                    "value": "unnorm_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "unnorm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.abs(key - query)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_sum(unnorm_weights, axis=-1)",
                            "Call"
                        ],
                        [
                            "query @ tf.transpose(key, [0, 2, 1])",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "unnorm_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.abs(key - query)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reduce_sum(unnorm_weights, axis=-1)",
                            "Call"
                        ],
                        [
                            "query @ tf.transpose(key, [0, 2, 1])",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_35": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(d_k, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "unnorm_weights / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_53": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_8": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(query, axis=2)",
                            "Call"
                        ],
                        [
                            "self.dq(query)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_22": {
                "x": {
                    "value": "key - query",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_34": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(key, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dk(key)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_35": {
                "x": {
                    "value": "d_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(key)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "a": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(key, axis=1)",
                            "Call"
                        ],
                        [
                            "self.dk(key)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dense_67": {
                "variable": {
                    "value": "param[dq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_v / self.n_head",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_68": {
                "variable": {
                    "value": "param[dk]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_v / self.n_head",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_69": {
                "variable": {
                    "value": "param[dv]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "head_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_v / self.n_head",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dense_70": {
                "variable": {
                    "value": "param[do]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "units": {
                    "value": "d_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value.shape[-1].value",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "neural_process/module/base.py": {
        "tensorflow": {
            "concat_60": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[context, tx]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dense_74": {
                "variable": {
                    "value": "self.dense_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dense_75": {
                "variable": {
                    "value": "self.dense_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_89": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense_sigma(input_tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_31": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(rep, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_38": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(rep)",
                            "Call"
                        ],
                        [
                            "self.attention(query=query, key=key, value=hidden)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(hidden, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_80": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_process/module/tfutils.py": {
        "tensorflow": {
            "Sequential_13": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_17": {
                "units": {
                    "value": "output_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dense_15": {
                "units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_sizes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "neural_process/np.py": {
        "tensorflow": {
            "concat_41": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[latent, context]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_42": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(context, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, tf.shape(query)[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(target)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tfp.distributions.kl_divergence(prior, posterior)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(kl)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(context)",
                            "Call"
                        ],
                        [
                            "tf.concat([latent, context], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(context, 1), [1, tf.shape(query)[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}