{
    "experiments/MLM/condition_given_name.py": {
        "sklearn": {
            "roc_auc_score_249": {
                "variable": {
                    "value": "_baseline_roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "length_condition_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_labels[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "length_condition_baseline_counts",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_baseline_counts[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_250": {
                "variable": {
                    "value": "_condition_only_roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "length_condition_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_labels[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "length_condition_only_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_only_logits[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_251": {
                "variable": {
                    "value": "_model_roc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "length_condition_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_labels[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "length_condition_subject_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_subject_logits[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_285": {
                "y_true": {
                    "value": "length_condition_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "condition_labels[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "condition_bin_prob_baselines",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros_like(condition_baseline_freq)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/MLM/first_name_given_last_name.py": {
        "sklearn": {
            "roc_auc_score_106": {
                "y_true": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(labels)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score_difference",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(score_difference)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/cosine_similarity/bert_cosine_sim.py": {
        "sklearn": {
            "resample_110": {
                "*arrays_0": {
                    "value": "all_subject_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "replace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "normalize_18": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "mean_condition_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding.mean(0)[None, :] for embedding in condition_embeddings]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "max_condition_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[embedding.max(0).values[None, :] for embedding in condition_embeddings]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_83": {
                "input": {
                    "value": "similarity_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "normalize(embedding) @ normalize(name_embeddings[i]).T",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/generation/name_extraction.py": {
        "sklearn": {
            "roc_auc_score_190": {
                "y_true": {
                    "value": "is_known_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.logical_or(is_known_first_name, is_known_last_name)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "loss_diff",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "losses_under_comparator - losses_under_model",
                            "BinOp"
                        ],
                        [
                            "np.array([loss_diff_set[name] for name in sample_names_set])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "tensor_56": {
                "variable": {
                    "value": "batch_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "batch_mask == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "empty_cache_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_63": {
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/probing/FullBERT_single_condition_probing.py": {
        "sklearn": {
            "train_test_split_115": {
                "variable": {
                    "value": "(train_subject_ids, test_subject_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "subject_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resample_161": {
                "variable": {
                    "value": "positive_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "positive_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "replace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "len(negative_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_168": {
                "variable": {
                    "value": "(training_indices, validation_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "total_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.85",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "roc_auc_score_211": {
                "variable": {
                    "value": "auc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_score": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf.predict(test_dataset)",
                            "Call"
                        ],
                        [
                            "test_predictions.predictions[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_72": {
                "y_true": {
                    "value": "pred.label_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_score": {
                    "value": "pred.predictions[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "item[labels]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "1 if self.labels[idx] else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/probing/LR_single_condition_probing.py": {
        "sklearn": {
            "train_test_split_80": {
                "variable": {
                    "value": "(train_subject_ids, test_subject_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "subject_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resample_128": {
                "variable": {
                    "value": "positive_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "positive_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "replace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "len(negative_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MLPClassifier_139": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(128,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_161": {
                "variable": {
                    "value": "auc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_score": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(test_embeddings)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/probing/all_conditions_probing.py": {
        "sklearn": {
            "train_test_split_63": {
                "variable": {
                    "value": "(train_subject_ids, test_subject_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_subject_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "resample_98": {
                "variable": {
                    "value": "negative_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "negative_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "replace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "len(positive_indices)",
                    "type": "Call",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_114": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "resample_61": {
                "*arrays_0": {
                    "value": "all_subject_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "replace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(len(all_subject_ids), 10000)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MLPClassifier_118": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(128,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_151": {
                "variable": {
                    "value": "model_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(condition_labels)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "classifier.predict_proba(test_cls_embeddings)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/probing/names_probing.py": {
        "sklearn": {
            "train_test_split_29": {
                "variable": {
                    "value": "(train_names, test_names)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "names",
                    "type": "Variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LogisticRegression_36": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2021",
                    "type": "int",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "roc_auc_score_45": {
                "variable": {
                    "value": "auc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[patient_name_to_reidentified[name] for name in test_names]",
                            "ListComp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "test_predictions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "clf.predict_proba(test_embeddings)[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "training_scripts/convert_to_tf.py": {
        "tensorflow": {
            "as_dtype_50": {
                "variable": {
                    "value": "tf_dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "type_value": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_51": {
                "variable": {
                    "value": "tf_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf_dtype",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.dtypes.as_dtype(tensor.dtype)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensor.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.replace(patt, repl)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.trainable_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_52": {
                "var_list": {
                    "value": "[tf_var]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "trainable_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/MLM/common.py": {
        "torch": {
            "empty_cache_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_39": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/generation/generate_text.py": {
        "torch": {
            "is_available_10": {
                "variable": {
                    "value": "cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Categorical_66": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "kth_vals",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Categorical_69": {
                "variable": {
                    "value": "dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out[:, gen_idx]",
                            "Subscript"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_72": {
                "variable": {
                    "value": "idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out[:, gen_idx]",
                            "Subscript"
                        ],
                        [
                            "logits / temperature",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_cache_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[seed_text + [MASK] * max_len + [SEP] for _ in range(batch_size)]",
                            "ListComp"
                        ],
                        [
                            "get_init_text(seed_text, max_len, batch_size)",
                            "Call"
                        ],
                        [
                            "parallel_sequential_generation(seed_text, batch_size=batch_size, max_len=max_len, top_k=top_k, temperature=temperature, burnin=burnin, max_iter=max_iter, cuda=cuda, verbose=False)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/probing/common.py": {
        "torch": {
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}