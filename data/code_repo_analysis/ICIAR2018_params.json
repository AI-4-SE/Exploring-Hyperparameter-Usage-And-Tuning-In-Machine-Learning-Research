{
    "crossvalidate_blending.py": {
        "sklearn": {
            "accuracy_score_187": {
                "variable": {
                    "value": "acc_blend",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LogisticRegression_55": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "accuracy_score_179": {
                "variable": {
                    "value": "model_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.concatenate(y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.concatenate(model_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_178": {
                "variable": {
                    "value": "all_models_folds[m_i, fold]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[fold]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "fold_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "verification[model_name][fold].mean((0, 2)).argmax(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_186": {
                "y_true": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_p",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train_lgbm.py": {
        "sklearn": {
            "accuracy_score_123": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_test[::AUGMENTATIONS_PER_IMAGE]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(mean_scores, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "StratifiedKFold_83": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}