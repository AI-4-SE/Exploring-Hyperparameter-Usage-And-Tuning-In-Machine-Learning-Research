{
    "Google-Landmark-Recognition-2020-3rd-Place-Solution/preprocess.py": {
        "sklearn": {
            "StratifiedKFold_13": {
                "variable": {
                    "value": "skf",
                    "type": "Name",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "233",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Google-Landmark-Recognition-2020-3rd-Place-Solution/train.py": {
        "sklearn": {},
        "torch": {
            "DataLoader_166": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LandmarkDataset(df_valid, 'train', 'val', transform=transforms_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_172": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ModelClass(args.enet_type, out_dim=out_dim)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model, device_ids=[1, 3]).to('cuda:1, 3')",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.init_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingWarmRestarts_203": {
                "variable": {
                    "value": "scheduler_cosine",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.init_lr)",
                            "Call"
                        ]
                    ]
                },
                "T_0": {
                    "value": "args.n_epochs - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_67": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_all_68": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_123": {
                "variable": {
                    "value": "PRODS_M",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "PRODS_M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(PRODS_M).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "PREDS_M",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "PREDS_M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(PREDS_M).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_125": {
                "variable": {
                    "value": "TARGETS",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "TARGETS",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(TARGETS)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_138": {
                "device": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_186": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage.cuda(3)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "LandmarkDataset(df_train, 'train', 'train', transform=transforms_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_237": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.model_dir, f'{args.kernel_type}_fold{args.fold}_final.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_226": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.model_dir, f'{args.kernel_type}_fold{args.fold}.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Google-Landmark-Recognition-2020-3rd-Place-Solution/dataset.py": {
        "torch": {
            "tensor_34": {
                "data": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cv2.imread(row.filepath)[:, :, ::-1]",
                            "Subscript"
                        ],
                        [
                            "res['image'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "image.transpose(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_36": {
                "data": {
                    "value": "row.landmark_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Google-Landmark-Recognition-2020-3rd-Place-Solution/models.py": {
        "torch": {
            "sigmoid_26": {
                "variable": {
                    "value": "sigmoid_i",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "one_hot_42": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.one_hot(target, self.n_dim).float()",
                            "Call"
                        ],
                        [
                            "target + (1 - self.ls_) / self.n_dim",
                            "BinOp"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_46": {
                "variable": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.extract(x)",
                            "Call"
                        ],
                        [
                            "self.extract(x)",
                            "Call"
                        ],
                        [
                            "self.extract(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_56": {
                "variable": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.extract(x)",
                            "Call"
                        ],
                        [
                            "self.extract(x)",
                            "Call"
                        ],
                        [
                            "self.extract(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features * k, in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_76": {
                "variable": {
                    "value": "cosine_all",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(features)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "F.normalize(self.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_78": {
                "variable": {
                    "value": "(cosine, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cosine_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.linear(F.normalize(features), F.normalize(self.weight))",
                            "Call"
                        ],
                        [
                            "cosine_all.view(-1, self.out_features, self.k)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "cos_m",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.cos(ms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "sin_m",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.sin(ms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "th",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.cos(math.pi - ms)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "mm",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.sin(math.pi - ms) * ms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_96": {
                "variable": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.one_hot(labels, out_dim).float()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "out_dim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sqrt_99": {
                "variable": {
                    "value": "sine",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 - torch.pow(cosine, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_101": {
                "variable": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "cosine > th.view(-1, 1)",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cosine * cos_m.view(-1, 1) - sine * sin_m.view(-1, 1)",
                            "BinOp"
                        ],
                        [
                            "torch.where(cosine > th.view(-1, 1), phi, cosine - mm.view(-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cosine - mm.view(-1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enet.classifier.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_116": {
                "variable": {
                    "value": "self.enet.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enet.output[1].in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_140": {
                "variable": {
                    "value": "self.enet.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.enet.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_159": {
                "variable": {
                    "value": "self.enet.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_134": {
                "variable": {
                    "value": "sd",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrain_wts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./weights/rexnetv1_2.0x.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "sigmoid_19": {
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "normalize_76": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_99": {
                "input": {
                    "value": "cosine",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits",
                            "Name"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Google-Landmark-Recognition-2020-3rd-Place-Solution/rexnetv1.py": {
        "torch": {
            "Sigmoid_17": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_40": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, channels // se_ratio, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*out",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(dropout_ratio)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // se_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "channels // se_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "channels // se_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU6_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_138": {
                "output_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_141": {
                "p": {
                    "value": "dropout_ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "pen_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(1280 * width_mult)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU6_28": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}