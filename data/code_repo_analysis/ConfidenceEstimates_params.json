{
    "conf_eval/VOC_metrics.py": {
        "sklearn": {
            "column_or_1d_29": {
                "variable": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y_true)",
                            "Call"
                        ],
                        [
                            "y_true == pos_label",
                            "Compare"
                        ],
                        [
                            "y_true[::-1]",
                            "Subscript"
                        ],
                        [
                            "y_true[desc_score_indices]",
                            "Subscript"
                        ],
                        [
                            "y_trues[:, x]",
                            "Subscript"
                        ],
                        [
                            "y_true[mask]",
                            "Subscript"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "column_or_1d_30": {
                "variable": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y_score)",
                            "Call"
                        ],
                        [
                            "y_score[::-1]",
                            "Subscript"
                        ],
                        [
                            "y_score[desc_score_indices]",
                            "Subscript"
                        ],
                        [
                            "y_scores[:, x]",
                            "Subscript"
                        ],
                        [
                            "y_score[mask]",
                            "Subscript"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_consistent_length_28": {
                "*arrays_0": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "assert_all_finite_31": {
                "X": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y_true)",
                            "Call"
                        ],
                        [
                            "y_true == pos_label",
                            "Compare"
                        ],
                        [
                            "y_true[::-1]",
                            "Subscript"
                        ],
                        [
                            "y_true[desc_score_indices]",
                            "Subscript"
                        ],
                        [
                            "y_trues[:, x]",
                            "Subscript"
                        ],
                        [
                            "y_true[mask]",
                            "Subscript"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_all_finite_32": {
                "X": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y_score)",
                            "Call"
                        ],
                        [
                            "y_score[::-1]",
                            "Subscript"
                        ],
                        [
                            "y_score[desc_score_indices]",
                            "Subscript"
                        ],
                        [
                            "y_scores[:, x]",
                            "Subscript"
                        ],
                        [
                            "y_score[mask]",
                            "Subscript"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "column_or_1d_35": {
                "variable": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(sample_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_130": {
                "variable": {
                    "value": "(precision, recall, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y_true)",
                            "Call"
                        ],
                        [
                            "y_true == pos_label",
                            "Compare"
                        ],
                        [
                            "y_true[::-1]",
                            "Subscript"
                        ],
                        [
                            "y_true[desc_score_indices]",
                            "Subscript"
                        ],
                        [
                            "y_trues[:, x]",
                            "Subscript"
                        ],
                        [
                            "y_true[mask]",
                            "Subscript"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ],
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(y_score)",
                            "Call"
                        ],
                        [
                            "y_score[::-1]",
                            "Subscript"
                        ],
                        [
                            "y_score[desc_score_indices]",
                            "Subscript"
                        ],
                        [
                            "y_scores[:, x]",
                            "Subscript"
                        ],
                        [
                            "y_score[mask]",
                            "Subscript"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ],
                        [
                            "y_score",
                            "Method Argument"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "column_or_1d(sample_weight)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "conf_eval/datasets.py": {
        "torch": {}
    },
    "conf_eval/training.py": {
        "torch": {
            "Module_23": {
                "variable": {
                    "value": "model_wrapped",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_25": {
                "variable": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_55": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target != ignore_index).type_as(input)",
                            "Call"
                        ],
                        [
                            "y != -100",
                            "Compare"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(model, lln).in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_38": {
                "tensors": {
                    "value": "self.errors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "self.errors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "nload",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lookup.release_model_file[dset_name]",
                            "Subscript"
                        ],
                        [
                            "save_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DS(paths=paths, train=False, split='test', fam_mode='familiar' if familiar else 'unfamiliar', transform=tf, target_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_130": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "labels_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "stack_189": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['val_loss_batches'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_189": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_220": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.hparams.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.hparams.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_227": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(self.parameters(), lr=self.hparams.lr, momentum=self.hparams.momentum, weight_decay=self.hparams.wdecay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[self.hparams.max_epochs // 4 * 3]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_num_threads_342": {
                "int": {
                    "value": "hparams.cpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_151": {
                "input": {
                    "value": "y_hat == y_hat",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tensor_159": {
                "variable": {
                    "value": "res[lr_batch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr_now",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_197": {
                "variable": {
                    "value": "res[lr_epoch]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.lr_now",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_263": {
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=True, split=self.hparams.split, fam_mode='familiar', transform=self.transform_train, target_transform=None)",
                            "Call"
                        ],
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=False, split=self.hparams.split, fam_mode='familiar', transform=self.transform_eval, target_transform=None)",
                            "Call"
                        ],
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=False, split=self.hparams.split, fam_mode='familiar', transform=self.transform_eval, target_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=True, split=self.hparams.split, fam_mode='familiar', transform=self.transform_train, target_transform=None)",
                            "Call"
                        ],
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=False, split=self.hparams.split, fam_mode='familiar', transform=self.transform_eval, target_transform=None)",
                            "Call"
                        ],
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=False, split=self.hparams.split, fam_mode='familiar', transform=self.transform_eval, target_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_283": {
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=True, split=self.hparams.split, fam_mode='familiar', transform=self.transform_train, target_transform=None)",
                            "Call"
                        ],
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=False, split=self.hparams.split, fam_mode='familiar', transform=self.transform_eval, target_transform=None)",
                            "Call"
                        ],
                        [
                            "getattr(mydatasets, self.hparams.DS)(paths=None, train=False, split=self.hparams.split, fam_mode='familiar', transform=self.transform_eval, target_transform=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.hparams.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.hparams.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "data": {
                    "value": "self.current_epoch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_193": {
                "data": {
                    "value": "self.current_epoch",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}