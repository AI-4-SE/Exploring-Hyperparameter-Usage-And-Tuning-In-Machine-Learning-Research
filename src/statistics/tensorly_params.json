{
    "tensorly/backend/tensorflow_backend.py": {
        "tensorflow": {
            "Variable_26": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "data",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "solve_122": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "matrix": {
                    "value": "lhs",
                    "possible_values": []
                },
                "rhs": {
                    "value": "rhs",
                    "possible_values": [
                        [
                            "tf.reshape(rhs, (-1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_174": {
                "variable": {
                    "value": "(S, U, V)",
                    "possible_values": []
                },
                "tensor": {
                    "value": "matrix",
                    "possible_values": []
                },
                "full_matrices": {
                    "value": "full_matrices",
                    "possible_values": []
                }
            },
            "range_57": {
                "start": {
                    "value": "start",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "limit": {
                    "value": "stop",
                    "possible_values": [
                        [
                            "start",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "delta": {
                    "value": "step",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clip_by_value_70": {
                "t": {
                    "value": "tensor_",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "a_min",
                    "possible_values": [
                        [
                            "self.tensor(a_min, **self.context(tensor_))",
                            "Call"
                        ],
                        [
                            "self.tensor(-float('inf'))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "a_max",
                    "possible_values": [
                        [
                            "self.tensor(a_max, **self.context(tensor_))",
                            "Call"
                        ],
                        [
                            "self.tensor(float('inf'))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_86": {
                "a": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "axes",
                    "possible_values": [
                        [
                            "list(range(self.ndim(tensor)))",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_92": {
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "order",
                    "possible_values": [
                        [
                            "np.inf",
                            "Attribute"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_106": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "variable": {
                    "value": "rhs",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rhs",
                    "possible_values": [
                        [
                            "tf.reshape(rhs, (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "possible_values": [
                        [
                            "tf.linalg.solve(lhs, rhs)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(res, squeeze)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "squeeze",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "[-1]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "sort_138": {
                "values": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "direction": {
                    "value": "direction",
                    "possible_values": [
                        [
                            "'DESCENDING'",
                            "Constant"
                        ],
                        [
                            "'ASCENDING'",
                            "Constant"
                        ],
                        [
                            "'DESCENDING'",
                            "Constant"
                        ],
                        [
                            "'ASCENDING'",
                            "Constant"
                        ]
                    ]
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "argsort_151": {
                "values": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "direction": {
                    "value": "direction",
                    "possible_values": [
                        [
                            "'DESCENDING'",
                            "Constant"
                        ],
                        [
                            "'ASCENDING'",
                            "Constant"
                        ],
                        [
                            "'DESCENDING'",
                            "Constant"
                        ],
                        [
                            "'ASCENDING'",
                            "Constant"
                        ]
                    ]
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.linalg.lstsq(a, tf.expand_dims(b, -1), fast=False)",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "lstsq_168": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "matrix": {
                    "value": "a",
                    "possible_values": []
                },
                "rhs": {
                    "value": "b",
                    "possible_values": []
                },
                "fast": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Variable_179": {
                "variable": {
                    "value": "tensor",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_185": {
                "variable": {
                    "value": "values",
                    "possible_values": []
                },
                "value": {
                    "value": "np.ones(self.shape(tensor[indices])) * values",
                    "possible_values": []
                }
            },
            "concat_200": {
                "values": {
                    "value": "tensors",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_24": {
                "x": {
                    "value": "data",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "np.float32",
                            "MethodArgument"
                        ],
                        [
                            "np.float32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensordot_96": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "possible_values": []
                },
                "axes": {
                    "value": "([-1], [-2])",
                    "possible_values": []
                }
            },
            "tensordot_103": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "possible_values": []
                },
                "axes": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensordot_105": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "possible_values": []
                },
                "axes": {
                    "value": "([-1], [-2])",
                    "possible_values": []
                }
            },
            "reverse_158": {
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[i for i in range(self.ndim(tensor))]",
                    "possible_values": []
                }
            },
            "reverse_160": {
                "tensor": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rank_165": {
                "input": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "norm_169": {
                "tensor": {
                    "value": "tf.tensordot(a, x, 1) - b",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "a": {
                    "value": "V",
                    "possible_values": []
                }
            },
            "convert_to_tensor_191": {
                "value": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_196": {
                "x": {
                    "value": "2.0",
                    "possible_values": []
                }
            },
            "lstsq_166": {
                "matrix": {
                    "value": "a",
                    "possible_values": []
                },
                "rhs": {
                    "value": "tf.expand_dims(b, -1)",
                    "possible_values": []
                },
                "fast": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "constant_170": {
                "value": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "convert_to_tensor_40": {
                "value": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tensor, [-1])",
                            "Call"
                        ],
                        [
                            "tf.Variable(tensor)",
                            "Call"
                        ],
                        [
                            "tensor[indices].assign(values)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_166": {
                "input": {
                    "value": "b",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "tensordot_169": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tf.squeeze(tf.linalg.lstsq(a, tf.expand_dims(b, -1), fast=False), -1)",
                            "Call"
                        ],
                        [
                            "tf.linalg.lstsq(a, b, fast=False)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matrix_rank_170": {
                "a": {
                    "value": "a",
                    "possible_values": []
                }
            }
        }
    },
    "tensorly/backend/pytorch_backend.py": {
        "torch": {
            "svd_221": {
                "variable": {
                    "value": "(u, s, v)",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "possible_values": []
                },
                "some": {
                    "value": "some",
                    "possible_values": [
                        [
                            "not full_matrices",
                            "UnaryOp"
                        ]
                    ]
                },
                "compute_uv": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "data",
                    "possible_values": [
                        [
                            "data.copy()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_tensor_36": {
                "obj": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_71": {
                "input": {
                    "value": "tensor != 0",
                    "possible_values": []
                }
            },
            "max_92": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(tensor)",
                    "possible_values": []
                }
            },
            "norm_96": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "input": {
                    "value": "a",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "possible_values": []
                }
            },
            "tensordot_108": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "possible_values": []
                },
                "dims": {
                    "value": "axes",
                    "possible_values": [
                        [
                            "axes or list(range(self.ndim(tensor)))[::-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_121": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdims",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "tensors",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmin_146": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argsort_150": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "descending": {
                    "value": "descending",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_154": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_158": {
                "tensors": {
                    "value": "arrays",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "diag_162": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "k",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "solve_196": {
                "variable": {
                    "value": "(solution, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix2.unsqueeze(1)",
                    "possible_values": []
                },
                "A": {
                    "value": "matrix1",
                    "possible_values": []
                }
            },
            "solve_198": {
                "variable": {
                    "value": "(solution, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix2",
                    "possible_values": []
                },
                "A": {
                    "value": "matrix1",
                    "possible_values": []
                }
            },
            "lstsq_204": {
                "variable": {
                    "value": "(x, residuals, _, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "possible_values": []
                },
                "A": {
                    "value": "b",
                    "possible_values": []
                },
                "rcond": {
                    "value": "None",
                    "possible_values": []
                },
                "driver": {
                    "value": "gelsd",
                    "possible_values": []
                }
            },
            "symeig_216": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "arange_58": {
                "start": {
                    "value": "0.0",
                    "possible_values": []
                },
                "end": {
                    "value": "float(start)",
                    "possible_values": []
                },
                "step": {
                    "value": "float(step)",
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "float(start)",
                    "possible_values": []
                },
                "end": {
                    "value": "float(stop)",
                    "possible_values": []
                },
                "step": {
                    "value": "float(step)",
                    "possible_values": []
                },
                "out": {
                    "value": "*args",
                    "possible_values": []
                }
            },
            "clip_65": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "a_min",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "a_max",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_67": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "a_min",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max": {
                    "value": "a_max",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensordot_101": {
                "a": {
                    "value": "a",
                    "possible_values": []
                },
                "b": {
                    "value": "b",
                    "possible_values": []
                },
                "dims": {
                    "value": "([-1], [-2])",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_115": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_126": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_136": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[i for i in range(tensor.ndim)]",
                    "possible_values": []
                }
            },
            "flip_138": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_170": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "descending": {
                    "value": "descending",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_92": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_128": {
                "input": {
                    "value": "tensor",
                    "possible_values": [
                        [
                            "tensor.detach()",
                            "Call"
                        ],
                        [
                            "tensor.cpu()",
                            "Call"
                        ],
                        [
                            "tensor.flatten()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "possible_values": [
                        [
                            "tuple(range(tensor.ndim))",
                            "Call"
                        ],
                        [
                            "[axis]",
                            "List"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "lstsq_208": {
                "input": {
                    "value": "b",
                    "possible_values": []
                },
                "A": {
                    "value": "a",
                    "possible_values": []
                }
            },
            "norm_210": {
                "input": {
                    "value": "sol[n:]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "tensor_211": {
                "data": {
                    "value": "[]",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "matrix_rank_211": {
                "input": {
                    "value": "a",
                    "possible_values": []
                }
            }
        }
    }
}