{
    "loss/losses.py": {
        "tensorflow": {
            "constant_25": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vgg_layers[i][0][0][2][0][0]",
                            "Subscript"
                        ],
                        [
                            "tf.constant(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_27": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.reshape(bias, bias.size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "w0",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "w0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_15": {
                "input_tensor": {
                    "value": "tf.abs(input - output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_31": {
                "x": {
                    "value": "x * 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "maximum_34": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_15": {
                "x": {
                    "value": "input - output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_19": {
                "features": {
                    "value": "tf.nn.conv2d(nin, nwb[0], strides=[1, 1, 1, 1], padding='SAME', name=name) + nwb[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_42": {
                "value": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape, dtype=float)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_54": {
                "name_or_scope": {
                    "value": "vgg19",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_21": {
                "input": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nin",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "input": {
                    "value": "nin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nin",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "nwb[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/network.py": {
        "tensorflow": {
            "he_normal_62": {
                "variable": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_resize_and_concat(x1, x2, output_channel=output_channel, scope=scope + '_up')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope + '_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "scope + '_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + '_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + '_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_58": {
                "variable": {
                    "value": "max_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_83": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_89": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_151": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_152": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_153": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_155": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_156": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_157": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_158": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_159": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_160": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_161": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_162": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_163": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_164": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_167": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_168": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_170": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_171": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_173": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_174": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_176": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_177": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_185": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_186": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_187": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_188": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_189": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_190": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_191": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_192": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_193": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_194": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_195": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_196": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_197": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_198": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_200": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_201": {
                "variable": {
                    "value": "global_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_204": {
                "variable": {
                    "value": "attention_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(global_pooling, channel * 16, activation_fn=tf.nn.relu, scope=ext + 'g_fc2')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(global_pooling, channel * 16, activation_fn=tf.nn.relu, scope=ext + 'g_fc2')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_208": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_209": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_211": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_212": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_214": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_215": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_217": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_218": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_227": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_228": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_229": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_230": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_231": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_232": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_233": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_234": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_235": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_236": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_237": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_238": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_239": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_240": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_242": {
                "variable": {
                    "value": "global_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'gl_conv1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_243": {
                "variable": {
                    "value": "global_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'gl_conv1')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_244": {
                "variable": {
                    "value": "global_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(global_conv1, [2, 2], padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'gl_conv2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_245": {
                "variable": {
                    "value": "global_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(global_pool1, channel * 2, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'gl_conv2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_246": {
                "variable": {
                    "value": "global_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(global_conv2, [2, 2], padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'gl_conv3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_247": {
                "variable": {
                    "value": "global_pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(global_pool2, channel * 4, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'gl_conv3')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_248": {
                "variable": {
                    "value": "global_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(global_conv3, [2, 2], padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'gl_conv4'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_249": {
                "variable": {
                    "value": "global_pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(global_pool3, channel * 8, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'gl_conv4')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_250": {
                "variable": {
                    "value": "global_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(global_conv4, [2, 2], padding='same')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'gl_conv5'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_251": {
                "variable": {
                    "value": "global_pooling",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "global_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(global_pool4, channel * 16, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'gl_conv5')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_254": {
                "variable": {
                    "value": "attention_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "ex",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(global_pooling, channel * 16, activation_fn=tf.nn.relu, scope=ext + 'g_fc2')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(global_pooling, channel * 16, activation_fn=tf.nn.relu, scope=ext + 'g_fc2')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_258": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_259": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_261": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_262": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_264": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_265": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_267": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_268": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_277": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_278": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_279": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_280": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_281": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_282": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_283": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_284": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_285": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_286": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_287": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_288": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_289": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_290": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_291": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_292": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool6",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "channel * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_293": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 32",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_296": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_297": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_299": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_300": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_302": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_303": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_305": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_306": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_314": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_315": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_316": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_317": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_318": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_319": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_320": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_321": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_322": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_323": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_324": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_325": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_326": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_327": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_331": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_332": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_334": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_335": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_337": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_338": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_340": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_341": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_344": {
                "variable": {
                    "value": "convR6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upR6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upR_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_345": {
                "variable": {
                    "value": "convR6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convR6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upR6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convR6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_347": {
                "variable": {
                    "value": "convR7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upR7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convR6, conv3, channel * 4, channel * 8, scope=ext + 'g_upR_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_348": {
                "variable": {
                    "value": "convR7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convR7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upR7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convR7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_350": {
                "variable": {
                    "value": "convR8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upR8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convR7, conv2, channel * 2, channel * 4, scope=ext + 'g_upR_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_351": {
                "variable": {
                    "value": "convR8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convR8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upR8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convR8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_353": {
                "variable": {
                    "value": "convR9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upR9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convR8, conv1, channel, channel * 2, scope=ext + 'g_upR_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convR9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_354": {
                "variable": {
                    "value": "convR9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convR9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upR9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convR9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convR9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convR9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_convR9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_363": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_364": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_365": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_366": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_367": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_368": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_369": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_370": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_371": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_372": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_373": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_374": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_375": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_376": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_380": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_381": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_383": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_384": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_386": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_387": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_389": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_390": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_393": {
                "variable": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upr_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upr_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_394": {
                "variable": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_396": {
                "variable": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr6, conv3, channel * 4, channel * 8, scope=ext + 'g_upr_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr6, conv3, channel * 4, channel * 8, scope=ext + 'g_upr_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_397": {
                "variable": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_399": {
                "variable": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr7, conv2, channel * 2, channel * 4, scope=ext + 'g_upr_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr7, conv2, channel * 2, channel * 4, scope=ext + 'g_upr_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_400": {
                "variable": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_402": {
                "variable": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr8, conv1, channel, channel * 2, scope=ext + 'g_upr_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr8, conv1, channel, channel * 2, scope=ext + 'g_upr_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_403": {
                "variable": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convr9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convr9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_convr9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_410": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_411": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_412": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_413": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_414": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_415": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_416": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_417": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_418": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_419": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_420": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_421": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_422": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_423": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_427": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_428": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_430": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_431": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_433": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_434": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_436": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_437": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_440": {
                "variable": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upr_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upr_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_441": {
                "variable": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_443": {
                "variable": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr6, conv3, channel * 4, channel * 8, scope=ext + 'g_upr_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr6, conv3, channel * 4, channel * 8, scope=ext + 'g_upr_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_444": {
                "variable": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_446": {
                "variable": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr7, conv2, channel * 2, channel * 4, scope=ext + 'g_upr_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr7, conv2, channel * 2, channel * 4, scope=ext + 'g_upr_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_447": {
                "variable": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_449": {
                "variable": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr8, conv1, channel, channel * 2, scope=ext + 'g_upr_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr8, conv1, channel, channel * 2, scope=ext + 'g_upr_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_450": {
                "variable": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convr9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convr9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_convr9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_457": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_458": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_459": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_460": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_461": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_462": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_463": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_464": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_465": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_466": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_467": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_468": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_469": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_470": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_474": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_up_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_475": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(up1, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, output_channel, kernel_size=3, activation_fn=tf.nn.relu, weights_initializer=ini, scope=scope + '_2')",
                            "Call"
                        ],
                        [
                            "conv2upconcat(conv5, conv4, output_channel=channel * 8, scope='g_conv6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool6, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 32, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_477": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv6, conv3, channel * 4, channel * 8, scope=ext + 'g_up_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_478": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv6, conv3, output_channel=channel * 4, scope='g_conv7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_480": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv7, conv2, channel * 2, channel * 4, scope=ext + 'g_up_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_481": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv7, conv2, output_channel=channel * 2, scope='g_conv8')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_483": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv8, conv1, channel, channel * 2, scope=ext + 'g_up_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_484": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_conv9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_487": {
                "variable": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upr_1')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_upr_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_488": {
                "variable": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_490": {
                "variable": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr6, conv3, channel * 4, channel * 8, scope=ext + 'g_upr_2')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr6, conv3, channel * 4, channel * 8, scope=ext + 'g_upr_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_491": {
                "variable": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_493": {
                "variable": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr7, conv2, channel * 2, channel * 4, scope=ext + 'g_upr_3')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr7, conv2, channel * 2, channel * 4, scope=ext + 'g_upr_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_494": {
                "variable": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_496": {
                "variable": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upr9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convr8, conv1, channel, channel * 2, scope=ext + 'g_upr_4')",
                            "Call"
                        ],
                        [
                            "bilinear_up_and_concat(convr8, conv1, channel, channel * 2, scope=ext + 'g_upr_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convr9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_497": {
                "variable": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convr9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(upr9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convr9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upr9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convr9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convr9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convr9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_convr9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_500": {
                "variable": {
                    "value": "convs6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ups6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(conv5, conv4, channel * 8, channel * 16, scope=ext + 'g_ups_1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs6_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_501": {
                "variable": {
                    "value": "convs6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convs6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(ups6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs6_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convs6, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs6_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs6_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_503": {
                "variable": {
                    "value": "convs7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ups7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convs6, conv3, channel * 4, channel * 8, scope=ext + 'g_ups_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs7_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_504": {
                "variable": {
                    "value": "convs7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convs7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(ups7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs7_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convs7, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs7_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs7_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_506": {
                "variable": {
                    "value": "convs8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ups8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convs7, conv2, channel * 2, channel * 4, scope=ext + 'g_ups_3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs8_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_507": {
                "variable": {
                    "value": "convs8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convs8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(ups8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs8_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convs8, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs8_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs8_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_509": {
                "variable": {
                    "value": "convs9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ups9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bilinear_up_and_concat(convs8, conv1, channel, channel * 2, scope=ext + 'g_ups_4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_convs9_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_510": {
                "variable": {
                    "value": "convs9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "convs9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(ups9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_convs9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(convs9, 2, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_convs9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "ext + 'g_convs9_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_524": {
                "variable": {
                    "value": "zero_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(i1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_526": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(q, zero_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "ones_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001 * tf.ones(tf.shape(i1), tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1 - i3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(q, zero_mat), ones_mat, q)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_527": {
                "variable": {
                    "value": "dolp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sqrt(tf.square(q) + tf.square(u))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (i1 + i2 + i3 + i4) + 0.0001",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_537": {
                "input_tensor": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1 - i3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(q, zero_mat), ones_mat, q)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool_541": {
                "variable": {
                    "value": "pool_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 16, 16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16, 16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_542": {
                "variable": {
                    "value": "pool_q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1 - i3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(q, zero_mat), ones_mat, q)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 16, 16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 16, 16, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_545": {
                "variable": {
                    "value": "cov_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(tf.tanh(p - up_p) * tf.tanh(q - up_q))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_553": {
                "x": {
                    "value": "gts[0] + gts[2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_554": {
                "x": {
                    "value": "gts[1] + gts[3]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_555": {
                "variable": {
                    "value": "loss_intra",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "outs[0] + outs[1] + outs[2] + outs[3] - 2 * outs[4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_611": {
                "variable": {
                    "value": "img1_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.square(img1_gradx[:, :, :-1, :]) + tf.square(img1_grady[:, :-1, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_612": {
                "variable": {
                    "value": "img2_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.sqrt(tf.square(img2_gradx[:, :, :-1, :]) + tf.square(img2_grady[:, :-1, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_621": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "img1_grad * img2_grad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_654": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_655": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv1_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_656": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(input, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, kernel_size=3, rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + '_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [1, 1], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(input, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv1, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv1_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_657": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv1, [2, 2], stride=2, padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv1, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_658": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv2_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_659": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool1, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv2, channel * 2, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv2_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_660": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool1, channel * 2, ext=ext + 'g_conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv2, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_661": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv3_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_662": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool2, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv3, channel * 4, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv3_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_663": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool2, channel * 4, ext=ext + 'g_conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv3, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_664": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv4_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_665": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool3, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv4, channel * 8, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv4_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_666": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2pool(pool3, channel * 8, ext=ext + 'g_conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='SAME')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv4, [2, 2])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_1'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_667": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channel * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "lrelu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrelu",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "ext + 'g_conv5_2'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_pool2d_668": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=tf.nn.relu, weights_initializer=ini, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_3')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "conv5 * attention_channel",
                            "BinOp"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(pool4, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv5, channel * 16, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv5_2')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_669": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.max_pool2d(conv5, [2, 2], padding='same')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(conv5, [2, 2])",
                            "Call"
                        ],
                        [
                            "slim.flatten(pool5)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_15": {
                "x": {
                    "value": "x * 0.2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_21": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x1, [tf.shape(x1)[1] * 2, tf.shape(x1)[2] * 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upconv, output_channels, [3, 3], rate=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), scope='up_conv1')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x1, [tf.shape(x1)[1] * 2, tf.shape(x1)[2] * 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upconv, output_channel, [3, 3], rate=1, activation_fn=None, weights_initializer=ini, scope='upconv1')",
                            "Call"
                        ],
                        [
                            "tf.concat([upconv, x2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "scope": {
                    "value": "up_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_22": {
                "variable": {
                    "value": "upconv_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_38": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.image.resize_images(x1, [tf.shape(x1)[1] * 2, tf.shape(x1)[2] * 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upconv, output_channels, [3, 3], rate=1, activation_fn=None, weights_initializer=tf.contrib.layers.xavier_initializer(), scope='up_conv1')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x1, [tf.shape(x1)[1] * 2, tf.shape(x1)[2] * 2])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(upconv, output_channel, [3, 3], rate=1, activation_fn=None, weights_initializer=ini, scope='upconv1')",
                            "Call"
                        ],
                        [
                            "tf.concat([upconv, x2], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "output_channel",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "rate": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_40": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[upconv, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "variable": {
                    "value": "pred_reflect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "BRDF_conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(BRDF_conv8, conv1, output_channel=channel, scope=light_ext + 'g_conv9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "light_ext + 'g_conv9_3'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "pred_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2upconcat(conv8, conv1, output_channel=channel, scope='g_conv9')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, output_channel, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(up9, channel, [3, 3], rate=1, activation_fn=lrelu, scope=ext + 'g_conv9_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(conv9, 5, [3, 3], rate=1, activation_fn=None, scope=ext + 'g_conv9_2')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "ini",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.initializers.he_normal()",
                            "Call"
                        ]
                    ]
                },
                "scope": {
                    "value": "g_conv9_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_356": {
                "values": {
                    "value": "[conv9, convR9]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_405": {
                "values": {
                    "value": "[conv9, convr9]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_452": {
                "values": {
                    "value": "[conv9, convr9]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_514": {
                "input_tensor": {
                    "value": "tf.abs(output - gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_517": {
                "input_tensor": {
                    "value": "tf.square(output - gt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool_576": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(img1, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "0.5 * img1",
                            "BinOp"
                        ],
                        [
                            "0.5 * img1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.avg_pool(img1, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_577": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(img2, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "0.5 * img2",
                            "BinOp"
                        ],
                        [
                            "0.5 * img2",
                            "BinOp"
                        ],
                        [
                            "tf.nn.avg_pool(img2, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_648": {
                "variable": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(img1, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "0.5 * img1",
                            "BinOp"
                        ],
                        [
                            "0.5 * img1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.avg_pool(img1, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ],
                        [
                            "img1",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_649": {
                "variable": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.avg_pool(img2, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "0.5 * img2",
                            "BinOp"
                        ],
                        [
                            "0.5 * img2",
                            "BinOp"
                        ],
                        [
                            "tf.nn.avg_pool(img2, [1, 2, 2, 1], [1, 2, 2, 1], padding='same')",
                            "Call"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ],
                        [
                            "img2",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_678": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_679": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_680": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_681": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_682": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_683": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_684": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_685": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_686": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_687": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_688": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_689": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_691": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_693": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv6')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 4096, scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, 0.5, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2, activation_fn=None, scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_18": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "lights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "normal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_313": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_409": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_514": {
                "x": {
                    "value": "output - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_517": {
                "x": {
                    "value": "output - gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_524": {
                "input": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_525": {
                "shape": {
                    "value": "tf.shape(i1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_526": {
                "x": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1 - i3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(q, zero_mat), ones_mat, q)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(i1), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_527": {
                "x": {
                    "value": "tf.square(q) + tf.square(u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_528": {
                "x": {
                    "value": "u / q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_537": {
                "x": {
                    "value": "tf.tanh(p - tf.reduce_mean(p)) * tf.tanh(q - tf.reduce_mean(q))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_545": {
                "x": {
                    "value": "tf.tanh(p - up_p) * tf.tanh(q - up_q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_611": {
                "x": {
                    "value": "tf.square(img1_gradx[:, :, :-1, :]) + tf.square(img1_grady[:, :-1, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_612": {
                "x": {
                    "value": "tf.square(img2_gradx[:, :, :-1, :]) + tf.square(img2_grady[:, :-1, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_619": {
                "x": {
                    "value": "img1_grady[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_620": {
                "x": {
                    "value": "img2_grady[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_650": {
                "input_tensor": {
                    "value": "grady_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_scope_653": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_525": {
                "input": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_556": {
                "input_tensor": {
                    "value": "loss_intra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(outs[0] + outs[1] + outs[2] + outs[3] - 2 * outs[4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_565": {
                "input_tensor": {
                    "value": "tf.abs(gradx1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_566": {
                "input_tensor": {
                    "value": "tf.abs(grady1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_527": {
                "x": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i2 - i4",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_537": {
                "x": {
                    "value": "q - tf.reduce_mean(q)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_543": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_544": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i1 - i3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(q, zero_mat), ones_mat, q)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_545": {
                "x": {
                    "value": "q - up_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_565": {
                "x": {
                    "value": "gradx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_566": {
                "x": {
                    "value": "grady1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_568": {
                "x": {
                    "value": "gradx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_569": {
                "x": {
                    "value": "grady1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_570": {
                "x": {
                    "value": "gradx2 * alphax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_571": {
                "x": {
                    "value": "grady2 * alphay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_573": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(gradx1_s), tf.square(gradx2_s))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_574": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(grady1_s), tf.square(grady2_s))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_611": {
                "x": {
                    "value": "img1_grady[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_612": {
                "x": {
                    "value": "img2_grady[:, :-1, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_637": {
                "input_tensor": {
                    "value": "tf.square(gradx2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_638": {
                "input_tensor": {
                    "value": "tf.square(grady2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_640": {
                "x": {
                    "value": "gradx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_641": {
                "x": {
                    "value": "grady1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_642": {
                "x": {
                    "value": "gradx2 * alphax",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_643": {
                "x": {
                    "value": "grady2 * alphay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_645": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(gradx1_s), tf.square(gradx2_s))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_646": {
                "input_tensor": {
                    "value": "tf.multiply(tf.square(grady1_s), tf.square(grady2_s))",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_677": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_573": {
                "x": {
                    "value": "tf.square(gradx1_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(gradx2_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_574": {
                "x": {
                    "value": "tf.square(grady1_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grady2_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_637": {
                "x": {
                    "value": "gradx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img2)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img2)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_638": {
                "x": {
                    "value": "grady2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_gradient(img2)",
                            "Call"
                        ],
                        [
                            "compute_gradient(img2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_645": {
                "x": {
                    "value": "tf.square(gradx1_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(gradx2_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_646": {
                "x": {
                    "value": "tf.square(grady1_s)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(grady2_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_19": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_37": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_573": {
                "x": {
                    "value": "gradx2_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(gradx2 * alphax) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(gradx2 * alphax) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_574": {
                "x": {
                    "value": "grady2_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(grady2 * alphay) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(grady2 * alphay) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_645": {
                "x": {
                    "value": "gradx2_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(gradx2 * alphax) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(gradx2 * alphax) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_646": {
                "x": {
                    "value": "grady2_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sigmoid(grady2 * alphay) * 2 - 1",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(grady2 * alphay) * 2 - 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "Saver_67": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_68": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_73": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_74": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "'./ckpt/' + model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_random_seed_18": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2019",
                            "int"
                        ]
                    ]
                }
            },
            "norm_33": {
                "variable": {
                    "value": "intensity_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ambient",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_34": {
                "variable": {
                    "value": "intensity_flashonly",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flashonly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flashonly",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_40": {
                "variable": {
                    "value": "shadow_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(pf_div_by_ambient, 0.8)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "dark_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(intensity_flashonly, 0.3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "variable": {
                    "value": "input_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "input_pureflash",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "input_flash",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_56": {
                "variable": {
                    "value": "mask_shadow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(input_pureflash, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_57": {
                "variable": {
                    "value": "mask_highlight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(input_flash, 0.96)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_35": {
                "input_tensor": {
                    "value": "intensity_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(ambient, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_36": {
                "input_tensor": {
                    "value": "intensity_flashonly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(flashonly, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_40": {
                "x": {
                    "value": "pf_div_by_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flashonly_ratio / (ambient_ratio + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_43": {
                "x": {
                    "value": "intensity_flashonly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(flashonly, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_56": {
                "x": {
                    "value": "input_pureflash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_57": {
                "x": {
                    "value": "input_flash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_61": {
                "values": {
                    "value": "[input_ambient, gray_pureflash, -bad_mask + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_62": {
                "values": {
                    "value": "[input_ambient, reflection_layer, -bad_mask + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "trainable_variables_101": {
                "variable": {
                    "value": "train_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_109": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_120": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_122": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_125": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.trainable_variables()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_126": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "'./result/' + model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_random_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "int"
                        ]
                    ]
                }
            },
            "norm_60": {
                "variable": {
                    "value": "intensity_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ambient",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_61": {
                "variable": {
                    "value": "intensity_flashonly",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flashonly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flashonly",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_67": {
                "variable": {
                    "value": "shadow_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(pf_div_by_ambient, 0.8)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_70": {
                "variable": {
                    "value": "dark_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(intensity_flashonly, 0.3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "input_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "input_pureflash",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "input_flash",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "reflection",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_86": {
                "variable": {
                    "value": "mask_shadow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(input_pureflash, 0.02)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_87": {
                "variable": {
                    "value": "mask_highlight",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(input_flash, 0.96)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_132": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[var for var in tf.trainable_variables()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "intensity_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(ambient, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_63": {
                "input_tensor": {
                    "value": "intensity_flashonly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(flashonly, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_67": {
                "x": {
                    "value": "pf_div_by_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flashonly_ratio / (ambient_ratio + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_70": {
                "x": {
                    "value": "intensity_flashonly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(flashonly, axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_scope_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "greater_86": {
                "x": {
                    "value": "input_pureflash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_87": {
                "x": {
                    "value": "input_flash",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, None, None, 3])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.96",
                    "type": "float",
                    "possible_values": []
                }
            },
            "concat_93": {
                "values": {
                    "value": "[input_ambient, gray_pureflash, -bad_mask + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_94": {
                "values": {
                    "value": "[input_ambient, reflection_layer, -bad_mask + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "tensorflow": {
            "zeros_530": {
                "variable": {
                    "value": "zero_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(I1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_532": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(Q, zero_mat)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "ones_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001 * tf.ones(tf.shape(I1), tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I1 - I3",
                            "BinOp"
                        ],
                        [
                            "I1 - I3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(Q, zero_mat), ones_mat, Q)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_533": {
                "variable": {
                    "value": "DoLP",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sqrt(tf.square(Q) + tf.square(U))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (I1 + I3 + I2 + I4)",
                            "BinOp"
                        ],
                        [
                            "raw2imgs(raw_img)",
                            "Call"
                        ],
                        [
                            "(I1 + I2 + I3 + I4) * 0.5",
                            "BinOp"
                        ],
                        [
                            "raw[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "(I1 + I2 + I3 + I4) * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5 * (I1 + I2 + I3 + I4) + 0.0001",
                            "BinOp"
                        ],
                        [
                            "I",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_541": {
                "variable": {
                    "value": "AoLP_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(AoLP1 - AoLP2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_542": {
                "variable": {
                    "value": "DoLP_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(DoLP1 - DoLP2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_530": {
                "input": {
                    "value": "I1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_img[1::2, 1::2]",
                            "Subscript"
                        ],
                        [
                            "raw2imgs(raw_img)",
                            "Call"
                        ],
                        [
                            "I_all[:, :, :, :1]",
                            "Subscript"
                        ],
                        [
                            "I1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_531": {
                "shape": {
                    "value": "tf.shape(I1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_532": {
                "x": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I1 - I3",
                            "BinOp"
                        ],
                        [
                            "I1 - I3",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.equal(Q, zero_mat), ones_mat, Q)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(tf.shape(I1), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_533": {
                "x": {
                    "value": "tf.square(Q) + tf.square(U)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_534": {
                "x": {
                    "value": "U / Q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_541": {
                "x": {
                    "value": "AoLP1 - AoLP2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_542": {
                "x": {
                    "value": "DoLP1 - DoLP2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_531": {
                "input": {
                    "value": "I1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_img[1::2, 1::2]",
                            "Subscript"
                        ],
                        [
                            "raw2imgs(raw_img)",
                            "Call"
                        ],
                        [
                            "I_all[:, :, :, :1]",
                            "Subscript"
                        ],
                        [
                            "I1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_533": {
                "x": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "I2 - I4",
                            "BinOp"
                        ],
                        [
                            "I2 - I4",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "torchfrr/datasets/__init__.py": {
        "torch": {
            "ConcatDataset_26": {
                "datasets": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/datasets/base.py": {
        "torch": {}
    },
    "torchfrr/models/__init__.py": {
        "torch": {
            "Sequential_19": {
                "*args": {
                    "value": "*[get_model(*m) for m in mls]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/models/unet.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16 * hidden_channels, 16 * hidden_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * hidden_channels, hidden_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * hidden_channels, hidden_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_27": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_28": {
                "start_dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "2 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "2 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/nn/conv.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.MaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "pad_50": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, [dw // 2, dw - dw // 2, dh // 2, dh - dh // 2])",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[dw // 2, dw - dw // 2, dh // 2, dh - dh // 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_28": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_39": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/nn/loss.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[vgg.features[:4].eval(), vgg.features[4:9].eval(), vgg.features[9:14].eval(), vgg.features[14:23].eval(), vgg.features[23:32].eval()][:num_layers]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "l1_loss_41": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_21": {
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "l1_loss_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/test.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(cfg, ['test'])['test']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.TEST.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/train.py": {
        "torch": {
            "DataLoader_43": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds['train']",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "cfg.TRAIN.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.TRAIN.NUM_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "persistent_workers": {
                    "value": "cfg.TRAIN.NUM_WORKERS > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "val_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds['val']",
                            "Subscript"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "cfg.VAL.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_59": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.TRAIN.LR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "cfg.TRAIN.BETAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'epoch': epoch, 'global_step': global_step, 'opt': opt.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(cfg.LOGDIR, 'ckpts', f'{cfg.NAME}_{epoch:04d}_temp.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_116": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'epoch': epoch, 'global_step': global_step, 'opt': opt.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(cfg.LOGDIR, 'ckpts', f'{cfg.NAME}_{epoch:04d}.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/transforms/functional.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "coefficient",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.2989, 0.587, 0.114]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "img.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "uxy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im1 * im2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((1, 1, win_size, win_size), dtype=im1.dtype, device=im1.device) / numel",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_24": {
                "*size": {
                    "value": "(1, 1, win_size, win_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "im1.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "im1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((1, 1, win_size, win_size), dtype=im1.dtype, device=im1.device) / numel",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_29": {
                "input": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones((1, 1, win_size, win_size), dtype=im1.dtype, device=im1.device) / numel",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log10_65": {
                "input": {
                    "value": "data_range ** 2 / err.mean()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/transforms/iotransforms.py": {
        "torch": {}
    },
    "torchfrr/transforms/nntransforms.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[UNet(in_ls, out_ls, *args, **kwargs) for (in_ls, out_ls) in io_ls]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(sum((x[1] for x in in_ls)), hidden_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * hidden_channels, hidden_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[data['imgs'][name] for name in self.in_names]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16 * hidden_channels, 16 * hidden_channels, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.se",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "sum((x[1] for x in in_ls))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "2 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "sum((x[1] for x in out_ls))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_55": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_56": {
                "start_dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * hidden_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/transforms/pttransforms.py": {
        "torch": {
            "from_numpy_66": {
                "variable": {
                    "value": "data[imgs][k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "data[imgs][img_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "data['imgs'][img_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/transforms/transforms.py": {
        "torch": {}
    },
    "torchfrr/utils/config.py": {
        "torch": {
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/utils/io.py": {
        "torch": {
            "load_45": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(ckpt_dir, ckpt)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ],
                        [
                            "ds",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda x: x",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/utils/lr_schedule.py": {
        "torch": {
            "CosineAnnealingLR_7": {
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt",
                            "Method Argument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "cfg.TRAIN.MAX_EPOCH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torchfrr/utils/misc.py": {
        "torch": {
            "manual_seed_53": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "use_deterministic_algorithms_60": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}