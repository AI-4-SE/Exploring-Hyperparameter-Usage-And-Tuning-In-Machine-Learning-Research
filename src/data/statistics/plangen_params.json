{
    "content_planner/contentplanner.py": {
        "torch": {
            "CrossEntropyLoss_6": {
                "variable": {
                    "value": "train_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_18": {
                "variable": {
                    "value": "self.one_more_layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.tgt_word_prj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_44": {
                "variable": {
                    "value": "tgt_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_146": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_180": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "res_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_219": {
                "variable": {
                    "value": "src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src_input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_118": {
                "obj": {
                    "value": "{'model': self.state_dict(), 'target_tokenizer': self.targettokenizer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "parameter_path + 'model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_128": {
                "variable": {
                    "value": "model_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "parameter_path",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ckpt_save_path + '/parameters/'",
                            "BinOp"
                        ],
                        [
                            "ckpt_save_path + '/parameters/model.bin'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_131": {
                "variable": {
                    "value": "model_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "parameter_path",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ckpt_save_path + '/parameters/'",
                            "BinOp"
                        ],
                        [
                            "ckpt_save_path + '/parameters/model.bin'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_200": {
                "variable": {
                    "value": "one_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "one_res",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.parse_one_output(item)",
                            "Call"
                        ],
                        [
                            "[one_tensor for _ in range(seqlen)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(one_res, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "tgt_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones_like(tgt_input)",
                            "Call"
                        ],
                        [
                            "tgt_mask.masked_fill(tgt_input.eq(self.padding_idx), 0.0).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "tgt_mask.cuda(tgt_input.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_196": {
                "*size": {
                    "value": "vocab_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "content_planner/dataclass.py": {
        "torch": {
            "pad_sequence_73": {
                "variable": {
                    "value": "batch_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "batch_id_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.LongTensor(item) for item in batch_id_list]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.src_pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "content_planner/dynamic_crf_layer.py": {
        "torch": {
            "logsumexp_5": {
                "input": {
                    "value": "x.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_11": {
                "variable": {
                    "value": "self.E1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "low_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_12": {
                "variable": {
                    "value": "self.E2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "low_rank",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bmm_53": {
                "variable": {
                    "value": "beam_transition_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_transition_score1.view(-1, beam, self.rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "beam_transition_score2.view(-1, beam, self.rank).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_78": {
                "variable": {
                    "value": "beam_transition_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beam_transition_score1.view(-1, beam, self.rank)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "beam_transition_score2.view(-1, beam, self.rank).transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_88": {
                "variable": {
                    "value": "dummy",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "beam",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "beam if beam is not None else self.beam",
                            "IfExp"
                        ],
                        [
                            "beam if beam is not None else self.beam",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "score.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "finalized_tokens",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finalized_tokens",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(finalized_tokens, 1)",
                            "Call"
                        ],
                        [
                            "beam_targets.gather(2, finalized_tokens[:, :, None])[:, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "finalized_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "finalized_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(finalized_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_65": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "next_score",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "score[:, :, None] + beam_transition_matrix[:, i - 1]",
                            "BinOp"
                        ],
                        [
                            "logsumexp(next_score, dim=1) + beam_emission_scores[:, i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], next_score, score)",
                            "Call"
                        ],
                        [
                            "next_score",
                            "Name"
                        ],
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], _score, score)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_97": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "_score",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "score[:, :, None] + beam_transition_matrix[:, i - 1]",
                            "BinOp"
                        ],
                        [
                            "_score + beam_emission_scores[:, i]",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], next_score, score)",
                            "Call"
                        ],
                        [
                            "next_score",
                            "Name"
                        ],
                        [
                            "beam_emission_scores[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.where(masks[:, i:i + 1], _score, score)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_98": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "masks[:, i:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "dummy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(beam, device=score.device).expand(*score.size()).contiguous()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "content_planner/train.py": {
        "torch": {
            "is_available_56": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_89": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ContentPlanner(model_name, args.crf_low_rank, args.crf_beam_size, special_token_list=special_token_list)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_training(args, data, model, total_steps, print_every, save_every, ckpt_save_path, cuda_available, device)",
                            "Call"
                        ],
                        [
                            "model.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "content_planner/trainer.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__96": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "content_planner/utlis.py": {
        "torch": {}
    },
    "generator/dataclass.py": {
        "torch": {
            "pad_sequence_146": {
                "variable": {
                    "value": "batch_src_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "batch_src_tensor_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.LongTensor(item) for item in batch_src_id_list]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_148": {
                "variable": {
                    "value": "batch_src_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_src_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rnn.pad_sequence(batch_src_tensor_list, batch_first=True, padding_value=self.tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_154": {
                "variable": {
                    "value": "batch_tgt_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "batch_tgt_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[torch.LongTensor(item) for item in batch_tgt_id_list]",
                            "ListComp"
                        ],
                        [
                            "rnn.pad_sequence(batch_tgt_tensor, batch_first=True, padding_value=self.tokenizer.pad_token_id)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "generator/finetune.py": {
        "torch": {
            "is_available_85": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_109": {
                "variable": {
                    "value": "model_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_111": {
                "variable": {
                    "value": "model_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_170": {
                "variable": {
                    "value": "train_sentence_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_172": {
                "variable": {
                    "value": "train_content_plan_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__182": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_176": {
                "input": {
                    "value": "train_RL_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "train_reward * train_sample_logprobs",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_227": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_243": {
                "variable": {
                    "value": "dev_sentence_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "dev_content_plan_reward",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_296": {
                "obj": {
                    "value": "{'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "test_output_dir + save_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_249": {
                "input": {
                    "value": "dev_RL_term",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dev_reward * dev_sample_logprobs",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "generator/generator.py": {
        "torch": {
            "LogSoftmax_21": {
                "variable": {
                    "value": "self.logsftmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_57": {
                "variable": {
                    "value": "gathered_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.logsftmax(logits)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "unsequeeze_sample_labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sample_labels.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_57": {
                "variable": {
                    "value": "gathered_logprobs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_61": {
                "variable": {
                    "value": "indicator_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered_logprobs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.gather(logprobs, dim=-1, index=unsequeeze_sample_labels).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "gathered_logprobs.masked_fill(sample_labels.eq(self.padding_idx), float(0.0))",
                            "Call"
                        ],
                        [
                            "gathered_logprobs * indicator_matrix",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "generator/perform_inference.py": {
        "torch": {
            "is_available_64": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "model_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "model_ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "generator/pretrain.py": {
        "torch": {
            "is_available_66": {
                "variable": {
                    "value": "cuda_available",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__134": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_186": {
                "obj": {
                    "value": "{'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "test_output_dir + save_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}