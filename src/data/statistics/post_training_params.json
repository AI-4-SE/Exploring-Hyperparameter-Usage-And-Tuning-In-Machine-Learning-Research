{
    "medium_conv_xps/faces.py": {
        "sklearn": {
            "fetch_olivetti_faces_141": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "truncated_normal_38": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['images']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['images']",
                            "Subscript"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if not train or last_kernel else model.config.keep_prob",
                            "IfExp"
                        ]
                    ]
                }
            },
            "max_pool_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['images']",
                            "Subscript"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 32, 32])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32, 32, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_161": {
                "variable": {
                    "value": "y_image",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size_last_layer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_199": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_image, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_202": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_image, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_203": {
                "variable": {
                    "value": "self._accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_205": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_206": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_212": {
                "variable": {
                    "value": "regularization_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(v) for v in tvars_kl]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_215": {
                "variable": {
                    "value": "optimizer_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_221": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_223": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_170": {
                "variable": {
                    "value": "hc",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(p_input, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_184": {
                "variable": {
                    "value": "hc",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(p_input, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_416": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_417": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_418": {
                "variable": {
                    "value": "k_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_197": {
                "a": {
                    "value": "p_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([size_last_layer, 40])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_199": {
                "labels": {
                    "value": "y_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(y_, depth=40, on_value=1, off_value=0)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p_input, softmax_w) + softmax_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_202": {
                "input": {
                    "value": "y_image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(y_, depth=40, on_value=1, off_value=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_203": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_image, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_212": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_422": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_426": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_184": {
                "a": {
                    "value": "p_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([5, 5, p_size, s])",
                            "Call"
                        ],
                        [
                            "weight_variable([size_last_layer, s])",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_430": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_495": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_447": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_464": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_477": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets_handler/cifar10_inputs.py": {
        "tensorflow": {
            "FixedLengthRecordReader_77": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "record_bytes": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_81": {
                "variable": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_85": {
                "variable": {
                    "value": "result.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.slice(record_bytes, [0], [label_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.slice(record_bytes, [label_bytes], [image_bytes])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[result.depth, result.height, result.width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_94": {
                "variable": {
                    "value": "result.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "depth_major",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.slice(record_bytes, [label_bytes], [image_bytes]), [result.depth, result.height, result.width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_159": {
                "variable": {
                    "value": "filename_queue",
                    "type": "variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.path.join(CIFAR_DIR, 'data_batch_%d.bin' % i) for i in range(1, 6)]",
                            "ListComp"
                        ],
                        [
                            "[os.path.join(CIFAR_DIR, 'test_batch.bin')]",
                            "List"
                        ]
                    ]
                }
            },
            "cast_163": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "read_input.uint8image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "per_image_standardization_181": {
                "variable": {
                    "value": "float_image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [IM_SIZE, IM_SIZE, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, IM_SIZE, IM_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "shuffle_batch_115": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "NUM_PREPROCESS_THREADS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "min_queue_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(num_examples_per_epoch * min_fraction_of_examples_in_queue)",
                            "Call"
                        ]
                    ]
                },
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_122": {
                "variable": {
                    "value": "(images, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "NUM_PREPROCESS_THREADS",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "capacity": {
                    "value": "min_queue_examples + 3 * self.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_crop_169": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [IM_SIZE, IM_SIZE, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, IM_SIZE, IM_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[IM_SIZE, IM_SIZE, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_172": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [IM_SIZE, IM_SIZE, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, IM_SIZE, IM_SIZE)",
                            "Call"
                        ]
                    ]
                }
            },
            "random_brightness_173": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [IM_SIZE, IM_SIZE, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, IM_SIZE, IM_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "63",
                    "type": "int",
                    "possible_values": []
                }
            },
            "random_contrast_174": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(read_input.uint8image, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [IM_SIZE, IM_SIZE, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.image.random_brightness(image, max_delta=63)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(image, lower=0.2, upper=1.8)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_image_with_crop_or_pad(image, IM_SIZE, IM_SIZE)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "upper": {
                    "value": "1.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "slice_86": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_91": {
                "input_": {
                    "value": "record_bytes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_bytes + image_bytes",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(value, tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[label_bytes]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Exists_155": {
                "filename": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filenames",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "last_kernel/conv_network.py": {
        "tensorflow": {
            "truncated_normal_5": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_12": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_7": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, mean=0.0, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections + [tf.GraphKeys.VARIABLES, tf.GraphKeys.TRAINABLE_VARIABLES]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_14": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, mean=0.0, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "collections",
                    "type": "variable",
                    "possible_values": [
                        [
                            "collections + [tf.GraphKeys.VARIABLES, tf.GraphKeys.TRAINABLE_VARIABLES]",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filter": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_24": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_38": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_42": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_50": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "keep_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_proba",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "x_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_99": {
                "variable": {
                    "value": "self._cost",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-self.y_ * tf.log(self.output)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_102": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.arg_max(self.output, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.arg_max(self.y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "self._accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "initialize_all_variables_118": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_121": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "h_conv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_inp, W_conv_1) + b_conv_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "h_conv_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool_1, W_conv_2) + b_conv_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "h_pool_2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv_2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "h_fc_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool_2_flat, W_fc_1) + b_fc_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_86": {
                "variable": {
                    "value": "h_fc_1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool_2_flat, W_fc_1) + b_fc_1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1, dtype=tf.float32, name='keep_proba')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.matmul(h_fc_1_drop, W_fc_2) + b_fc_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_109": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_59": {
                "name": {
                    "value": "Conv_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_68": {
                "name": {
                    "value": "Conv_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_77": {
                "name": {
                    "value": "Full_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_88": {
                "name": {
                    "value": "Last_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arg_max_102": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arg_max_103": {
                "input": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.arg_max(self.output, 1), tf.arg_max(self.y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "Training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_100": {
                "x": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "a": {
                    "value": "h_pool_2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool_2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_weight_variable([7 * 7 * 64, 1024], collections=['kernel'], name='Wf_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "h_fc_1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc_1, keep_prob=keep_proba)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_weight_variable([1024, 10], collections=['alpha'], name='Wf_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_113": {
                "key": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_115": {
                "key": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "last_kernel/neural_network.py": {
        "tensorflow": {
            "ConfigProto_45": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_47": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_151": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_197": {
                "variable": {
                    "value": "scale_lr",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_212": {
                "variable": {
                    "value": "var_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_220": {
                "variable": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "MOVING_AVERAGE_DECAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.9999",
                            "float"
                        ]
                    ]
                },
                "num_updates": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_step",
                            "Attribute"
                        ],
                        [
                            "range(max_steps)",
                            "Call"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_225": {
                "variable": {
                    "value": "self.nl2_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(g) for (g, _) in grads_alpha if g is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_227": {
                "variable": {
                    "value": "self.nl2_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(g) for (g, _) in grads if g is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cast_241": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_242": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_inputs()",
                            "Call"
                        ],
                        [
                            "self._mk_layer(layer_conf, output, collection)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.y_, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy_per_example",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_244": {
                "variable": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=output, labels=labels, name='cross_entropy_per_example')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "cross_entropy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_249": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.arg_max(output, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.y_, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_251": {
                "variable": {
                    "value": "self._accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "in_top_k_254": {
                "variable": {
                    "value": "self._top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "targets": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_inputs()",
                            "Call"
                        ],
                        [
                            "self._mk_layer(layer_conf, output, collection)",
                            "Call"
                        ]
                    ]
                },
                "predictions": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.y_, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_272": {
                "variable": {
                    "value": "loss_averages",
                    "type": "variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Coordinator_419": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_49": {
                "sess": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_129": {
                "variable": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "eval_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_135": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(tf.constant(False), shape=(), name='eval_data')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : data_val",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : data",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_136": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "eval_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder_with_default(tf.constant(False), shape=(), name='eval_data')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : labels_val",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : labels",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[None if v == -1 else v for v in inputs_conf['shape']]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "self.y_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "label_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._config['outputs']",
                            "Subscript"
                        ],
                        [
                            "[None if v == -1 else v for v in label_shape]",
                            "ListComp"
                        ]
                    ]
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "initialize_all_variables_177": {
                "variable": {
                    "value": "self._init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_180": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_181": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_182": {
                "variable": {
                    "value": "self.saver_hard",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.all_variables()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_201": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_lr * tf.train.exponential_decay(learning_rate=0.1, global_step=self.global_step, decay_steps=decay_steps, decay_rate=0.1, staircase=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_208": {
                "variable": {
                    "value": "self._opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_lr * tf.train.exponential_decay(learning_rate=0.1, global_step=self.global_step, decay_steps=decay_steps, decay_rate=0.1, staircase=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_op_232": {
                "variable": {
                    "value": "self._train_all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_all",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_op_234": {
                "variable": {
                    "value": "self._train_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_op_236": {
                "variable": {
                    "value": "self._train_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_kernel",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_246": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_247": {
                "name": {
                    "value": "losses_alpha",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "cross_entropy_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='cross_entropy')",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_276": {
                "name": {
                    "value": "total_loss.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_58": {
                "variable": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "bias_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer(biases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_64": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_66": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs.get_shape()[1].value] + shape",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, dtype=DTYPE)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_67": {
                "variable": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.conv2d(inputs, W, **layer_conf)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=bias_shape, dtype=DTYPE, initializer=tf.constant_initializer(biases))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inputs, W, **layer_conf), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(inputs, W), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hk, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_74": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DTYPE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "get_variable_76": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[inputs.get_shape()[1].value] + shape",
                            "BinOp"
                        ]
                    ]
                },
                "initializer": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, dtype=DTYPE)",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, dtype=DTYPE)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_77": {
                "variable": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(inputs, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=bias_shape, dtype=DTYPE, initializer=tf.constant_initializer(biases))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inputs, W, **layer_conf), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(inputs, W), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hk, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_90": {
                "variable": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "reg_l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.nn.l2_loss(W)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=bias_shape, dtype=DTYPE, initializer=tf.constant_initializer(biases))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inputs, W, **layer_conf), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(inputs, W), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hk, name=name)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "scalar_174": {
                "name": {
                    "value": "accuracy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self._accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exponential_decay_198": {
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "decay_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(N_EPOCH_PER_DECAY * n_batches_per_epoch)",
                            "Call"
                        ]
                    ]
                },
                "decay_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "control_dependencies_207": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_221": {
                "key": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_230": {
                "control_inputs": {
                    "value": "[apply_all, averages_var_alpha, averages_var_kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_233": {
                "control_inputs": {
                    "value": "[apply_alpha, averages_var_alpha]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_235": {
                "control_inputs": {
                    "value": "[apply_kernel, averages_var_kernel]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arg_max_249": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_inputs()",
                            "Call"
                        ],
                        [
                            "self._mk_layer(layer_conf, output, collection)",
                            "Call"
                        ]
                    ]
                },
                "dimension": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_251": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.arg_max(output, 1), labels)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_256": {
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_257": {
                "inputs": {
                    "value": "tf.get_collection('losses_alpha')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_422": {
                "key": {
                    "value": "tf.GraphKeys.QUEUE_RUNNERS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_79": {
                "name": {
                    "value": "collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'kernel'",
                            "str"
                        ],
                        [
                            "'alpha'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_92": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(reg_l2, tf.nn.l2_loss(W), name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(lmbd, tf.nn.l2_loss(W), name='weight_loss_alpha')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool_105": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_126": {
                "name": {
                    "value": "inputs_readers",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_130": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "all_variables_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "all_variables_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_225": {
                "t": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "l2_loss_227": {
                "t": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_collection_256": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_257": {
                "key": {
                    "value": "losses_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_62": {
                "name": {
                    "value": "collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'kernel'",
                            "str"
                        ],
                        [
                            "'alpha'",
                            "str"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "hk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='biases', shape=bias_shape, dtype=DTYPE, initializer=tf.constant_initializer(biases))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.nn.conv2d(inputs, W, **layer_conf), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.add(tf.matmul(inputs, W), hk, name=name)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hk, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_67": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_77": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_84": {
                "variable": {
                    "value": "lmbd",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "reg_l2_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reg_l2",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_86": {
                "variable": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lmbd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(reg_l2_alpha)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.nn.l2_loss(W)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_loss_alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_90": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_186": {
                "key": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_211": {
                "key": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_60": {
                "value": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_88": {
                "name": {
                    "value": "losses_alpha",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(reg_l2, tf.nn.l2_loss(W), name='weight_loss')",
                            "Call"
                        ],
                        [
                            "tf.multiply(lmbd, tf.nn.l2_loss(W), name='weight_loss_alpha')",
                            "Call"
                        ]
                    ]
                }
            },
            "flatten_109": {
                "structure": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_111": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_86": {
                "t": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=shape, initializer=init)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_114": {
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(1.0, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main_kernel.py": {
        "tensorflow": {
            "placeholder_121": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, ndim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_123": {
                "variable": {
                    "value": "lmbd_",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "lmbd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_125": {
                "variable": {
                    "value": "keep_proba",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_131": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "h_1_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(X, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_137": {
                "variable": {
                    "value": "h_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_1_drop, W_2) + b_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "h_2_drop",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_1_drop, W_2) + b_2)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_proba",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_142": {
                "variable": {
                    "value": "last_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "last_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_2_drop",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "last_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_2_drop",
                            "variable"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_148": {
                "variable": {
                    "value": "final_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "last_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_2_drop",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ops.matrix_solve(last_matrix + lmbd_ * dataset.N_train * np.identity(dataset.N_train), y_)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_152": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h_2_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_2, keep_prob=keep_proba)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_weight_variable([10, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_162": {
                "variable": {
                    "value": "error_krr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_ - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_165": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_167": {
                "variable": {
                    "value": "post_train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.05",
                            "float"
                        ],
                        [
                            "0.01",
                            "float"
                        ]
                    ]
                }
            },
            "initialize_all_variables_176": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_178": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_98": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_113": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_117": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_114": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, mean=0, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_118": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, mean=0, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_158": {
                "input_tensor": {
                    "value": "tf.square(v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.square(y_ - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_162": {
                "x": {
                    "value": "y_ - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_131": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, ndim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_weight_variable([ndim, ndim])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_137": {
                "a": {
                    "value": "h_1_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_1, keep_prob=keep_proba)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_weight_variable([ndim, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "square_158": {
                "x": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "square_161": {
                "x": {
                    "value": "y_ - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "medium_conv_xps/mnist_tf.py": {
        "tensorflow": {
            "truncated_normal_38": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_42": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_43": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "keep_prob": {
                    "value": "keep_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 if not train or last_kernel else model.config.keep_prob",
                            "IfExp"
                        ]
                    ]
                }
            },
            "max_pool_53": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "x_image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 784])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, size_last_layer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=y_, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_126": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_127": {
                "variable": {
                    "value": "self._accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "variable": {
                    "value": "regularization_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(v) for v in tvars_kl]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_139": {
                "variable": {
                    "value": "optimizer_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_147": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "hc",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(p_input, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "hc",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(p_input, w) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_339": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_340": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_341": {
                "variable": {
                    "value": "k_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "p_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([size_last_layer, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_123": {
                "labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 10])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(p_input, softmax_w) + softmax_b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_126": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, 10])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_127": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_136": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_345": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_349": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "a": {
                    "value": "p_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_image",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "hp",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_variable([5, 5, p_size, s])",
                            "Call"
                        ],
                        [
                            "weight_variable([size_last_layer, s])",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_353": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_370": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "recurrent_nn/ptb_experiment.py": {
        "tensorflow": {
            "MultiRNNCell_88": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(axis=1, values=outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_137": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_139": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_149": {
                "variable": {
                    "value": "regularization_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(v) for v in tvars_kl]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gradients_151": {
                "variable": {
                    "value": "grads_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost + config.lambda_reg * regularization_cost",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[softmax_b, softmax_w]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_162": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_272": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_294": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'saves/'",
                            "str"
                        ]
                    ]
                }
            },
            "get_variable_95": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_97": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vocab_size, size], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_.input_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_100": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.input_data)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_354": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_94": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_119": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_123": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(axis=1, values=outputs), [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [size, vocab_size], dtype=data_type())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_128": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.legacy_seq2seq.sequence_loss_by_example([logits], [tf.reshape(input_.targets, [-1])], [tf.ones([batch_size * num_steps], dtype=data_type())])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_137": {
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals['cost']",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_275": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_280": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_288": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_77": {
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_81": {
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_86": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_126": {
                "tensor": {
                    "value": "input_.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_127": {
                "shape": {
                    "value": "[batch_size * num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_149": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_282": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_290": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "recurrent_nn/ptb_word_lm.py": {
        "tensorflow": {
            "MultiRNNCell_130": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[attn_cell() for _ in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(axis=1, values=outputs)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_162": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size, vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_164": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_176": {
                "variable": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_177": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_179": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(cost, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "config.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_181": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "variable": {
                    "value": "regularization_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(v) for v in tvars_kl]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gradients_193": {
                "variable": {
                    "value": "grads_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost + config.lambda_reg * regularization_cost",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[softmax_b, softmax_w]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "new_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_204": {
                "variable": {
                    "value": "self._lr_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._new_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_323": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-config.init_scale",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "config.init_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_348": {
                "variable": {
                    "value": "sv",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_137": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_139": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('embedding', [vocab_size, size], dtype=data_type())",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_.input_data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_142": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embedding, input_.input_data)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(inputs, config.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_136": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "RNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_161": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_165": {
                "a": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(axis=1, values=outputs), [-1, size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_w', [size, vocab_size], dtype=data_type())",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.legacy_seq2seq.sequence_loss_by_example([logits], [tf.reshape(input_.targets, [-1])], [tf.ones([batch_size * num_steps], dtype=data_type())])",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_179": {
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vals['cost']",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_326": {
                "name": {
                    "value": "Train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_330": {
                "name": {
                    "value": "Training Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "m.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_331": {
                "name": {
                    "value": "Learning Rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "m.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_333": {
                "name": {
                    "value": "Valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_337": {
                "name": {
                    "value": "Validation Loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "mvalid.cost",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_342": {
                "name": {
                    "value": "Test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_119": {
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.get_variable_scope().reuse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_123": {
                "num_units": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "forget_bias": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DropoutWrapper_128": {
                "cell": {
                    "value": "lstm_cell()",
                    "type": "Call",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "config.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "input_.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_169": {
                "shape": {
                    "value": "[batch_size * num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "data_type()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l2_loss_191": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_328": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_344": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-config.init_scale, config.init_scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_scope_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "recurrent_nn/push_data.py": {
        "tensorflow": {
            "Saver_42": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_48": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_57": {
                "variable": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_max(tf.abs(sequence), reduction_indices=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "used",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sign(tf.reduce_max(tf.abs(sequence), reduction_indices=2))",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(used, reduction_indices=1)",
                            "Call"
                        ],
                        [
                            "tf.cast(length, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, out_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_70": {
                "variable": {
                    "value": "relevant",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(output, [-1, out_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, local_batch_size) * local_max_length + (local_length - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_57": {
                "input_tensor": {
                    "value": "tf.abs(sequence)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_66": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "x_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, max_length, ndim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "keep_param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_116": {
                "variable": {
                    "value": "capped_last",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_relevant(output=y1, local_length=l_)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_125": {
                "variable": {
                    "value": "positif_instances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float64, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_126": {
                "variable": {
                    "value": "negative_instances",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float64, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_128": {
                "variable": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float64, shape=[None, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_129": {
                "variable": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "positif_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(y_, 1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.log(logistic_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(y_)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=positif_instances, x=tf.log(logistic_output), y=npl)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=negative_instances, x=tf.log(1 - logistic_output), y=npl)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_130": {
                "variable": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "negative_instances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(y_, -1)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.log(1 - logistic_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(y_)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=positif_instances, x=tf.log(logistic_output), y=npl)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=negative_instances, x=tf.log(1 - logistic_output), y=npl)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_138": {
                "variable": {
                    "value": "tv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "variable": {
                    "value": "regularization_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.nn.l2_loss(v) for v in tv]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_172": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_57": {
                "x": {
                    "value": "sequence",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_91": {
                "name_or_scope": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "initialize_all_variables_168": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_170": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_118": {
                "x": {
                    "value": "-capped_last / temp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_129": {
                "x": {
                    "value": "logistic_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (1.0 + tf.exp(-capped_last / temp))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_130": {
                "x": {
                    "value": "1 - logistic_output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_133": {
                "input_tensor": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(y_)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=positif_instances, x=tf.log(logistic_output), y=npl)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=negative_instances, x=tf.log(1 - logistic_output), y=npl)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "npl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(y_)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=positif_instances, x=tf.log(logistic_output), y=npl)",
                            "Call"
                        ],
                        [
                            "tf.where(condition=negative_instances, x=tf.log(1 - logistic_output), y=npl)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "l2_loss_139": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_by_value_145": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "recurrent_nn/reader.py": {
        "tensorflow": {
            "convert_to_tensor_101": {
                "variable": {
                    "value": "raw_data",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "raw_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(raw_data, name='raw_data', dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "raw_data",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "size_103": {
                "variable": {
                    "value": "data_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(raw_data, name='raw_data', dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "raw_data[0:batch_size * batch_len]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, batch_len]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_positive_109": {
                "variable": {
                    "value": "assertion",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_len - 1) // num_steps",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "epoch_size == 0, decrease batch_size or num_steps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "range_input_producer_115": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "limit": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_len - 1) // num_steps",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "strided_slice_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_read_words(filename)",
                            "Call"
                        ],
                        [
                            "_read_words(filename)",
                            "Call"
                        ],
                        [
                            "tf.reshape(raw_data[0:batch_size * batch_len], [batch_size, batch_len])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i * num_steps]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[batch_size, (i + 1) * num_steps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "strided_slice_119": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_read_words(filename)",
                            "Call"
                        ],
                        [
                            "_read_words(filename)",
                            "Call"
                        ],
                        [
                            "tf.reshape(raw_data[0:batch_size * batch_len], [batch_size, batch_len])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i * num_steps + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "end": {
                    "value": "[batch_size, (i + 1) * num_steps + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_29": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_100": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "epoch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch_len - 1) // num_steps",
                            "BinOp"
                        ],
                        [
                            "tf.identity(epoch_size, name='epoch_size')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "epoch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_112": {
                "control_inputs": {
                    "value": "[assertion]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}