{
    "utils/cal_fid_stat.py": {
        "tensorflow": {
            "ConfigProto_64": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_66": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/fid_score.py": {
        "tensorflow": {
            "disable_v2_behavior_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_321": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_44": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_46": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "FID_Inception_Net",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "FastGFile_43": {
                "name": {
                    "value": "pth",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_323": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_70": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "global_variables_initializer_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/inception_score.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_v2_behavior_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_83": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_85": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_42": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "FastGFile_81": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_87": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_103": {
                "input": {
                    "value": "pool3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_101": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "adamw.py": {
        "torch": {
            "zeros_like_86": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_88": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "state[max_exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_107": {
                "input": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_exp_avg_sq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "state['max_exp_avg_sq']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "celeba.py": {
        "torch": {}
    },
    "datasets.py": {
        "torch": {
            "DistributedSampler_29": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_30": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_63": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_57": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_58": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_86": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_87": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "self.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_115": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_116": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_124": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "self.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_145": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_146": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_148": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "self.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_174": {
                "variable": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_175": {
                "variable": {
                    "value": "val_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "self.train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=True, transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='train+unlabeled', transform=transform, download=True)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_train'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_train'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "self.valid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "self.test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Dt(root=args.data_path, train=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, split='test', transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['bedroom_val'], transform=transform)",
                            "Call"
                        ],
                        [
                            "Dt(root=args.data_path, classes=['church_outdoor_val'], transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.dis_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(val_dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flops.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_37": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_55": {
                "*size": {
                    "value": "dummy_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 1024)",
                            "Tuple"
                        ]
                    ]
                }
            }
        }
    },
    "functions.py": {
        "torch": {
            "Tensor_51": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[real_samples.shape[0], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_352": {
                "variable": {
                    "value": "sample_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_imgs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((gen_imgs[:16], real_imgs[:16]), dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(sample_imgs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_57": {
                "outputs": {
                    "value": "d_interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(alpha * real_samples + (1 - alpha) * fake_samples).requires_grad_(True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones([real_samples.shape[0], 1], requires_grad=False).to(real_samples.get_device())",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "sample_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gen_imgs[:16], real_imgs[:16])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_107": {
                "variable": {
                    "value": "real_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(imgs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_108": {
                "variable": {
                    "value": "fake_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(imgs.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__147": {
                "parameters": {
                    "value": "dis_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "loss_lz",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_norm__193": {
                "parameters": {
                    "value": "gen_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "nn.ReLU(inplace=True)(1.0 - real_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_105": {
                "input": {
                    "value": "nn.ReLU(inplace=True)(1 + fake_validity)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_166": {
                "variable": {
                    "value": "real_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(args.gen_batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_123": {
                "variable": {
                    "value": "real_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(real_validity.shape[0], real_validity.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_124": {
                "variable": {
                    "value": "fake_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(real_validity.shape[0], real_validity.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_176": {
                "variable": {
                    "value": "real_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(fake_validity.shape[0], fake_validity.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_117": {
                "variable": {
                    "value": "real_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(real_validity_item.shape[0], real_validity_item.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_118": {
                "variable": {
                    "value": "fake_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(real_validity_item.shape[0], real_validity_item.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_173": {
                "variable": {
                    "value": "real_label",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(fake_validity_item.shape[0], fake_validity_item.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "real_imgs.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_182": {
                "input": {
                    "value": "torch.abs(z_random2 - z_random1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_189": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(fake_validity.view(-1))",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(fake_validity.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_130": {
                "input": {
                    "value": "real_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(real_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(real_validity.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_182": {
                "input": {
                    "value": "fake_image2 - fake_image1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_183": {
                "input": {
                    "value": "z_random2 - z_random1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_187": {
                "input": {
                    "value": "fake_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(fake_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(fake_validity.view(-1))",
                            "Call"
                        ],
                        [
                            "dis_net(gen_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(fake_validity.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_134": {
                "input": {
                    "value": "real_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(real_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(real_validity.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_138": {
                "input": {
                    "value": "real_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(real_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(real_validity.view(-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_140": {
                "input": {
                    "value": "real_validity",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dis_net(real_imgs)",
                            "Call"
                        ],
                        [
                            "nn.Sigmoid()(real_validity.view(-1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models_search/Celeba256_dis.py": {
        "torch": {
            "leaky_relu__65": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "x.reshape(B * H, W, C).view(B, H, W, C).view(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B * W, H, C).view(B, W, H, C).permute(0, 2, 1, 3).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[0](x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[1](x)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, H // S, S, W // S, S)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, C * S * S, H // S, W // S)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True, [self.Hz_geom, self.Hz_fbank])",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "DiffAugment(x, 'translation', True, [self.Hz_geom, self.Hz_fbank])",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x, aug=aug, epoch=epoch)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_106": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_239": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_282": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_283": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_285": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_305": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[StageBlock(depth=depth[1], dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer), StageBlock(depth=depth[2], dim=embed_dim // 16, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "variable": {
                    "value": "self.tRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_339": {
                "variable": {
                    "value": "self.tRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 4, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_342": {
                "variable": {
                    "value": "self.tRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 16, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_460": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_461": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_462": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_463": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_3, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_466": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_469": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_474": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 2, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_479": {
                "variable": {
                    "value": "self.blocks_21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 2, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_484": {
                "variable": {
                    "value": "self.blocks_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_494": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_575": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_595": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_614": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_166": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_263": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_388": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_441": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "patch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_442": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_443": {
                "variable": {
                    "value": "self.fRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_448": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_449": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_450": {
                "variable": {
                    "value": "self.fRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "18",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_523": {
                "variable": {
                    "value": "Hz_fbank",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_54": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_62": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_168": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_283": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_284": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_340": {
                "in_channels": {
                    "value": "self.embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_343": {
                "in_channels": {
                    "value": "self.embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_413": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_460": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_461": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ],
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_462": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ],
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_463": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_3",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "(args.img_size // 4 // patch_size) ** 2",
                            "BinOp"
                        ],
                        [
                            "(args.img_size // 4 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_504": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_572": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_592": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_170": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_291": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_382": {
                "input": {
                    "value": "x_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tRGB_2(x.permute(0, 2, 1).view(B, self.embed_dim // 4, H, W))",
                            "Call"
                        ],
                        [
                            "self.fRGB_2(x).flatten(2).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_468": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_524": {
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/Celeba256_gen.py": {
        "torch": {
            "interpolate_263": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=4, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(4)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.cross_attention(x, embedding)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, N, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block([x, embedding])",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[3].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[4].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[5].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, 256, 256)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_274": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=4, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(4)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.cross_attention(x, embedding)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, N, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block([x, embedding])",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[3].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[4].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[5].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, 256, 256)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu__37": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=4, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(4)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "self.cross_attention(x, embedding)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, N, C)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block([x, embedding])",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[3].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[4].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x + self.pos_embed[5].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, 256, 256)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(3, 2, 1)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_58": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.q_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "que_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "que_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.k_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "que_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.v_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "key_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "que_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "que_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "que_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_86": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.noise_strength_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_123": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_125": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_129": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_133": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_134": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_135": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_136": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.noise_strength_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*models",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_334": {
                "variable": {
                    "value": "self.embedding_transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_336": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_337": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_338": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_339": {
                "variable": {
                    "value": "self.pos_embed_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 8) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_340": {
                "variable": {
                    "value": "self.pos_embed_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 16) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_341": {
                "variable": {
                    "value": "self.pos_embed_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 32) ** 2, embed_dim // 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_343": {
                "variable": {
                    "value": "self.embed_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_447": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 64, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_569": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_570": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_571": {
                "variable": {
                    "value": "self.fRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_572": {
                "variable": {
                    "value": "self.fRGB_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_579": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_580": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_581": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_582": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_3, embed_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_583": {
                "variable": {
                    "value": "self.pos_embed_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_4, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_585": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_588": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 8, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_593": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_598": {
                "variable": {
                    "value": "self.blocks_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 2, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_603": {
                "variable": {
                    "value": "self.blocks_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_608": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_665": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_677": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_689": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_696": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_174": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_252": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_275": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_324": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_531": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_26": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_34": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_90": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_135": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm1d_176": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_200": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.l2_size // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_327": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.l2_size // 16, self.l2_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_332": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.l2_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_333": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_336": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_337": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_338": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_339": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 8) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_340": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 16) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_341": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 32) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 64",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_343": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "self.embed_dim // 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_542": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_579": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_580": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_581": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_582": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 4 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_583": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 8 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_618": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_662": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_674": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_686": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "[x.size(0), x.size(1), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_178": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_353": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_587": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_26": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_328": {
                "in_features": {
                    "value": "self.l2_size // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "in_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_642": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_643": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_644": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_custom.py": {
        "torch": {
            "leaky_relu__39": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[index + 1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x).flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_82": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.noise_strength_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_147": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_191": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_192": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_193": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_194": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_214": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[StageBlock(depth=depth[1], dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer), StageBlock(depth=depth[2], dim=embed_dim // 16, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 16, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_342": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_343": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_344": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_347": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_106": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_171": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_296": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_339": {
                "variable": {
                    "value": "self.patch_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "args.patch_size",
                            "Attribute"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "args.patch_size",
                            "Attribute"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_28": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_36": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_84": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm1d_108": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_192": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "in_channels": {
                    "value": "self.embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_342": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_343": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_363": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_363": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "[x.size(0), x.size(1), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_110": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_200": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_346": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_28": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_custom_local544444_256_rp.py": {
        "torch": {
            "interpolate_197": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[3]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[4]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_5(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[5]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H, W, C).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu__35": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[3]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[4]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_5(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[5]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H, W, C).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_74": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_84": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_85": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_86": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*models",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_256": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_257": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_258": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_259": {
                "variable": {
                    "value": "self.pos_embed_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 8) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.pos_embed_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 16) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.pos_embed_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 32) ** 2, embed_dim // 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_359": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 64, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_485": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_486": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_487": {
                "variable": {
                    "value": "self.fRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "variable": {
                    "value": "self.fRGB_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_495": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_496": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_497": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_498": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_3, embed_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_499": {
                "variable": {
                    "value": "self.pos_embed_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_4, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_501": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_504": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 8, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_509": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_514": {
                "variable": {
                    "value": "self.blocks_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 2, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_519": {
                "variable": {
                    "value": "self.blocks_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_524": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_581": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_593": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_605": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_122": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_186": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_448": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_26": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_33": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_86": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm1d_124": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.l2_size // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.l2_size // 16, self.l2_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.l2_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_256": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_257": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_259": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 8) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 16) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 32) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 64",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_360": {
                "in_channels": {
                    "value": "self.embed_dim // 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_458": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_495": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_496": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_497": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_498": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 4 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_499": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 8 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_534": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_534": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_578": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_590": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_602": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_126": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_271": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_503": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_26": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_250": {
                "in_features": {
                    "value": "self.l2_size // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_251": {
                "in_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_558": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_559": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_560": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_custom_local544444_256_rp_noise.py": {
        "torch": {
            "interpolate_204": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[3]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[4]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_5(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[5]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H, W, C).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu__35": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, scale_factor=2, mode='bicubic')",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.block(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_1(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_2(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2]",
                            "BinOp"
                        ],
                        [
                            "self.blocks_3(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[3]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_4(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[4]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_5(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[5]",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "self.blocks_6(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H, W, C).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size // 16)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.l2_size)",
                            "Call"
                        ],
                        [
                            "self.l2(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_4], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_4",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_55": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_78": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_88": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_89": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_90": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_91": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.noise_strength_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*models",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_263": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_264": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_266": {
                "variable": {
                    "value": "self.pos_embed_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 8) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.pos_embed_5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 16) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.pos_embed_6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 32) ** 2, embed_dim // 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_366": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 64, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_492": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_493": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_494": {
                "variable": {
                    "value": "self.fRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_495": {
                "variable": {
                    "value": "self.fRGB_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_502": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_503": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_504": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_505": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_3, embed_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_506": {
                "variable": {
                    "value": "self.pos_embed_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_4, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_508": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_511": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 8, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_516": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_521": {
                "variable": {
                    "value": "self.blocks_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 2, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_526": {
                "variable": {
                    "value": "self.blocks_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_531": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_588": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_600": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_612": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_619": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_129": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_193": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_253": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_455": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_26": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_33": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_90": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm1d_131": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_255": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.l2_size // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.l2_size // 16, self.l2_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.l2_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_262": {
                "variable": {
                    "value": "self.l2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_263": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_264": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_265": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_266": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 8) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 16) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 32) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 64",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "self.embed_dim // 64",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_465": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_502": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_503": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_504": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_505": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 4 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_506": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_4",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 8 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_541": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_541": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_585": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_597": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_609": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "[x.size(0), x.size(1), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_133": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_278": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_510": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_26": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_257": {
                "in_features": {
                    "value": "self.l2_size // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "in_features": {
                    "value": "self.l2_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_565": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_566": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_567": {
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_custom_rp.py": {
        "torch": {
            "leaky_relu__39": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[index + 1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True)",
                            "Call"
                        ],
                        [
                            "self.patch_embed(x).flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed",
                            "BinOp"
                        ],
                        [
                            "self.pos_drop(x)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_60": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_79": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_81": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_167": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer, window_size=window_size) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_212": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_215": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_236": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[StageBlock(depth=depth[1], dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=args.bottom_width * 2), StageBlock(depth=depth[2], dim=embed_dim // 16, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=args.bottom_width * 4)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_269": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 16, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_366": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_368": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_371": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_414": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_90": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_91": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_92": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_126": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_192": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_320": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_363": {
                "variable": {
                    "value": "self.patch_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "args.patch_size",
                            "Attribute"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "args.patch_size",
                            "Attribute"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_28": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_36": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_128": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_213": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_215": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "self.embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_366": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_367": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_387": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_91": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_130": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_221": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_370": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_28": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_custom_scale2.py": {
        "torch": {
            "leaky_relu__63": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[0](x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[1](x)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, H // S, S, W // S, S)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, C * S * S, H // S, W // S)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True, [self.Hz_geom, self.Hz_fbank])",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x, aug=aug, epoch=epoch)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_223": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_289": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[StageBlock(depth=depth[1], dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer), StageBlock(depth=depth[2], dim=embed_dim // 16, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.tRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_323": {
                "variable": {
                    "value": "self.tRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 4, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "variable": {
                    "value": "self.tRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 16, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_425": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_432": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_433": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 4 * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_434": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_437": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_440": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4 * 3, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=args.bottom_width * 4 // 2) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_445": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=args.bottom_width * 4 // 4) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_451": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer, window_size=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_533": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_114": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_116": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_150": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_247": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_372": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_478": {
                "variable": {
                    "value": "Hz_fbank",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_52": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_60": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "in_channels": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "in_channels": {
                    "value": "self.embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "self.embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_432": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_433": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_434": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_461": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_461": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_521": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_115": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_154": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_275": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_366": {
                "input": {
                    "value": "x_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tRGB_2(x.permute(0, 2, 1).view(B, self.embed_dim // 4, H, W))",
                            "Call"
                        ],
                        [
                            "self.fRGB_2(x).flatten(2).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_439": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_479": {
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_custom_scale2_rp_noise.py": {
        "torch": {
            "leaky_relu__63": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x + torch.randn([x.size(0), x.size(1), 1], device=x.device) * self.noise_strength_1",
                            "BinOp"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[0](x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[1](x)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, H // S, S, W // S, S)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, C * S * S, H // S, W // S)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True, [self.Hz_geom, self.Hz_fbank])",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x, aug=aug, epoch=epoch)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.noise_strength_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros([])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_226": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer, window_size=window_size) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_270": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_271": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_272": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_273": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_294": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[StageBlock(depth=depth[1], dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=16), StageBlock(depth=depth[2], dim=embed_dim // 16, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=32)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_327": {
                "variable": {
                    "value": "self.tRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_330": {
                "variable": {
                    "value": "self.tRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 4, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "variable": {
                    "value": "self.tRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 16, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_432": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_439": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_440": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 4 * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_441": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_444": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_447": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4 * 3, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=args.bottom_width * 4 // 2) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_452": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=args.bottom_width * 4 // 4) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer, window_size=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_531": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_540": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_115": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_116": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_117": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_153": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_251": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_379": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_485": {
                "variable": {
                    "value": "Hz_fbank",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_52": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_60": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BatchNorm1d_155": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_271": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_272": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_273": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_328": {
                "in_channels": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "self.embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "in_channels": {
                    "value": "self.embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_439": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_440": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_441": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_468": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_468": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_528": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_116": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_131": {
                "*size": {
                    "value": "[x.size(0), x.size(1), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_157": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_279": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_373": {
                "input": {
                    "value": "x_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tRGB_2(x.permute(0, 2, 1).view(B, self.embed_dim // 4, H, W))",
                            "Call"
                        ],
                        [
                            "self.fRGB_2(x).flatten(2).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_446": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_486": {
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_helper.py": {
        "torch": {
            "rand_16": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ViT_scale3_local_new_rp.py": {
        "torch": {
            "leaky_relu__63": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.view(B, H // window_size, window_size, W // window_size, window_size, C)",
                            "Call"
                        ],
                        [
                            "windows.view(B, H // window_size, W // window_size, window_size, window_size, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 1, 3, 2, 4, 5).contiguous().view(B, H, W, -1)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.PixelShuffle(2)(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, C, H * W)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x1 @ x2",
                            "BinOp"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.mat(attn, v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x.permute(0, 2, 1)).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x)))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "self.l1(z).view(-1, self.bottom_width ** 2, self.embed_dim)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[0].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.blocks(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[1].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[0](x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed[2].to(x.get_device())",
                            "BinOp"
                        ],
                        [
                            "self.upsample_blocks[1](x)",
                            "Call"
                        ],
                        [
                            "x.view(N, C, H // S, S, W // S, S)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 3, 5, 1, 2, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(N, C * S * S, H // S, W // S)",
                            "Call"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.attn(self.norm1(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "x * self.gain + self.drop_path(self.mlp(self.norm2(x))) * self.gain",
                            "BinOp"
                        ],
                        [
                            "DiffAugment(x, self.args.diff_aug, True, [self.Hz_geom, self.Hz_fbank])",
                            "Call"
                        ],
                        [
                            "x_1 + self.pos_embed_1",
                            "BinOp"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "window_partition(x, self.window_size)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size * self.window_size, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, self.window_size, self.window_size, C)",
                            "Call"
                        ],
                        [
                            "window_reverse(x, self.window_size, H, W).view(B, H * W, C)",
                            "Call"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_2], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_2",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 1).view(B, C, H, W)",
                            "Call"
                        ],
                        [
                            "nn.AvgPool2d(2)(x)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([x, x_3], dim=-1)",
                            "Call"
                        ],
                        [
                            "x + self.pos_embed_3",
                            "BinOp"
                        ],
                        [
                            "blk(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((cls_tokens, x), dim=1)",
                            "Call"
                        ],
                        [
                            "self.last_block(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.forward_features(x)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_84": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_223": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop, attn_drop=attn_drop, drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "args.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.bottom_width ** 2, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 2) ** 2, embed_dim // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, (self.bottom_width * 4) ** 2, embed_dim // 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_289": {
                "variable": {
                    "value": "self.upsample_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[StageBlock(depth=depth[1], dim=embed_dim // 4, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer), StageBlock(depth=depth[2], dim=embed_dim // 16, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.tRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_323": {
                "variable": {
                    "value": "self.tRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 4, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_326": {
                "variable": {
                    "value": "self.tRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.embed_dim // 16, 3, 1, 1, 0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "variable": {
                    "value": "self.fRGB_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_425": {
                "variable": {
                    "value": "self.fRGB_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_426": {
                "variable": {
                    "value": "self.fRGB_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embed_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "patch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "patch_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_434": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_435": {
                "variable": {
                    "value": "self.pos_embed_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_1, embed_dim // 4 * 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_436": {
                "variable": {
                    "value": "self.pos_embed_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_2, embed_dim // 8 * 7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_437": {
                "variable": {
                    "value": "self.pos_embed_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches_3, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_440": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_443": {
                "variable": {
                    "value": "self.blocks_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4 * 3, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=self.window_size) for i in range(depth - 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_448": {
                "variable": {
                    "value": "self.blocks_11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 4 * 3, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=64) for i in range(1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_453": {
                "variable": {
                    "value": "self.blocks_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim // 8 * 7, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=32) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_458": {
                "variable": {
                    "value": "self.blocks_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=0, act_layer=act_layer, norm_layer=norm_layer, window_size=16) for i in range(depth + 1)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_468": {
                "variable": {
                    "value": "self.last_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DisBlock(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[0], act_layer=act_layer, norm_layer=norm_layer, window_size=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_550": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_562": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, x_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_581": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.relative_position_bias_table",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((2 * window_size - 1) * (2 * window_size - 1), num_heads)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "coords_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_114": {
                "variable": {
                    "value": "coords_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "window_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_115": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([coords_h, coords_w])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_116": {
                "variable": {
                    "value": "coords_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack(torch.meshgrid([coords_h, coords_w]))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LayerNorm_150": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PixelShuffle_247": {
                "upscale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_372": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_496": {
                "variable": {
                    "value": "Hz_fbank",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_52": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=2, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_60": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Identity_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_267": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "self.bottom_width ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_269": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.bottom_width * 4) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_321": {
                "in_channels": {
                    "value": "self.embed_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_324": {
                "in_channels": {
                    "value": "self.embed_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "in_channels": {
                    "value": "self.embed_dim // 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Identity_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_434": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_435": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 4 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 2 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim // 8 * 7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(args.img_size // 4 // patch_size) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_478": {
                "in_features": {
                    "value": "embed_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "384",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_547": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_559": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "*size": {
                    "value": "(2 * window_size - 1) * (2 * window_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "num_heads",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ],
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_115": {
                "*tensors": {
                    "value": "[coords_h, coords_w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "InstanceNorm1d_154": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_275": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_366": {
                "input": {
                    "value": "x_2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.tRGB_2(x.permute(0, 2, 1).view(B, self.embed_dim // 4, H, W))",
                            "Call"
                        ],
                        [
                            "self.fRGB_2(x).flatten(2).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "linspace_442": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "[int(i) for i in args.g_depth.split(',')]",
                            "ListComp"
                        ],
                        [
                            "args.d_depth",
                            "Attribute"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_497": {
                "data": {
                    "value": "Hz_fbank",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.eye(4, 1)",
                            "Call"
                        ],
                        [
                            "np.dstack([Hz_fbank, np.zeros_like(Hz_fbank)]).reshape(Hz_fbank.shape[0], -1)[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "scipy.signal.convolve(Hz_fbank, [Hz_lo2])",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(Hz_fbank, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_52": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models_search/ada.py": {
        "torch": {
            "sin_76": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_76": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_default_dtype_11": {
                "variable": {
                    "value": "dtype",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_13": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_20": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value.copy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.get_default_dtype()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_35": {
                "tensors": {
                    "value": "elems",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[x for row in rows for x in row]",
                            "ListComp"
                        ],
                        [
                            "[x if isinstance(x, torch.Tensor) else constant(x, shape=ref[0].shape, device=ref[0].device) for x in elems]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "input": {
                    "value": "ref[0].shape + (len(rows), -1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_tensors_22": {
                "variable": {
                    "value": "(tensor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "tensor",
                    "type": null,
                    "possible_values": []
                }
            },
            "cos_69": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_69": {
                "input": {
                    "value": "-theta",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sin_70": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_70": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_22": {
                "*size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tuple(shape)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models_search/diff_aug.py": {
        "torch": {
            "interpolate_62": {
                "variable": {
                    "value": "x_large",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, affine=affine)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rot90(x, k, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "1.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bicubic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_67": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([b, 1, 1, 1], device=x.device) < 0.2",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x_crop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x_large[:, :, h_start:h_start + h, w_start:w_start + w]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, affine=affine)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rot90(x, k, [2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_85": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, num_bands]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_104": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images.reshape([1, batch_size * num_channels, height, width])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(input=images, pad=[p, p, p, p], mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=images, weight=Hz_prime.unsqueeze(2), groups=batch_size * num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=images, weight=Hz_prime.unsqueeze(3), groups=batch_size * num_channels)",
                            "Call"
                        ],
                        [
                            "images.reshape([batch_size, num_channels, height, width])",
                            "Call"
                        ],
                        [
                            "images.reshape([batch_size, num_channels, height * width])",
                            "Call"
                        ],
                        [
                            "C[:, :3, :3] @ images + C[:, :3, 3:]",
                            "BinOp"
                        ],
                        [
                            "images.reshape([batch_size, num_channels, height, width])",
                            "Call"
                        ],
                        [
                            "images * C[:, :, :3].sum(dim=2, keepdims=True) + C[:, :, 3:]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(input=images, pad=[mx0, mx1, my0, my1], mode='reflect')",
                            "Call"
                        ],
                        [
                            "upfirdn2d.upsample2d(x=images, f=Hz_geom, up=2)",
                            "Call"
                        ],
                        [
                            "grid_sample_gradfix.grid_sample(images, grid)",
                            "Call"
                        ],
                        [
                            "upfirdn2d.downsample2d(x=images, f=Hz_geom, down=2, padding=-Hz_pad * 2, flip_filter=True)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[p, p, p, p]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_113": {
                "variable": {
                    "value": "I_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "eye_157": {
                "variable": {
                    "value": "I_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randint_290": {
                "variable": {
                    "value": "translation_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_291": {
                "variable": {
                    "value": "translation_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_y",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_292": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(x.size(2), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_297": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + translation_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_298": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + translation_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_299": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, affine=affine)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rot90(x, k, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 1, 1, 1, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_305": {
                "variable": {
                    "value": "translation_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_306": {
                "variable": {
                    "value": "translation_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_y",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_309": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(x.size(2), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_314": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + translation_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_315": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + translation_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_316": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, affine=affine)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rot90(x, k, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 1, 1, 1, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_323": {
                "variable": {
                    "value": "translation_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_x",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_324": {
                "variable": {
                    "value": "translation_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "-shift_y",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "high": {
                    "value": "shift_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_325": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(x.size(2), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_330": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + translation_x + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_331": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + translation_y + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_332": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, affine=affine)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rot90(x, k, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[1, 1, 1, 1, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_490": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_491": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_492": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_497": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_498": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_499": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_533": {
                "variable": {
                    "value": "rand_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp2_87": {
                "variable": {
                    "value": "t_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn([batch_size], device=device) * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_88": {
                "variable": {
                    "value": "t_i",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([batch_size], device=device) < ratio * band_strength",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 1)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < ratio * band_strength, t_i, torch.ones_like(t_i))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(t_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_91": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, num_bands]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "where_120": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([batch_size], device=device) < 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.rand([batch_size], device=device) * 2 - 1) * np.pi * 1",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.5, theta, torch.zeros_like(theta))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_162": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand([batch_size], device=device) * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_163": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([batch_size], device=device) < 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor(torch.rand([batch_size], device=device) * 2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 1, i, torch.zeros_like(i))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp2_190": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn([batch_size], device=device) * 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_191": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([batch_size], device=device) < 0.3",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ],
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp2_207": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn([batch_size], device=device) * 0.2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_208": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([batch_size], device=device) < 0.3",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ],
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.ones_like(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_224": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.rand([batch_size, 1], device=device) < 0.3",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones([batch_size, num_bands], device=device)",
                            "Call"
                        ],
                        [
                            "t / (expected_power * t.square()).sum(dim=-1, keepdims=True).sqrt()",
                            "BinOp"
                        ],
                        [
                            "torch.randn([batch_size, 2], device=device) * 0.125",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.rand([batch_size, 1], device=device) < 0.3, t, torch.zeros_like(t))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros_like(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_250": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "images.reshape([1, batch_size * num_channels, height, width])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(input=images, pad=[p, p, p, p], mode='reflect')",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=images, weight=Hz_prime.unsqueeze(2), groups=batch_size * num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=images, weight=Hz_prime.unsqueeze(3), groups=batch_size * num_channels)",
                            "Call"
                        ],
                        [
                            "images.reshape([batch_size, num_channels, height, width])",
                            "Call"
                        ],
                        [
                            "images.reshape([batch_size, num_channels, height * width])",
                            "Call"
                        ],
                        [
                            "C[:, :3, :3] @ images + C[:, :3, 3:]",
                            "BinOp"
                        ],
                        [
                            "images.reshape([batch_size, num_channels, height, width])",
                            "Call"
                        ],
                        [
                            "images * C[:, :, :3].sum(dim=2, keepdims=True) + C[:, :, 3:]",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.pad(input=images, pad=[mx0, mx1, my0, my1], mode='reflect')",
                            "Call"
                        ],
                        [
                            "upfirdn2d.upsample2d(x=images, f=Hz_geom, up=2)",
                            "Call"
                        ],
                        [
                            "grid_sample_gradfix.grid_sample(images, grid)",
                            "Call"
                        ],
                        [
                            "upfirdn2d.downsample2d(x=images, f=Hz_geom, down=2, padding=-Hz_pad * 2, flip_filter=True)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[mx0, mx1, my0, my1]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_261": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "G_inv[:, :2, :]",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "I_3",
                            "Name"
                        ],
                        [
                            "G_inv @ scale2d_inv(1 - 2 * i, 1)",
                            "BinOp"
                        ],
                        [
                            "G_inv @ scale2d_inv(s, s)",
                            "BinOp"
                        ],
                        [
                            "G_inv @ scale2d_inv(s, 1 / s)",
                            "BinOp"
                        ],
                        [
                            "G_inv @ translate2d_inv(t[:, 0] * width, t[:, 1] * height)",
                            "BinOp"
                        ],
                        [
                            "translate2d((mx0 - mx1) / 2, (my0 - my1) / 2) @ G_inv",
                            "BinOp"
                        ],
                        [
                            "scale2d(2, 2, device=device) @ G_inv @ scale2d_inv(2, 2, device=device)",
                            "BinOp"
                        ],
                        [
                            "translate2d(-0.5, -0.5, device=device) @ G_inv @ translate2d_inv(-0.5, -0.5, device=device)",
                            "BinOp"
                        ],
                        [
                            "scale2d(2 / images.shape[3], 2 / images.shape[2], device=device) @ G_inv @ scale2d_inv(2 / shape[3], 2 / shape[2], device=device)",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[batch_size, num_channels, (height + Hz_pad * 2) * 2, (width + Hz_pad * 2) * 2]",
                            "List"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_340": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_341": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_342": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_347": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_348": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_351": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_366": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_367": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_368": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_373": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_374": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_377": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_392": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_393": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_394": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_399": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_400": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_403": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_418": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_419": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_420": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_425": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_426": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_429": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_444": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_445": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_446": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_451": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_452": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_455": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_464": {
                "variable": {
                    "value": "offset_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(2) + (1 - cutout_size[0] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_465": {
                "variable": {
                    "value": "offset_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "x.size(3) + (1 - cutout_size[1] % 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "[x.size(0), 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_466": {
                "variable": {
                    "value": "(grid_batch, grid_x, grid_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.arange(x.size(0), dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.arange(cutout_size[0], dtype=torch.long, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_471": {
                "variable": {
                    "value": "grid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_x + offset_x - cutout_size[0] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(2) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_472": {
                "variable": {
                    "value": "grid_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid_y + offset_y - cutout_size[1] // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "x.size(3) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_475": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rot90_576": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "f(x, affine=affine)",
                            "Call"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x + (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) - 0.5)",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) * 2) + x_mean",
                            "BinOp"
                        ],
                        [
                            "(x - x_mean) * (torch.rand(x.size(0), 1, 1, 1, dtype=x.dtype, device=x.device) + 0.5) + x_mean",
                            "BinOp"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x_pad.permute(0, 2, 3, 1).contiguous()[grid_batch, grid_x, grid_y].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "x * mask.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.rot90(x, k, [2, 3])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "random.randint(1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_293": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_294": {
                "start": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_295": {
                "start": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_310": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_311": {
                "start": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_312": {
                "start": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_326": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_327": {
                "start": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_328": {
                "start": {
                    "value": "x.size(3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_493": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_494": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_495": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_67": {
                "*size": {
                    "value": "[b, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "t_i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 1)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < ratio * band_strength, t_i, torch.ones_like(t_i))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_120": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.rand([batch_size], device=device) * 2 - 1) * np.pi * 1",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.5, theta, torch.zeros_like(theta))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_163": {
                "input": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.floor(torch.rand([batch_size], device=device) * 2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 1, i, torch.zeros_like(i))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_191": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ],
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_208": {
                "input": {
                    "value": "s",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ],
                        [
                            "torch.exp2(torch.randn([batch_size], device=device) * 0.2)",
                            "Call"
                        ],
                        [
                            "torch.where(torch.rand([batch_size], device=device) < 0.3, s, torch.ones_like(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_223": {
                "*size": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_224": {
                "input": {
                    "value": "t",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ones([batch_size, num_bands], device=device)",
                            "Call"
                        ],
                        [
                            "t / (expected_power * t.square()).sum(dim=-1, keepdims=True).sqrt()",
                            "BinOp"
                        ],
                        [
                            "torch.randn([batch_size, 2], device=device) * 0.125",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.rand([batch_size, 1], device=device) < 0.3, t, torch.zeros_like(t))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "[-margin, margin]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_243": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_272": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_343": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_344": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_345": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_369": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_370": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_371": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_395": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_396": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_397": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_421": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_422": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_423": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_447": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_448": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_449": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_467": {
                "start": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_468": {
                "start": {
                    "value": "cutout_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_469": {
                "start": {
                    "value": "cutout_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_87": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_88": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_120": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_162": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_163": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_190": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_191": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_207": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_208": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_224": {
                "*size": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "rand_278": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_119": {
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ],
                        [
                            "images.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataParallel_99": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "gen_net.to('cuda:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_121": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.load_path",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_85": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_utils/custom_ops.py": {
        "torch": {
            "load_107": {
                "name": {
                    "value": "module_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "build_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.utils.cpp_extension._get_build_directory(module_name, verbose=verbose_build)",
                            "Call"
                        ]
                    ]
                },
                "verbose": {
                    "value": "verbose_build",
                    "type": "Name",
                    "possible_values": [
                        [
                            "verbosity == 'full'",
                            "Compare"
                        ]
                    ]
                },
                "sources": {
                    "value": "digest_sources",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[os.path.join(digest_build_dir, os.path.basename(x)) for x in sources]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "load_110": {
                "name": {
                    "value": "module_name",
                    "type": "Variable",
                    "possible_values": []
                },
                "verbose": {
                    "value": "verbose_build",
                    "type": "Name",
                    "possible_values": [
                        [
                            "verbosity == 'full'",
                            "Compare"
                        ]
                    ]
                },
                "sources": {
                    "value": "sources",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torch_utils/misc.py": {
        "torch": {}
    },
    "torch_utils/ops/bias_act.py": {
        "torch": {
            "empty_39": {
                "variable": {
                    "value": "_null_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_25": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_26": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "alpha",
                    "type": "Call",
                    "possible_values": [
                        [
                            "float(alpha if alpha is not None else spec.def_alpha)",
                            "Call"
                        ],
                        [
                            "float(alpha)",
                            "Call"
                        ],
                        [
                            "float(alpha if alpha is not None else spec.def_alpha)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_27": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_28": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "elu_29": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "selu_30": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_31": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_32": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "spec.func(x, alpha=alpha)",
                            "Call"
                        ],
                        [
                            "x * gain",
                            "BinOp"
                        ],
                        [
                            "x.clamp(-clamp, clamp)",
                            "Call"
                        ],
                        [
                            "x + b.reshape([-1 if i == dim else 1 for i in range(x.ndim)])",
                            "BinOp"
                        ],
                        [
                            "x.contiguous(memory_format=ctx.memory_format)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torch_utils/ops/conv2d_gradfix.py": {
        "torch": {
            "conv2d_38": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "_tuple_of_ints(stride, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "_tuple_of_ints(padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "_tuple_of_ints(dilation, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_43": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "_tuple_of_ints(stride, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "_tuple_of_ints(padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_tuple_of_ints(output_padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "_tuple_of_ints(dilation, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_114": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_tuple_of_ints(output_padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "torch_utils/ops/conv2d_resample.py": {
        "torch": {}
    },
    "torch_utils/ops/fma.py": {
        "torch": {
            "addcmul_23": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "torch_utils/ops/grid_sample_gradfix.py": {
        "torch": {
            "grid_sample_30": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grid_sample_49": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "torch_utils/ops/upfirdn2d.py": {
        "torch": {
            "as_tensor_96": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "torch.as_tensor(f, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "f[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "f.ger(f)",
                            "Call"
                        ],
                        [
                            "f / f.sum()",
                            "BinOp"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(device=device)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ],
                        [
                            "f * gain ** (f.ndim / 2)",
                            "BinOp"
                        ],
                        [
                            "f.to(x.dtype)",
                            "Call"
                        ],
                        [
                            "f.flip(list(range(f.ndim)))",
                            "Call"
                        ],
                        [
                            "f[np.newaxis, np.newaxis].repeat([num_channels, 1] + [1] * f.ndim)",
                            "Call"
                        ],
                        [
                            "torch.ones([1, 1], dtype=torch.float32, device=x.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_185": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, upx - 1, 0, 0, 0, upy - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_189": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.reshape([batch_size, num_channels, in_height, 1, in_width, 1])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [0, upx - 1, 0, 0, 0, upy - 1])",
                            "Call"
                        ],
                        [
                            "x.reshape([batch_size, num_channels, in_height * upy, in_width * upx])",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.pad(x, [max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)])",
                            "Call"
                        ],
                        [
                            "x[:, :, max(-pady0, 0):x.shape[2] - max(-pady1, 0), max(-padx0, 0):x.shape[3] - max(-padx1, 0)]",
                            "Subscript"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f, groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(2), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "conv2d_gradfix.conv2d(input=x, weight=f.unsqueeze(3), groups=num_channels)",
                            "Call"
                        ],
                        [
                            "x[:, :, ::downy, ::downx]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[max(padx0, 0), max(padx1, 0), max(pady0, 0), max(pady1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_72": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_175": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_233": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torch_utils/training_stats.py": {
        "torch": {
            "as_tensor_82": {
                "variable": {
                    "value": "elems",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_87": {
                "variable": {
                    "value": "moments",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones_like(elems).sum(), elems.sum(), elems.square().sum()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_252": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "deltas",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(deltas)",
                            "Call"
                        ],
                        [
                            "deltas.cpu()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_97": {
                "variable": {
                    "value": "_counters[name][device]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "moments",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack([torch.ones_like(elems).sum(), elems.sum(), elems.square().sum()])",
                            "Call"
                        ],
                        [
                            "moments.to(_counter_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_247": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moments.device",
                            "Attribute"
                        ],
                        [
                            "_sync_device if _sync_device is not None else torch.device('cpu')",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "self._moments[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "device_245": {
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "_cumulative[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "ones_like_88": {
                "input": {
                    "value": "elems",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(value)",
                            "Call"
                        ],
                        [
                            "elems.detach().flatten().to(_reduce_dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "self._cumulative[name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_num_moments]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_counter_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "zeros_like_250": {
                "input": {
                    "value": "counter",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_counters[name].values()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train_derived.py": {
        "torch": {
            "device_count_55": {
                "variable": {
                    "value": "ngpus_per_node",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_155": {
                "variable": {
                    "value": "gen_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, gen_net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "dis_optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, dis_net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_204": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.load_path)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "loc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda:{}'.format(args.gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_40": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DistributedDataParallel_134": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "gen_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('models_search.' + args.gen_model + '.Generator')(args=args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(gen_net, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(gen_net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(gen_net).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_135": {
                "variable": {
                    "value": "dis_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('models_search.' + args.dis_model + '.Discriminator')(args=args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(dis_net, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(dis_net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(dis_net).cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.gpu]",
                    "type": "List",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_141": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "gen_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('models_search.' + args.gen_model + '.Generator')(args=args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(gen_net, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(gen_net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(gen_net).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_142": {
                "variable": {
                    "value": "dis_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('models_search.' + args.dis_model + '.Discriminator')(args=args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(dis_net, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(dis_net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(dis_net).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_148": {
                "variable": {
                    "value": "gen_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "gen_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('models_search.' + args.gen_model + '.Generator')(args=args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(gen_net, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(gen_net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(gen_net).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_149": {
                "variable": {
                    "value": "dis_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "dis_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "eval('models_search.' + args.dis_model + '.Discriminator')(args=args)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(dis_net, device_ids=[args.gpu], find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(dis_net)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(dis_net).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_118": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_144": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/inception.py": {
        "torch": {
            "ModuleList_76": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_207": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_236": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_270": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_241": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_275": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_121": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/inception_model.py": {
        "torch": {
            "ModuleList_76": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_206": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_235": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_265": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_269": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_305": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_274": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_309": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_88": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_97": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_121": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/torch_fid_score.py": {
        "torch": {
            "eye_72": {
                "variable": {
                    "value": "I",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_73": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "m": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_232": {
                "variable": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "act",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_activations(gen_net, model, batch_size, dims, cuda, verbose)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "m",
                    "type": "Call",
                    "possible_values": [
                        [
                            "m.view(1, -1)",
                            "Call"
                        ],
                        [
                            "m.t()",
                            "Call"
                        ],
                        [
                            "m - torch.mean(m, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_176": {
                "tensors": {
                    "value": "pred_arr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pred_arr + [pred.view(batch_size, -1)]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_78": {
                "input": {
                    "value": "normA",
                    "type": "Name",
                    "possible_values": [
                        [
                            "A.mul(A).sum(dim=1).sum(dim=1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_293": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_168": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(images.to('cuda:0'))[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "trace_207": {
                "input": {
                    "value": "sigma1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "trace_208": {
                "input": {
                    "value": "covmean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sqrt_newton_schulz(sigma1.mm(sigma2).unsqueeze(0), 50).squeeze()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_284": {
                "data": {
                    "value": "m2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_285": {
                "data": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "no_grad_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_69": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(tensor, dim=0)",
                            "Call"
                        ],
                        [
                            "tensor.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, tensor, tensor), 0)",
                            "Call"
                        ],
                        [
                            "tensor.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, tensor, tensor), 1)",
                            "Call"
                        ],
                        [
                            "tensor.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, tensor, tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, filename)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, tensor, tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "states",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'checkpoint_best.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_58": {
                "obj": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.stack(tensor, dim=0)",
                            "Call"
                        ],
                        [
                            "tensor.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, tensor, tensor), 0)",
                            "Call"
                        ],
                        [
                            "tensor.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((tensor, tensor, tensor), 1)",
                            "Call"
                        ],
                        [
                            "tensor.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_59": {
                "obj": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Name"
                        ]
                    ]
                }
            }
        }
    }
}