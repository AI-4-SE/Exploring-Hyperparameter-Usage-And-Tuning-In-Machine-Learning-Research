{
    "pbt/exploration/models/config_tree/nodes/float.py": {
        "sklearn": {
            "KernelDensity_15": {
                "variable": {
                    "value": "self.kde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "(high - low) / width",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pbt/exploration/models/config_tree/nodes/integer.py": {
        "sklearn": {
            "KernelDensity_11": {
                "variable": {
                    "value": "self.kde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bandwidth": {
                    "value": "(high - low) / width",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bo-mbexp.py": {
        "tensorflow": {
            "set_random_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/config/cartpole.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "self.SESS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_47": {
                "values": {
                    "value": "[tf.sin(obs[:, 1:2]), tf.cos(obs[:, 1:2]), obs[:, :1], obs[:, 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_105": {
                "values": {
                    "value": "[x0 - 0.6 * tf.sin(theta), -0.6 * tf.cos(theta)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_64": {
                "x": {
                    "value": "-tf.reduce_sum(tf.square(CartpoleConfigModule._get_ee_pos(obs, are_tensors=True) - np.array([0.0, 0.6])), axis=1) / 0.6 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_73": {
                "input_tensor": {
                    "value": "tf.square(acs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_47": {
                "x": {
                    "value": "obs[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_47": {
                "x": {
                    "value": "obs[:, 1:2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_73": {
                "x": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_105": {
                "x": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_64": {
                "input_tensor": {
                    "value": "tf.square(CartpoleConfigModule._get_ee_pos(obs, are_tensors=True) - np.array([0.0, 0.6]))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_105": {
                "x": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_65": {
                "x": {
                    "value": "CartpoleConfigModule._get_ee_pos(obs, are_tensors=True) - np.array([0.0, 0.6])",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/config/halfcheetah_v3.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "self.SESS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_47": {
                "values": {
                    "value": "[obs[:, 1:2], tf.sin(obs[:, 2:3]), tf.cos(obs[:, 2:3]), obs[:, 3:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_54": {
                "values": {
                    "value": "[pred[:, :1], obs[:, 1:] + pred[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_69": {
                "input_tensor": {
                    "value": "tf.square(acs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_47": {
                "x": {
                    "value": "obs[:, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cos_47": {
                "x": {
                    "value": "obs[:, 2:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/config/hopper.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "self.SESS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_51": {
                "values": {
                    "value": "[pred[:, :1], obs[:, 1:] + pred[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_77": {
                "input_tensor": {
                    "value": "tf.square(acs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_77": {
                "x": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/config/pusher.py": {
        "tensorflow": {
            "ConfigProto_26": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_28": {
                "variable": {
                    "value": "self.SESS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "variable": {
                    "value": "tip_obj_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(tip_pos - obj_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "variable": {
                    "value": "obj_goal_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(goal_pos - obj_pos)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_59": {
                "x": {
                    "value": "tip_pos - obj_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_60": {
                "x": {
                    "value": "goal_pos - obj_pos",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "tf.square(acs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_68": {
                "x": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/config/reacher.py": {
        "tensorflow": {
            "ConfigProto_27": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_29": {
                "variable": {
                    "value": "self.SESS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.ENV.goal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "rot_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.cos(theta2) * tf.cos(theta1), tf.cos(theta2) * tf.sin(theta1), -tf.sin(theta2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "rot_perp_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[-tf.sin(theta1), tf.cos(theta1), tf.zeros(tf.shape(theta1))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "cur_end",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[0.1 * tf.cos(theta1) + 0.4 * tf.cos(theta1) * tf.cos(theta2), 0.1 * tf.sin(theta1) + 0.4 * tf.sin(theta1) * tf.cos(theta2) - 0.188, -0.4 * tf.sin(theta2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_63": {
                "input_tensor": {
                    "value": "tf.square(ReacherConfigModule.get_ee_pos(obs, are_tensors=True) - self.goal)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_114": {
                "variable": {
                    "value": "perp_all_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "rot_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.cos(theta2) * tf.cos(theta1), tf.cos(theta2) * tf.sin(theta1), -tf.sin(theta2)], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.cos(theta2) * np.cos(theta1), np.cos(theta2) * np.sin(theta1), -np.sin(theta2)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rot_perp_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([-tf.sin(theta1), tf.cos(theta1), tf.zeros(tf.shape(theta1))], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([-np.sin(theta1), np.cos(theta1), np.zeros(theta1.shape)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_119": {
                "variable": {
                    "value": "new_rot_perp_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "new_rot_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + y + z",
                            "BinOp"
                        ],
                        [
                            "x + y + z",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "rot_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.cos(theta2) * tf.cos(theta1), tf.cos(theta2) * tf.sin(theta1), -tf.sin(theta2)], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.cos(theta2) * np.cos(theta1), np.cos(theta2) * np.sin(theta1), -np.sin(theta2)], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_120": {
                "variable": {
                    "value": "new_rot_perp_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(tf.norm(new_rot_perp_axis, axis=1), 1e-30)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "rot_perp_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([-tf.sin(theta1), tf.cos(theta1), tf.zeros(tf.shape(theta1))], axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([-np.sin(theta1), np.cos(theta1), np.zeros(theta1.shape)], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "new_rot_perp_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cross(new_rot_axis, rot_axis)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(tf.norm(new_rot_perp_axis, axis=1), 1e-30), rot_perp_axis, new_rot_perp_axis)",
                            "Call"
                        ],
                        [
                            "new_rot_perp_axis / np.linalg.norm(new_rot_perp_axis, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "np.cross(new_rot_axis, rot_axis)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_63": {
                "x": {
                    "value": "ReacherConfigModule.get_ee_pos(obs, are_tensors=True) - self.goal",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_70": {
                "input_tensor": {
                    "value": "tf.square(acs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_122": {
                "tensor": {
                    "value": "new_rot_perp_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cross(new_rot_axis, rot_axis)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(tf.norm(new_rot_perp_axis, axis=1), 1e-30), rot_perp_axis, new_rot_perp_axis)",
                            "Call"
                        ],
                        [
                            "new_rot_perp_axis / np.linalg.norm(new_rot_perp_axis, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "np.cross(new_rot_axis, rot_axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "square_70": {
                "x": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_106": {
                "x": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_106": {
                "shape": {
                    "value": "tf.shape(theta1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_115": {
                "x": {
                    "value": "hinge",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "less_120": {
                "x": {
                    "value": "tf.norm(new_rot_perp_axis, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-30",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cos_104": {
                "x": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_104": {
                "x": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_106": {
                "x": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_110": {
                "x": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_116": {
                "x": {
                    "value": "roll",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_117": {
                "x": {
                    "value": "roll",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_120": {
                "tensor": {
                    "value": "new_rot_perp_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cross(new_rot_axis, rot_axis)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.less(tf.norm(new_rot_perp_axis, axis=1), 1e-30), rot_perp_axis, new_rot_perp_axis)",
                            "Call"
                        ],
                        [
                            "new_rot_perp_axis / np.linalg.norm(new_rot_perp_axis, axis=1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "np.cross(new_rot_axis, rot_axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cos_108": {
                "x": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_117": {
                "x": {
                    "value": "hinge",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_109": {
                "x": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cos_109": {
                "x": {
                    "value": "theta2",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/config/template.py": {
        "tensorflow": {
            "ConfigProto_23": {
                "variable": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_25": {
                "variable": {
                    "value": "self.SESS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "cfg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dmbrl/controllers/MPC.py": {
        "tensorflow": {
            "zeros_325": {
                "variable": {
                    "value": "init_costs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[nopt, self.npart]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(ac_seqs, [-1, self.plan_hor, self.dU])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.transpose(ac_seqs, [1, 0, 2])[:, :, None], [1, 1, self.npart, 1]), [self.plan_hor, -1, self.dU])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.plan_hor, self.dU]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "variable": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(tf.transpose(ac_seqs, [1, 0, 2])[:, :, None], [1, 1, self.npart, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.plan_hor, -1, self.dU]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_331": {
                "variable": {
                    "value": "init_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sy_cur_obs[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[nopt * self.npart, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_139": {
                "variable": {
                    "value": "self.sy_cur_obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(self.dO)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "self.ac_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.plan_hor * self.dU]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_349": {
                "variable": {
                    "value": "(_, costs, _, pred_trajs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "continue_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "iteration",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[t, init_costs, init_obs, pred_trajs]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[t.get_shape(), init_costs.get_shape(), init_obs.get_shape(), tf.TensorShape([None, None, self.dO])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_357": {
                "variable": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_358": {
                "variable": {
                    "value": "pred_trajs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pred_trajs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_obs[None]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(pred_trajs, [self.plan_hor + 1, -1, self.npart, self.dO])",
                            "Call"
                        ],
                        [
                            "tf.concat([pred_trajs, next_obs[None]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.plan_hor + 1, -1, self.npart, self.dO]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "while_loop_369": {
                "variable": {
                    "value": "(_, costs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "continue_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "iteration",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[t, init_costs, init_obs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_396": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[proc_obs, acs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_431": {
                "tensor": {
                    "value": "tf.transpose(tf.reshape(mat, [-1, self.model.num_nets, self.npart // self.model.num_nets, dim]), [1, 0, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.model.num_nets, -1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_441": {
                "tensor": {
                    "value": "tf.transpose(tf.reshape(ts_fmt_arr, [self.model.num_nets, -1, self.npart // self.model.num_nets, dim]), [1, 0, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_324": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_327": {
                "input": {
                    "value": "tf.transpose(ac_seqs, [1, 0, 2])[:, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.npart, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "less_334": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "self.plan_hor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_342": {
                "variable": {
                    "value": "delta_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.obs_cost_fn(next_obs) + self.ac_cost_fn(cur_acs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.npart]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_346": {
                "variable": {
                    "value": "pred_trajs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[pred_trajs, next_obs[None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_364": {
                "variable": {
                    "value": "delta_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.obs_cost_fn(next_obs) + self.ac_cost_fn(cur_acs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.npart]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_374": {
                "input_tensor": {
                    "value": "tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_383": {
                "variable": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_preproc(obs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, self.npart, proc_obs.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(proc_obs, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, proc_obs.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.npart, proc_obs.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_389": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tmp, sort_idxs[:, :, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_390": {
                "variable": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_preproc(obs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, self.npart, proc_obs.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(proc_obs, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, proc_obs.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tmp, sort_idxs[:, :, None]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tmp, sort_idxs[:, :, None]], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_391": {
                "variable": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_preproc(obs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, self.npart, proc_obs.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(proc_obs, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, proc_obs.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, proc_obs.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_416": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.random_normal(shape=tf.shape(mean), mean=0, stddev=1) * tf.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "mean",
                            "variable"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, model_out_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples, [-1, model_out_dim])",
                            "Call"
                        ],
                        [
                            "self._flatten_to_matrix(predictions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, predictions.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(predictions, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, predictions.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.npart, predictions.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_421": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tmp, sort_idxs[:, :, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_422": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.random_normal(shape=tf.shape(mean), mean=0, stddev=1) * tf.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "mean",
                            "variable"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, model_out_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples, [-1, model_out_dim])",
                            "Call"
                        ],
                        [
                            "self._flatten_to_matrix(predictions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, predictions.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(predictions, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, predictions.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tmp, sort_idxs[:, :, None]], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([tmp, sort_idxs[:, :, None]], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.random_normal(shape=tf.shape(mean), mean=0, stddev=1) * tf.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "mean",
                            "variable"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, model_out_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples, [-1, model_out_dim])",
                            "Call"
                        ],
                        [
                            "self._flatten_to_matrix(predictions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, predictions.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(predictions, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, predictions.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, predictions.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_432": {
                "a": {
                    "value": "tf.reshape(mat, [-1, self.model.num_nets, self.npart // self.model.num_nets, dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_442": {
                "a": {
                    "value": "tf.reshape(ts_fmt_arr, [self.model.num_nets, -1, self.npart // self.model.num_nets, dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variables_initializer_143": {
                "var_list": {
                    "value": "[self.sy_cur_obs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_324": {
                "input": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(ac_seqs, [-1, self.plan_hor, self.dU])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.transpose(ac_seqs, [1, 0, 2])[:, :, None], [1, 1, self.npart, 1]), [self.plan_hor, -1, self.dU])",
                            "Call"
                        ]
                    ]
                }
            },
            "where_357": {
                "condition": {
                    "value": "tf.is_nan(costs)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "1000000.0 * tf.ones_like(costs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_374": {
                "condition": {
                    "value": "tf.is_nan(costs)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "1000000.0 * tf.ones_like(costs)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_403": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.random_normal(shape=tf.shape(mean), mean=0, stddev=1) * tf.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "mean",
                            "variable"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, model_out_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples, [-1, model_out_dim])",
                            "Call"
                        ],
                        [
                            "self._flatten_to_matrix(predictions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, predictions.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(predictions, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, predictions.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.npart, model_out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_404": {
                "variable": {
                    "value": "prediction_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.random_normal(shape=tf.shape(mean), mean=0, stddev=1) * tf.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "mean",
                            "variable"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, model_out_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples, [-1, model_out_dim])",
                            "Call"
                        ],
                        [
                            "self._flatten_to_matrix(predictions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, predictions.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(predictions, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, predictions.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_405": {
                "variable": {
                    "value": "prediction_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(predictions - prediction_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_408": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction_mean + z * tf.sqrt(prediction_var)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, model_out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_433": {
                "tensor": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.model.num_nets, self.npart // self.model.num_nets, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "tensor": {
                    "value": "ts_fmt_arr",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.model.num_nets, -1, self.npart // self.model.num_nets, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "a": {
                    "value": "ac_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(ac_seqs, [-1, self.plan_hor, self.dU])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.tile(tf.transpose(ac_seqs, [1, 0, 2])[:, :, None], [1, 1, self.npart, 1]), [self.plan_hor, -1, self.dU])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_nan_357": {
                "x": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_374": {
                "x": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "top_k_384": {
                "input": {
                    "value": "tf.random_uniform([tf.shape(proc_obs)[0], self.npart])",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "self.npart",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_388": {
                "input": {
                    "value": "tf.range(tf.shape(proc_obs)[0])[:, None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.npart]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_417": {
                "input": {
                    "value": "-sort_idxs",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.npart",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_352": {
                "dims": {
                    "value": "[None, None, self.dO]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_357": {
                "input": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_374": {
                "input": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.where(tf.is_nan(costs), 1000000.0 * tf.ones_like(costs), costs), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_399": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_405": {
                "x": {
                    "value": "predictions - prediction_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_406": {
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean + tf.random_normal(shape=tf.shape(mean), mean=0, stddev=1) * tf.sqrt(var)",
                            "BinOp"
                        ],
                        [
                            "mean",
                            "variable"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, model_out_dim])",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples, [-1, model_out_dim])",
                            "Call"
                        ],
                        [
                            "self._flatten_to_matrix(predictions)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, self.npart, predictions.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(predictions, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(predictions, [-1, predictions.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_407": {
                "x": {
                    "value": "prediction_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(predictions - prediction_mean), axis=1, keep_dims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_399": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_385": {
                "input": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_preproc(obs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, self.npart, proc_obs.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(proc_obs, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, proc_obs.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_388": {
                "input": {
                    "value": "proc_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.obs_preproc(obs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, self.npart, proc_obs.get_shape()[-1]])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(proc_obs, idxs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(proc_obs, [-1, proc_obs.get_shape()[-1]])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dmbrl/misc/MBwBOExp.py": {
        "tensorflow": {}
    },
    "dmbrl/misc/MBwPBTBTExp.py": {
        "tensorflow": {}
    },
    "dmbrl/misc/MBwPBTExp.py": {
        "tensorflow": {}
    },
    "dmbrl/misc/optimizers/cem.py": {
        "tensorflow": {
            "minimum_75": {
                "x": {
                    "value": "tf.square(lb_dist / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.square(ub_dist / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_76": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.popsize, self.sol_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * mean + (1 - self.alpha) * new_mean",
                            "BinOp"
                        ],
                        [
                            "self.alpha * mean + (1 - self.alpha) * new_mean",
                            "BinOp"
                        ]
                    ]
                },
                "stddev": {
                    "value": "tf.sqrt(constrained_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_79": {
                "variable": {
                    "value": "(values, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-costs",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "self.num_elites",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_81": {
                "variable": {
                    "value": "(best_val, best_sol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(-values[0], best_val)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : (-values[0], samples[indices[0]])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (best_val, best_sol)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "gather_87": {
                "variable": {
                    "value": "elites",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal([self.popsize, self.sol_dim], mean, tf.sqrt(constrained_var))",
                            "Call"
                        ],
                        [
                            "X.rvs(size=[self.popsize, self.sol_dim]) * np.sqrt(constrained_var) + mean",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_88": {
                "variable": {
                    "value": "new_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "elites",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(samples, indices)",
                            "Call"
                        ],
                        [
                            "samples[np.argsort(costs)][:self.num_elites]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "new_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(elites - new_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_97": {
                "variable": {
                    "value": "(self.num_opt_iters, self.mean, self.var, self.best_val, self.best_sol)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "continue_optimization",
                    "type": "variable",
                    "possible_values": []
                },
                "body": {
                    "value": "iteration",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[0, self.init_mean, self.init_var, float('inf'), self.init_mean]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.init_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sol_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.init_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[sol_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_71": {
                "x": {
                    "value": "tf.less(t, self.max_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reduce_max(var) > self.epsilon",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "CEMSolver",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_71": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t + 1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "self.max_iters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "x": {
                    "value": "constrained_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(tf.minimum(tf.square(lb_dist / 2), tf.square(ub_dist / 2)), var)",
                            "Call"
                        ],
                        [
                            "np.minimum(np.minimum(np.square(lb_dist / 2), np.square(ub_dist / 2)), var)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_82": {
                "x": {
                    "value": "-values[0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "best_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_89": {
                "x": {
                    "value": "elites - new_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_71": {
                "input_tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.alpha * var + (1 - self.alpha) * new_var",
                            "BinOp"
                        ],
                        [
                            "self.alpha * var + (1 - self.alpha) * new_var",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_75": {
                "x": {
                    "value": "ub_dist / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/misc/optimizers/random.py": {
        "tensorflow": {
            "cast_55": {
                "x": {
                    "value": "tf.argmin(costs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmin_55": {
                "input": {
                    "value": "costs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cost_function(solutions)",
                            "Call"
                        ],
                        [
                            "self.cost_function(solutions)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dmbrl/modeling/layers/FC.py": {
        "tensorflow": {
            "get_variable_115": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FC_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.ensemble_size, self.input_dim, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=1 / (2 * np.sqrt(self.input_dim)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "variable": {
                    "value": "self.biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FC_biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.ensemble_size, 1, self.output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_18": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "einsum_69": {
                "equation": {
                    "value": "ij,ajk->aik",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_118": {
                "stddev": {
                    "value": "1 / (2 * np.sqrt(self.input_dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_123": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multiply_127": {
                "x": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_loss(self.weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "a": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "l2_loss_127": {
                "t": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_227": {
                "x": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.l2_loss(self.weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weight_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_loss_227": {
                "t": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/modeling/models/BNN.py": {
        "tensorflow": {
            "exp_535": {
                "variable": {
                    "value": "inv_var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_557": {
                "variable": {
                    "value": "mse_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(mean - targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_574": {
                "variable": {
                    "value": "inv_var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_576": {
                "variable": {
                    "value": "mse_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(mean - targets) * inv_var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_577": {
                "variable": {
                    "value": "var_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_42": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_44": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "self.sy_train_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_nets, None, self.layers[0].get_input_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "training_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "self.sy_train_targ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_nets, None, self.layers[-1].get_output_dim() // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "training_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._compile_losses(self.sy_train_in, self.sy_train_targ, inc_var_loss=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_256": {
                "variable": {
                    "value": "self.sy_pred_in2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layers[0].get_input_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "2D_training_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_261": {
                "variable": {
                    "value": "self.sy_pred_mean2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.sy_pred_mean2d_fac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_265": {
                "variable": {
                    "value": "self.sy_pred_in3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_nets, None, self.layers[0].get_input_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "3D_training_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_434": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "factored_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_538": {
                "input_tensor": {
                    "value": "tf.square(mean - targets) * inv_var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_539": {
                "input_tensor": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_542": {
                "input_tensor": {
                    "value": "tf.square(mean - targets)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_variables_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_222": {
                "variable": {
                    "value": "self.max_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones([1, self.layers[-1].get_output_dim() // 2]) / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "max_log_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_224": {
                "variable": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "-np.ones([1, self.layers[-1].get_output_dim() // 2]) * 10.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "min_log_var",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_244": {
                "inputs": {
                    "value": "self.decays",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_252": {
                "var_list": {
                    "value": "self.optvars + self.nonoptvars + self.optimizer.variables()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_255": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_512": {
                "features": {
                    "value": "self.max_logvar - cur_out[:, :, dim_output // 2:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_513": {
                "features": {
                    "value": "logvar - self.min_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_557": {
                "x": {
                    "value": "mean - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_220": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_262": {
                "input_tensor": {
                    "value": "self.sy_pred_var2d_fac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_263": {
                "input_tensor": {
                    "value": "tf.square(self.sy_pred_mean2d_fac - self.sy_pred_mean2d)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_435": {
                "input_tensor": {
                    "value": "tf.square(factored_mean - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_436": {
                "input_tensor": {
                    "value": "factored_variance",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_518": {
                "x": {
                    "value": "logvar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_logvar - tf.nn.softplus(self.max_logvar - cur_out[:, :, dim_output // 2:])",
                            "BinOp"
                        ],
                        [
                            "self.min_logvar + tf.nn.softplus(logvar - self.min_logvar)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_576": {
                "x": {
                    "value": "mean - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_245": {
                "input_tensor": {
                    "value": "self.min_logvar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_263": {
                "x": {
                    "value": "self.sy_pred_mean2d_fac - self.sy_pred_mean2d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_435": {
                "x": {
                    "value": "factored_mean - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_542": {
                "x": {
                    "value": "mean - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "all_variables_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "'Layer%i' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_538": {
                "x": {
                    "value": "mean - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/modeling/models/NN.py": {
        "tensorflow": {
            "ConfigProto_41": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_43": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "self.sy_train_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_nets, None, self.layers[0].get_input_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "training_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "self.sy_train_targ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_nets, None, self.layers[-1].get_output_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "training_targets",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "variable": {
                    "value": "train_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._compile_losses(self.sy_train_in, self.sy_train_targ)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "self.sy_pred_in2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.layers[0].get_input_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "2D_training_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "variable": {
                    "value": "self.sy_pred_mean2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.sy_pred_mean2d_fac",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "self.sy_pred_var2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.sy_pred_mean2d_fac - self.sy_pred_mean2d)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self.sy_pred_in3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_nets, None, self.layers[0].get_input_dim()]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "3D_training_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_309": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "factored_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._compile_outputs(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_310": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(factored_mean - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_368": {
                "input_tensor": {
                    "value": "tf.square(mean - targets) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_157": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_166": {
                "inputs": {
                    "value": "self.decays",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_172": {
                "var_list": {
                    "value": "self.optvars + self.nonoptvars + self.optimizer.variables()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_175": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_181": {
                "x": {
                    "value": "self.sy_pred_mean2d_fac - self.sy_pred_mean2d",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_310": {
                "x": {
                    "value": "factored_mean - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_368": {
                "x": {
                    "value": "mean - targets",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "'Layer%i' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/modeling/models/TFGP.py": {
        "tensorflow": {
            "cast_110": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_33": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_35": {
                "variable": {
                    "value": "self._sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_112": {
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/modeling/utils/HPO.py": {
        "tensorflow": {
            "reset_default_graph_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dmbrl/modeling/utils/TensorStandardScaler.py": {
        "tensorflow": {
            "get_variable_22": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scaler_mu",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "scaler_std",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "Scaler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_23": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_27": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "eval_schedules.py": {
        "tensorflow": {
            "set_random_seed_41": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reset_default_graph_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pbt-bt-mbexp.py": {
        "tensorflow": {
            "set_random_seed_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pbt-mbexp.py": {
        "tensorflow": {
            "set_random_seed_75": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}