{
    "CAS_scripts/CAS_dataset_vqacp.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "question",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(entry['q_token'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.features[entry['image']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "spatials",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.spatials[entry['image']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_ans_candidates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_77": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(answer['labels'])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels)",
                            "Call"
                        ],
                        [
                            "answer['labels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_78": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.array(answer['scores'], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(scores)",
                            "Call"
                        ],
                        [
                            "answer['scores']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "CAS_scripts/Candidate_Answers_Selector.py": {
        "torch": {
            "topk_5": {
                "variable": {
                    "value": "(prediction_ans_k, top_ans_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_7": {
                "variable": {
                    "value": "one_hots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_5": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_10": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hots * labels",
                            "BinOp"
                        ],
                        [
                            "torch.max(scores, 1)[0].data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "LMH_lxmert_model.py": {
        "torch": {
            "DataParallel_20": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.Linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_64": {
                "input": {
                    "value": "pool_out_reshape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_out.reshape(v.shape[0], self.candi_ans_num, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "LMH_vqa_debias_loss_functions.py": {
        "torch": {
            "binary_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias + log_probs",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_107": {
                "variable": {
                    "value": "bias_lp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias + smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log1p_108": {
                "variable": {
                    "value": "bias_l_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-bias + smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.bias_lin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.bias_lin4lxmert",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_148": {
                "variable": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.bias_lin4lxmert.forward(hidden)",
                            "Call"
                        ],
                        [
                            "F.softplus(factor)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_150": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bias, 1 - bias]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_158": {
                "variable": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([bias, 1 - bias], 2)",
                            "Call"
                        ],
                        [
                            "bias + self.constant_smooth",
                            "BinOp"
                        ],
                        [
                            "bias + soften_factor.unsqueeze(1)",
                            "BinOp"
                        ],
                        [
                            "torch.log(bias)",
                            "Call"
                        ],
                        [
                            "bias * factor.unsqueeze(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_165": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log_prob, log_one_minus_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_12": {
                "input": {
                    "value": "-logits",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_19": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log1p_19": {
                "input": {
                    "value": "torch.exp(-torch.abs(a - b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_95": {
                "variable": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.full((1,), smooth_init, dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.full((1,), smooth_init, dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_155": {
                "variable": {
                    "value": "soften_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_19": {
                "input": {
                    "value": "-torch.abs(a - b)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "input": {
                    "value": "self.smooth_param",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "np.full((1,), smooth_init, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_142": {
                "ndarray": {
                    "value": "np.full((1,), smooth_init, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_19": {
                "input": {
                    "value": "a - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "bias_logprob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias - bias_norm.unsqueeze(2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "QTD_model.py": {
        "torch": {
            "BatchNorm1d_88": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(q)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "SAR_concatenate_dataset_vqacp.py": {
        "torch": {
            "DataLoader_306": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('train', dictionary, dataroot, img_root, ratio=1.0, adaptive=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.trim_collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "top20",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(candi_ans['top20'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "top20_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(candi_ans['top20_scores'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.features[entry['image']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "spatials",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.spatials[entry['image']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "q_a_tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([qa_tokens])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "q_a_tokens_top_20",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_a_tokens_top_20, q_a_tokens_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "SAR_main.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('train', dictionary, opt.dataroot, opt.img_root, ratio=opt.ratio, adaptive=False, opt=opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_92": {
                "variable": {
                    "value": "eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('test', dictionary, opt.dataroot, opt.img_root, ratio=1.0, adaptive=False, opt=opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "opt.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "SAR_replace_dataset_vqacp.py": {
        "torch": {
            "DataLoader_306": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('train', dictionary, dataroot, img_root, ratio=1.0, adaptive=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.trim_collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "top20",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(candi_ans['top20'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "top20_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(candi_ans['top20_scores'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_272": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.features[entry['image']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "spatials",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(self.spatials[entry['image']])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_250": {
                "variable": {
                    "value": "q_a_tokens_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([qa_tokens])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "q_a_tokens_top_20",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q_a_tokens_top_20, q_a_tokens_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "SAR_test.py": {
        "torch": {
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_111": {
                "variable": {
                    "value": "n_device",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "eval_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "VQAFeatureDataset('test', dictionary, opt.dataroot, opt.img_root, ratio=1.0, adaptive=False, opt=opt)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "opt.batch_size * n_device",
                            "BinOp"
                        ],
                        [
                            "v.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "utils.trim_collate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "model_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint_path4test",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_163": {
                "variable": {
                    "value": "model2_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.checkpoint_path4test_QTDmodel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_167": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Model(opt)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "Model(opt)",
                            "Call"
                        ],
                        [
                            "LXM_Model(opt)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_168": {
                "variable": {
                    "value": "model2",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Model2(opt)",
                            "Call"
                        ],
                        [
                            "model2.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model2).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_180": {
                "obj": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'logits/' + model_label + '/logits%d.pth' % opt.s_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "SAR_train.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "cross_entropy_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "topk_19": {
                "variable": {
                    "value": "(prediction_ans_k, top_ans_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(labels, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_27": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "model(qa_text, v, b, epoch, 'train')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, epoch, 'train')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "one_hots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "topk_39": {
                "variable": {
                    "value": "(prediction_ans_k, top_ans_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "one_hots",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*labels.size()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "topk_47": {
                "variable": {
                    "value": "(prediction_ans_k, top_ans_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(a, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_48": {
                "variable": {
                    "value": "neg_top_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(logits_neg, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "top_ans_ind",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "neg_top_k",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_67": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=opt.learning_rate, betas=(0.9, 0.999), eps=1e-08, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[100]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_19": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "model(qa_text, v, b, epoch, 'train')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, epoch, 'train')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a.cuda()",
                            "Call"
                        ],
                        [
                            "a[:, rand_index]",
                            "Subscript"
                        ],
                        [
                            "a.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_33": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.max(logits, 1)[1].data",
                            "Attribute"
                        ],
                        [
                            "model(qa_text, v, b, epoch, 'train')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, epoch, 'train')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ],
                        [
                            "model(qa_text, v, b, 0, 'test')",
                            "Call"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "one_hots * labels",
                            "BinOp"
                        ],
                        [
                            "one_hots * labels",
                            "BinOp"
                        ],
                        [
                            "torch.max(scores, 1)[0].data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_grad_norm__113": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "opt.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "input": {
                    "value": "logits_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(qa_text, v_neg, b_neg, epoch, 'train')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "attention.py": {
        "torch": {
            "softmax_21": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "vq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "vq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_159": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "vq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "joint_repr * gate",
                            "BinOp"
                        ],
                        [
                            "self.linear(logits)",
                            "Call"
                        ],
                        [
                            "self.logits(v, q)",
                            "Call"
                        ],
                        [
                            "self.linear(joint_repr)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "vq",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v, q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "q_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "in_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_151": {
                "in_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_180": {
                "in_features": {
                    "value": "num_hid",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "classifier.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_15": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "in_features": {
                    "value": "hid_dim_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "hid_dim_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "hid_dim_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "hid_dim_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_105": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "comput_score.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "annotations",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "anno_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "osp.join(args.dataroot, '%s_target_count.pth' % args.name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/preprocess_text.py": {
        "torch": {
            "save_208": {
                "obj": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "f": {
                    "value": "cache_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(cache_root, name + '_ans2label.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(cache_root, name + '_label2ans.pkl')",
                            "Call"
                        ],
                        [
                            "os.path.join(cache_root, name + '_target_count.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(cache_root, name + '_target.pkl')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/utils.py": {
        "torch": {
            "from_numpy_198": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_208": {
                "variable": {
                    "value": "arange_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_217": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_135": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_148": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_220": {
                "input": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x2 * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "net_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "[F.pad(x, (0, 0, 0, max_num_boxes - x.size(0))).data for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_217": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_176": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_159": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, max_num_boxes - x.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_176": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "fc.py": {
        "torch": {
            "Sequential_68": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Dropout_66": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_63": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dims[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "language_model.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "ntoken + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "ntoken",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "weight_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load(np_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "(forward_, backward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lxmert_model.py": {
        "torch": {
            "DataParallel_19": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.Linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_196": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_204": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_206": {
                "variable": {
                    "value": "arange_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "mask.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_215": {
                "variable": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_131": {
                "obj": {
                    "value": "model_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'model_state': model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_144": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_218": {
                "input": {
                    "value": "x3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x2 * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_72": {
                "f": {
                    "value": "net_file",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_156": {
                "tensors": {
                    "value": "[F.pad(x, (0, 0, 0, max_num_boxes - x.size(0))).data for x in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_165": {
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_215": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_174": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_156": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, max_num_boxes - x.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}