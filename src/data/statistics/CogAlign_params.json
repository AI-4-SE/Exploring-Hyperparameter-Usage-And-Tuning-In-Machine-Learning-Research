{
    "relation_extraction/test.py": {
        "sklearn": {
            "accuracy_score_15": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "precision_score_16": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'multi'",
                            "Constant"
                        ]
                    ]
                }
            },
            "recall_score_17": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'multi'",
                            "Constant"
                        ]
                    ]
                }
            },
            "f1_score_18": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'multi'",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "run_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_46": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_49": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_58": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "relation_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_52": {
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(embedding_path)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sentiment_analysis/test.py": {
        "sklearn": {
            "accuracy_score_15": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "precision_score_16": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'multi'",
                            "Constant"
                        ]
                    ]
                }
            },
            "recall_score_17": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'multi'",
                            "Constant"
                        ]
                    ]
                }
            },
            "f1_score_18": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_label",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'multi'",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "run_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_44": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_46": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_55": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "sentiment_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_49": {
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(embedding_path)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ner/CogAlign.py": {
        "tensorflow": {
            "get_default_graph_15": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.char_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen * self.maxWordlen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.eye_tfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.eye_nf_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "self.eye_ffd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "self.eye_fpd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.eye_fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.eye_nr_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.eye_rrp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "self.eye_mfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "self.eye_trfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.eye_w2fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "self.eye_w1fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "self.eye_wp1fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "self.eye_wp2fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.eye_w2fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "self.eye_w1fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.eye_wp1fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "self.eye_wp2fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.eeg_t1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.eeg_t2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "self.eeg_a1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.eeg_a2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.eeg_b1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "self.eeg_b2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.eeg_g1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.eeg_g2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.task_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_230": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(feature, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_231": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(feature, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_232": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=self.task_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_262": {
                "variable": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.word_embedding, self.emb_input, name='word_embeddings')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_263": {
                "variable": {
                    "value": "char_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.W_char, self.char_input, name='char_embeddings')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_264": {
                "variable": {
                    "value": "eye_tfd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_tfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_tfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_tfd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_265": {
                "variable": {
                    "value": "eye_nf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_nf_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_nf_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_266": {
                "variable": {
                    "value": "eye_ffd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_ffd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_ffd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_ffd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_267": {
                "variable": {
                    "value": "eye_fpd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_fpd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_fpd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_fpd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_268": {
                "variable": {
                    "value": "eye_fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_269": {
                "variable": {
                    "value": "eye_nr_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_nr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_nr_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_nr_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_270": {
                "variable": {
                    "value": "eye_rrp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_rrp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_rrp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_rrp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_271": {
                "variable": {
                    "value": "eye_mfd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_mfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_mfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_mfd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_272": {
                "variable": {
                    "value": "eye_trfd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_trfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_trfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_trfd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_273": {
                "variable": {
                    "value": "eye_w2fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w2fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w2fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w2fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_274": {
                "variable": {
                    "value": "eye_w1fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w1fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w1fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w1fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_275": {
                "variable": {
                    "value": "eye_wp1fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp1fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp1fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp1fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_276": {
                "variable": {
                    "value": "eye_wp2fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp2fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp2fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp2fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_277": {
                "variable": {
                    "value": "eye_w2fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w2fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w2fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w2fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_278": {
                "variable": {
                    "value": "eye_w1fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w1fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w1fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w1fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_279": {
                "variable": {
                    "value": "eye_wp1fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp1fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp1fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp1fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_280": {
                "variable": {
                    "value": "eye_wp2fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp2fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp2fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp2fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_281": {
                "variable": {
                    "value": "eeg_t1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_t1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_t1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_t1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_282": {
                "variable": {
                    "value": "eeg_t2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_t2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_t2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_283": {
                "variable": {
                    "value": "eeg_a1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_a1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_a1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_284": {
                "variable": {
                    "value": "eeg_a2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_a2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_a2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_285": {
                "variable": {
                    "value": "eeg_b1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_b1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_b1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_286": {
                "variable": {
                    "value": "eeg_b2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_b2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_b2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_287": {
                "variable": {
                    "value": "eeg_g1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_g1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_g1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_288": {
                "variable": {
                    "value": "eeg_g2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_g2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_g2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_323": {
                "variable": {
                    "value": "concat_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, cog_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_332": {
                "variable": {
                    "value": "text_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(bilstm_output, self.num_ner_tags, activation=tf.nn.relu)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_333": {
                "variable": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "text_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.layers.dense(bilstm_output, self.num_ner_tags, activation=tf.nn.relu), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(text_output, self.num_ner_tags, activation=tf.nn.relu), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.maxSentencelen, self.num_ner_tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_337": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-log_likelihood",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_339": {
                "variable": {
                    "value": "text_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.word_embedding, self.emb_input, name='word_embeddings')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_340": {
                "variable": {
                    "value": "char_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.W_char, self.char_input, name='char_embeddings')",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_341": {
                "variable": {
                    "value": "eye_tfd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_tfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_tfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_tfd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_342": {
                "variable": {
                    "value": "eye_nf_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_nf_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_nf_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_343": {
                "variable": {
                    "value": "eye_ffd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_ffd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_ffd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_ffd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_344": {
                "variable": {
                    "value": "eye_fpd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_fpd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_fpd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_fpd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_345": {
                "variable": {
                    "value": "eye_fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_346": {
                "variable": {
                    "value": "eye_nr_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_nr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_nr_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_nr_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_347": {
                "variable": {
                    "value": "eye_rrp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_rrp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_rrp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_rrp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_348": {
                "variable": {
                    "value": "eye_mfd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_mfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_mfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_mfd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_349": {
                "variable": {
                    "value": "eye_trfd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_trfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_trfd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_trfd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_350": {
                "variable": {
                    "value": "eye_w2fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w2fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w2fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w2fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_351": {
                "variable": {
                    "value": "eye_w1fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w1fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w1fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w1fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_352": {
                "variable": {
                    "value": "eye_wp1fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp1fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp1fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp1fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_353": {
                "variable": {
                    "value": "eye_wp2fp_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp2fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp2fp_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp2fp_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_354": {
                "variable": {
                    "value": "eye_w2fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w2fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w2fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w2fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_355": {
                "variable": {
                    "value": "eye_w1fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_w1fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_w1fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_w1fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_356": {
                "variable": {
                    "value": "eye_wp1fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp1fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp1fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp1fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_357": {
                "variable": {
                    "value": "eye_wp2fd_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eye_wp2fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eye_wp2fd_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eye_wp2fd_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_358": {
                "variable": {
                    "value": "eeg_t1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_t1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_t1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_t1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_359": {
                "variable": {
                    "value": "eeg_t2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_t2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_t2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_360": {
                "variable": {
                    "value": "eeg_a1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_a1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_a1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_361": {
                "variable": {
                    "value": "eeg_a2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_a2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_a2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_362": {
                "variable": {
                    "value": "eeg_b1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_b1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_b1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_363": {
                "variable": {
                    "value": "eeg_b2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_b2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_b2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_364": {
                "variable": {
                    "value": "eeg_g1_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_g1_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_g1_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_365": {
                "variable": {
                    "value": "eeg_g2_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_eeg_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.eeg_g2_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "eeg_g2_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_401": {
                "variable": {
                    "value": "cog2text",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input, eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input, eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "text_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_embedding.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_402": {
                "variable": {
                    "value": "share_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.is_text, tf.ones_like(self.is_text))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cog2text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=cog_embedding, units=text_hidden, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_435": {
                "variable": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.text_private_output, self.shared_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_436": {
                "variable": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(text_output, self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_437": {
                "variable": {
                    "value": "text_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(text_output, self.num_ner_tags, activation=tf.nn.relu)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_438": {
                "variable": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "text_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.layers.dense(bilstm_output, self.num_ner_tags, activation=tf.nn.relu), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(text_output, self.num_ner_tags, activation=tf.nn.relu), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.maxSentencelen, self.num_ner_tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_442": {
                "variable": {
                    "value": "self.text_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-log_likelihood",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_444": {
                "variable": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.cog_private_output, self.shared_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_445": {
                "variable": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(cog_output, self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_446": {
                "variable": {
                    "value": "cog_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(cog_output, self.num_ner_tags, activation=tf.nn.relu)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_447": {
                "variable": {
                    "value": "self.cog_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cog_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.layers.dense(cog_output, self.num_ner_tags, activation=tf.nn.relu), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.maxSentencelen, self.num_ner_tags]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_452": {
                "variable": {
                    "value": "self.cog_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-log_likelihood",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "RegisterGradient_11": {
                "op_type": {
                    "value": "grad_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FlipyGradient%d' % self.num_calls",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_94": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.cast(self.word_embed, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_97": {
                "variable": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.char_vocab_size + 1, self.dim_char], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_char",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "self.char_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.char_vocab_size + 1, self.dim_char]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "self.W_eye_tfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_tfd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "self.eye_tfd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "self.W_eye_nf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_nf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_108": {
                "variable": {
                    "value": "self.eye_nf_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "self.W_eye_ffd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_ffd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "self.eye_ffd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.W_eye_fpd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_fpd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "self.eye_fpd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "variable": {
                    "value": "self.W_eye_fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "self.eye_fp_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "variable": {
                    "value": "self.W_eye_nr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_nr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "self.eye_nr_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "variable": {
                    "value": "self.W_eye_rrp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_rrp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "self.eye_rrp_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_137": {
                "variable": {
                    "value": "self.W_eye_mfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_mfd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "self.eye_mfd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_142": {
                "variable": {
                    "value": "self.W_eye_trfd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_trfd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "self.eye_trfd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_147": {
                "variable": {
                    "value": "self.W_eye_w2fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_w2fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "self.eye_w2fp_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "variable": {
                    "value": "self.W_eye_w1fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_w1fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self.eye_w1fp_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "variable": {
                    "value": "self.W_eye_wp1fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_wp1fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_158": {
                "variable": {
                    "value": "self.eye_wp1fp_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_162": {
                "variable": {
                    "value": "self.W_eye_wp2fp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_wp2fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "self.eye_wp2fp_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_167": {
                "variable": {
                    "value": "self.W_eye_w2fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_w2fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "self.eye_w2fd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_172": {
                "variable": {
                    "value": "self.W_eye_w1fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_w1fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "self.eye_w1fd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_177": {
                "variable": {
                    "value": "self.W_eye_wp1fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_wp1fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "self.eye_wp1fd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_182": {
                "variable": {
                    "value": "self.W_eye_wp2fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eye_wp2fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self.eye_wp2fd_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_187": {
                "variable": {
                    "value": "self.W_eeg_t1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_t1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_188": {
                "variable": {
                    "value": "self.eeg_t1_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_193": {
                "variable": {
                    "value": "self.W_eeg_t2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_t2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_194": {
                "variable": {
                    "value": "self.eeg_t2_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_198": {
                "variable": {
                    "value": "self.W_eeg_a1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_a1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "variable": {
                    "value": "self.eeg_a1_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_203": {
                "variable": {
                    "value": "self.W_eeg_a2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_a2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "variable": {
                    "value": "self.eeg_a2_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_208": {
                "variable": {
                    "value": "self.W_eeg_b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "self.eeg_b1_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_213": {
                "variable": {
                    "value": "self.W_eeg_b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "self.eeg_b2_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_218": {
                "variable": {
                    "value": "self.W_eeg_g1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_g1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "self.eeg_g1_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_223": {
                "variable": {
                    "value": "self.W_eeg_g2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.cog_vocab_size + 1, self.dim_cognitive], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_eeg_g2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_224": {
                "variable": {
                    "value": "self.eeg_g2_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.cog_vocab_size + 1, self.dim_cognitive]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_240": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[hidden_state])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_241": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d_in, d_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "text_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(text, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='U', shape=[d_in, d_out], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_244": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(text_T, cog) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_245": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(text_T, cog) + b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_246": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_247": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cog",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_253": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cog.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "features.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_254": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([hidden_state, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_255": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([hidden_state, 1]), name='v')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_256": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_257": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_258": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(features, score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_290": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input, eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_303": {
                "variable": {
                    "value": "W_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_304": {
                "variable": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_305": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.W_char, self.char_input, name='char_embeddings'), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.W_char, self.char_input, name='char_embeddings'), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_conv')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_conv')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_311": {
                "variable": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(char_input, W_conv, stride=1, padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(char_input, W_conv, stride=1, padding='SAME', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool_312": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(conv, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(conv, -1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.maxSentencelen * self.maxWordlen, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.maxWordlen, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_318": {
                "variable": {
                    "value": "self.char_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(expand, ksize=[1, self.maxSentencelen * self.maxWordlen, 1, 1], strides=[1, self.maxWordlen, 1, 1], padding='SAME', name='max_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(expand, ksize=[1, self.maxSentencelen * self.maxWordlen, 1, 1], strides=[1, self.maxWordlen, 1, 1], padding='SAME', name='max_pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.maxSentencelen, self.num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "char_pool_flat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_319": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_input, self.char_pool_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_320": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_325": {
                "variable": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_326": {
                "variable": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_327": {
                "variable": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_328": {
                "variable": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_329": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "concat_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_embedding, cog_embedding], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_331": {
                "variable": {
                    "value": "bilstm_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_367": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input, eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_380": {
                "variable": {
                    "value": "W_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal(filter_shape, stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "W_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_381": {
                "variable": {
                    "value": "b_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[self.num_filters])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_382": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.W_char, self.char_input, name='char_embeddings'), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.W_char, self.char_input, name='char_embeddings'), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_conv')",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.truncated_normal(filter_shape, stddev=0.1), name='W_conv')",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_388": {
                "variable": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(char_input, W_conv, stride=1, padding='SAME', name='conv')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(char_input, W_conv, stride=1, padding='SAME', name='conv')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool_389": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(conv, -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(conv, -1)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, self.maxSentencelen * self.maxWordlen, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, self.maxWordlen, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "max_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_395": {
                "variable": {
                    "value": "self.char_pool_flat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.max_pool(expand, ksize=[1, self.maxSentencelen * self.maxWordlen, 1, 1], strides=[1, self.maxWordlen, 1, 1], padding='SAME', name='max_pool')",
                            "Call"
                        ],
                        [
                            "tf.nn.max_pool(expand, ksize=[1, self.maxSentencelen * self.maxWordlen, 1, 1], strides=[1, self.maxWordlen, 1, 1], padding='SAME', name='max_pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.maxSentencelen, self.num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "char_pool_flat",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_396": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_input, self.char_pool_flat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_397": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_405": {
                "variable": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_406": {
                "variable": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_407": {
                "variable": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_408": {
                "variable": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_409": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "share_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(self.is_text, tf.ones_like(self.is_text)), text_embedding, cog2text)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_411": {
                "variable": {
                    "value": "self.shared_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_415": {
                "variable": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_416": {
                "variable": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_417": {
                "variable": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_418": {
                "variable": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_419": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input, eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input, eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_421": {
                "variable": {
                    "value": "self.cog_private_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_425": {
                "variable": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_426": {
                "variable": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_427": {
                "variable": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_428": {
                "variable": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_430": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_input, self.char_pool_flat], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_embedding, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_432": {
                "variable": {
                    "value": "self.text_private_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_96": {
                "name_or_scope": {
                    "value": "char_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "eye_tfd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "eye_nf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "eye_ffd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "eye_fpd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "eye_fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_126": {
                "name_or_scope": {
                    "value": "eye_nr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "eye_rrp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_136": {
                "name_or_scope": {
                    "value": "eye_mfd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_141": {
                "name_or_scope": {
                    "value": "eye_trfd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "eye_w2fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_151": {
                "name_or_scope": {
                    "value": "eye_w1fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "eye_wp1fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_161": {
                "name_or_scope": {
                    "value": "eye_wp2fp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "eye_w2fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "eye_w1fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "eye_wp1fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_181": {
                "name_or_scope": {
                    "value": "eye_wp2fd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_186": {
                "name_or_scope": {
                    "value": "eeg_t1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "eeg_t2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_197": {
                "name_or_scope": {
                    "value": "eeg_a1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_202": {
                "name_or_scope": {
                    "value": "eeg_a2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "eeg_b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "eeg_b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "eeg_g1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "eeg_g2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_232": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=feature, units=self.num_task, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.task_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_236": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'text_aware_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_251": {
                "name_or_scope": {
                    "value": "self_attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_262": {
                "params": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_263": {
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.char_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_295": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_301": {
                "name_or_scope": {
                    "value": "charCNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_324": {
                "name_or_scope": {
                    "value": "bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_332": {
                "inputs": {
                    "value": "bilstm_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([output_fw, output_bw], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_ner_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_334": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_339": {
                "params": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_340": {
                "params": {
                    "value": "self.W_char",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.char_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "char_embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_372": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_tfd_input, eye_nf_input, eye_ffd_input, eye_fpd_input, eye_fp_input, eye_nr_input, eye_rrp_input, eye_mfd_input, eye_trfd_input, eye_w2fp_input, eye_w1fp_input, eye_wp1fp_input, eye_wp2fp_input, eye_w2fd_input, eye_w1fd_input, eye_wp1fd_input, eye_wp2fd_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "variable_scope_378": {
                "name_or_scope": {
                    "value": "charCNN",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_402": {
                "x": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(self.is_text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_404": {
                "name_or_scope": {
                    "value": "shared_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "cog_private_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_424": {
                "name_or_scope": {
                    "value": "text_private_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_436": {
                "inputs": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.text_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(text_output, self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_437": {
                "inputs": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.text_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(text_output, self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_ner_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_439": {
                "name_or_scope": {
                    "value": "text_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_445": {
                "inputs": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.cog_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(cog_output, self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_446": {
                "inputs": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.cog_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(cog_output, self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_ner_tags",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_448": {
                "name_or_scope": {
                    "value": "cog_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_240": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_243": {
                "a": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_254": {
                "shape": {
                    "value": "[hidden_state, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_299": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truncated_normal_303": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.filter_size, self.dim_char, self.num_filters]",
                            "List"
                        ],
                        [
                            "[self.filter_size, self.dim_char, self.num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_304": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_376": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eeg_t1_input, eeg_t2_input, eeg_a1_input, eeg_a2_input, eeg_b1_input, eeg_b2_input, eeg_g1_input, eeg_g2_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truncated_normal_380": {
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.filter_size, self.dim_char, self.num_filters]",
                            "List"
                        ],
                        [
                            "[self.filter_size, self.dim_char, self.num_filters]",
                            "List"
                        ]
                    ]
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_381": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_402": {
                "input": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_13": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_244": {
                "a": {
                    "value": "text_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(text, [0, 2, 1]), U)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cog",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_455": {
                "x": {
                    "value": "1 - self.is_text",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_458": {
                "x": {
                    "value": "1 - self.is_text",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "ner/test.py": {
        "tensorflow": {}
    },
    "ner/train.py": {
        "tensorflow": {}
    },
    "relation_extraction/CogAlign.py": {
        "tensorflow": {
            "get_default_graph_15": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.eye_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.eeg_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen, 105]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tags_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.task_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_93": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(feature, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(feature, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=self.task_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_125": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.word_embedding, self.emb_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_126": {
                "variable": {
                    "value": "eye_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eye_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "eeg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eeg_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "concat_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, cog_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "dense_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(inputs=attention_output, units=self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_152": {
                "variable": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=attention_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tags_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.word_embedding, self.emb_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_158": {
                "variable": {
                    "value": "eye_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eye_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "eeg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eeg_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_174": {
                "variable": {
                    "value": "cog2text",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ],
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "text_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_embedding.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_175": {
                "variable": {
                    "value": "share_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.is_text, tf.ones_like(self.is_text))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cog2text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=cog_embedding, units=text_hidden, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_209": {
                "variable": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(inputs=text_output, units=self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_210": {
                "variable": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.text_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(text_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=text_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tags_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_214": {
                "variable": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(inputs=cog_output, units=self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_215": {
                "variable": {
                    "value": "self.cog_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.cog_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(cog_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=cog_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tags_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RegisterGradient_11": {
                "op_type": {
                    "value": "grad_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FlipyGradient%d' % self.num_calls",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.pos_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.relative_position_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.reverse_position_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.cast(self.word_embed, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_85": {
                "variable": {
                    "value": "self.eye_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.eye_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "self.eeg_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.eeg_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[hidden_state])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d_in, d_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "text_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(text, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='U', shape=[d_in, d_out], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_107": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(text_T, cog) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_108": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(text_T, cog) + b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_110": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cog",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_116": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cog.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "features.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([hidden_state, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([hidden_state, 1]), name='v')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_120": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(features, score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.pos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_130": {
                "variable": {
                    "value": "relative_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_relative_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.relative_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_131": {
                "variable": {
                    "value": "reverse_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_reverse_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.reverse_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, pos_input, relative_position_input, reverse_position_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_input, eeg_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_143": {
                "variable": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_144": {
                "variable": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_145": {
                "variable": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_146": {
                "variable": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_147": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "concat_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_embedding, cog_embedding], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "bilstm_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.text_project_logits, labels=self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_161": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.pos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_162": {
                "variable": {
                    "value": "relative_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_relative_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.relative_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_163": {
                "variable": {
                    "value": "reverse_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_reverse_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.reverse_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, pos_input, relative_position_input, reverse_position_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_input, eeg_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_178": {
                "variable": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_179": {
                "variable": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_180": {
                "variable": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_181": {
                "variable": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_182": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "share_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(self.is_text, tf.ones_like(self.is_text)), text_embedding, cog2text)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "self.shared_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_188": {
                "variable": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_189": {
                "variable": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_190": {
                "variable": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_191": {
                "variable": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_192": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ],
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "self.cog_private_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.cog_private_output, self.shared_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_199": {
                "variable": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_200": {
                "variable": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_201": {
                "variable": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_202": {
                "variable": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_203": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "self.text_private_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.text_private_output, self.shared_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "self.text_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.text_project_logits, labels=self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "variable": {
                    "value": "self.cog_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.cog_project_logits, labels=self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "self.W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.pos_vocab_size + 1, self.dim_pos], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.pos_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.pos_vocab_size + 1, self.dim_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "self.W_relative_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.relative_pos_vocab_size + 1, self.dim_position], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_relative_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.relative_position_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.relative_pos_vocab_size + 1, self.dim_position]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.W_reverse_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.reverse_pos_vocab_size + 1, self.dim_position], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_reverse_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.reverse_position_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.reverse_pos_vocab_size + 1, self.dim_position]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "eye_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "eeg_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_95": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=feature, units=self.num_task, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.task_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'text_aware_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self_attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "params": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_151": {
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attention(bilstm_output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_157": {
                "params": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_175": {
                "x": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(self.is_text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "shared_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "cog_private_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "text_private_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_209": {
                "inputs": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.text_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(text_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=text_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "text_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_214": {
                "inputs": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.cog_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(cog_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=cog_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "cog_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "pos_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "relative_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "reverse_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "a": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_117": {
                "shape": {
                    "value": "[hidden_state, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_154": {
                "logits": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_175": {
                "input": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_212": {
                "logits": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_217": {
                "logits": {
                    "value": "self.cog_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_13": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "a": {
                    "value": "text_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(text, [0, 2, 1]), U)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cog",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "1 - self.is_text",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_223": {
                "x": {
                    "value": "1 - self.is_text",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "relation_extraction/train.py": {
        "tensorflow": {
            "run_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_72": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_74": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "global_step1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step1",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_97": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_89": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "setting.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "relation_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_78": {
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(embedding_path)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sentiment_analysis/CogAlign.py": {
        "tensorflow": {
            "get_default_graph_15": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "variable": {
                    "value": "self.eye_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "self.eeg_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen, 105]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.tags_num]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.task_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_93": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(feature, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_94": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(feature, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_task",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=self.task_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_125": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.word_embedding, self.emb_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_126": {
                "variable": {
                    "value": "eye_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eye_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_127": {
                "variable": {
                    "value": "eeg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eeg_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_141": {
                "variable": {
                    "value": "concat_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, cog_embedding]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_151": {
                "variable": {
                    "value": "dense_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(inputs=attention_output, units=self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_152": {
                "variable": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=attention_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tags_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_157": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.embedding_lookup(self.word_embedding, self.emb_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_158": {
                "variable": {
                    "value": "eye_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eye_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_159": {
                "variable": {
                    "value": "eeg_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.eeg_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_174": {
                "variable": {
                    "value": "cog2text",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ],
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ]
                    ]
                },
                "units": {
                    "value": "text_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_embedding.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_175": {
                "variable": {
                    "value": "share_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(self.is_text, tf.ones_like(self.is_text))",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cog2text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=cog_embedding, units=text_hidden, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_209": {
                "variable": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(inputs=text_output, units=self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_210": {
                "variable": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.text_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(text_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=text_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tags_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_214": {
                "variable": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.layers.dense(inputs=cog_output, units=self.dim_lstm, activation=tf.nn.tanh)",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_215": {
                "variable": {
                    "value": "self.cog_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.cog_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(cog_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=cog_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.tags_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RegisterGradient_11": {
                "op_type": {
                    "value": "grad_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'FlipyGradient%d' % self.num_calls",
                            "BinOp"
                        ]
                    ]
                }
            },
            "identity_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "self.pos_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "self.relative_position_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "self.reverse_position_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.maxSentencelen]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_83": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.cast(self.word_embed, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_85": {
                "variable": {
                    "value": "self.eye_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.eye_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "self.eeg_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.eeg_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, shape=[hidden_state])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "U",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[d_in, d_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.contrib.layers.xavier_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "text_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(text, [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='U', shape=[d_in, d_out], dtype=tf.float32, initializer=tf.contrib.layers.xavier_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_107": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(text_T, cog) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_max_108": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(text_T, cog) + b)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_110": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cog",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_116": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cog.get_shape().as_list()[-1]",
                            "Subscript"
                        ],
                        [
                            "features.get_shape().as_list()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([hidden_state, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_118": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([hidden_state, 1]), name='v')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_119": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_120": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(features, hidden_state, activation=tf.nn.tanh)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(G, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(features, v)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(features, score)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "embedding_lookup_129": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.pos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_130": {
                "variable": {
                    "value": "relative_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_relative_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.relative_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_131": {
                "variable": {
                    "value": "reverse_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_reverse_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.reverse_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, pos_input, relative_position_input, reverse_position_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_134": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_input, eeg_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_143": {
                "variable": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_144": {
                "variable": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_145": {
                "variable": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_146": {
                "variable": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_147": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "concat_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([text_embedding, cog_embedding], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_149": {
                "variable": {
                    "value": "bilstm_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_154": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.text_project_logits, labels=self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_161": {
                "variable": {
                    "value": "pos_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.pos_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_162": {
                "variable": {
                    "value": "relative_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_relative_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.relative_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_163": {
                "variable": {
                    "value": "reverse_position_input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.W_reverse_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.reverse_position_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_164": {
                "variable": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[text_embedding, pos_input, relative_position_input, reverse_position_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_166": {
                "variable": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[eye_input, eeg_input]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_178": {
                "variable": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_179": {
                "variable": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_180": {
                "variable": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_181": {
                "variable": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_182": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "shared_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "shared_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(shared_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "share_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(self.is_text, tf.ones_like(self.is_text)), text_embedding, cog2text)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "self.shared_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_188": {
                "variable": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_189": {
                "variable": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_190": {
                "variable": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_191": {
                "variable": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_192": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cog_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cog_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(cog_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "cog_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ],
                        [
                            "tf.concat([eye_input, eeg_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "eye_input",
                            "Name"
                        ],
                        [
                            "self.text_aware_attention(text_embedding, cog_embedding)",
                            "Call"
                        ],
                        [
                            "eeg_input",
                            "Name"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_194": {
                "variable": {
                    "value": "self.cog_private_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_195": {
                "variable": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.cog_private_output, self.shared_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTMCell_199": {
                "variable": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTMCell_200": {
                "variable": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_201": {
                "variable": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DropoutWrapper_202": {
                "variable": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_203": {
                "variable": {
                    "value": "((output_fw, output_bw), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "text_private_cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_fw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "text_private_cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.dim_lstm)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.DropoutWrapper(text_private_cell_bw, output_keep_prob=self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "text_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.nn.embedding_lookup(self.word_embedding, self.emb_input), self.keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat([text_embedding, pos_input, relative_position_input, reverse_position_input], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "self.sentence_len",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_205": {
                "variable": {
                    "value": "self.text_private_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[output_fw, output_bw]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_206": {
                "variable": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self.text_private_output, self.shared_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_212": {
                "variable": {
                    "value": "self.text_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.text_project_logits, labels=self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_217": {
                "variable": {
                    "value": "self.cog_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(logits=self.cog_project_logits, labels=self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "self.W_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.pos_vocab_size + 1, self.dim_pos], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_pos",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "self.pos_embedding_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.pos_vocab_size + 1, self.dim_pos]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "self.W_relative_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.relative_pos_vocab_size + 1, self.dim_position], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_relative_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "self.relative_position_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.relative_pos_vocab_size + 1, self.dim_position]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.W_reverse_positon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([self.reverse_pos_vocab_size + 1, self.dim_position], -1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "W_reverse_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "self.reverse_position_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.reverse_pos_vocab_size + 1, self.dim_position]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "word_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "eye_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "eeg_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_95": {
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(inputs=feature, units=self.num_task, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "self.task_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'text_aware_attention'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "self_attention_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_125": {
                "params": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_151": {
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.self_attention(bilstm_output)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_157": {
                "params": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.emb_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_175": {
                "x": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones_like(self.is_text)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_177": {
                "name_or_scope": {
                    "value": "shared_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_187": {
                "name_or_scope": {
                    "value": "cog_private_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "text_private_bilstm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_209": {
                "inputs": {
                    "value": "text_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.text_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(text_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=text_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_211": {
                "name_or_scope": {
                    "value": "text_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_214": {
                "inputs": {
                    "value": "cog_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self.cog_private_output, self.shared_output], axis=-1)",
                            "Call"
                        ],
                        [
                            "self.self_attention(cog_output)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(tf.layers.dense(inputs=cog_output, units=self.dim_lstm, activation=tf.nn.tanh), self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "cog_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "pos_feature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "relative_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "reverse_position",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_state]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_106": {
                "a": {
                    "value": "text",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_117": {
                "shape": {
                    "value": "[hidden_state, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_154": {
                "logits": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_175": {
                "input": {
                    "value": "self.is_text",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_212": {
                "logits": {
                    "value": "self.text_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_217": {
                "logits": {
                    "value": "self.cog_project_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "negative_13": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_83": {
                "x": {
                    "value": "self.word_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_107": {
                "a": {
                    "value": "text_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(text, [0, 2, 1]), U)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "cog",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_220": {
                "x": {
                    "value": "1 - self.is_text",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_223": {
                "x": {
                    "value": "1 - self.is_text",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sentiment_analysis/train.py": {
        "tensorflow": {
            "run_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_58": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_60": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_70": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "global_step1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step1",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_83": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_75": {
                "variable": {
                    "value": "(grads, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "setting.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_63": {
                "name_or_scope": {
                    "value": "sentiment_model",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_64": {
                "x": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(embedding_path)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}