{
    "rodnet/datasets/CRDataLoader.py": {
        "torch": {
            "from_numpy_115": {
                "variable": {
                    "value": "results[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "results[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_97": {
                "ndarray": {
                    "value": "shradarnp[index_num, :data_length, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "shconfnp[index_num, :data_length, :, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/datasets/CRDataset.py": {
        "torch": {}
    },
    "rodnet/datasets/CRDatasetSM.py": {
        "torch": {}
    },
    "rodnet/datasets/collate_functions.py": {
        "torch": {
            "stack_32": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "elem.new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_45": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "as_tensor_41": {
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rodnet/models/backbones/cdc.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_27": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_29": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_31": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_33": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_35": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_37": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_38": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_39": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_41": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_42": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_59": {
                "variable": {
                    "value": "self.convt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_61": {
                "variable": {
                    "value": "self.convt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_63": {
                "variable": {
                    "value": "self.convt3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PReLU_65": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_66": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/backbones/hg.py": {
        "torch": {
            "Conv3d_16": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.hourglass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.hourglass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_30": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_31": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_32": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_57": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_59": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_61": {
                "variable": {
                    "value": "self.conv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_63": {
                "variable": {
                    "value": "self.conv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_65": {
                "variable": {
                    "value": "self.conv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_67": {
                "variable": {
                    "value": "self.conv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_70": {
                "variable": {
                    "value": "self.skipconv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "variable": {
                    "value": "self.skipconv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_74": {
                "variable": {
                    "value": "self.skipconv2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_76": {
                "variable": {
                    "value": "self.skipconv2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "variable": {
                    "value": "self.skipconv3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_80": {
                "variable": {
                    "value": "self.skipconv3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_82": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_83": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_84": {
                "variable": {
                    "value": "self.bn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_85": {
                "variable": {
                    "value": "self.bn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_86": {
                "variable": {
                    "value": "self.bn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_87": {
                "variable": {
                    "value": "self.bn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_89": {
                "variable": {
                    "value": "self.skipbn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_90": {
                "variable": {
                    "value": "self.skipbn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_91": {
                "variable": {
                    "value": "self.skipbn2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_92": {
                "variable": {
                    "value": "self.skipbn2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_93": {
                "variable": {
                    "value": "self.skipbn3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_94": {
                "variable": {
                    "value": "self.skipbn3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_121": {
                "variable": {
                    "value": "self.convt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_123": {
                "variable": {
                    "value": "self.convt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_125": {
                "variable": {
                    "value": "self.convt3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PReLU_127": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_128": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_10": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_21": {
                "modules": {
                    "value": "[RODEncode(), RODDecode(), nn.Conv3d(in_channels=64, out_channels=n_class, kernel_size=(9, 5, 5), stride=(1, 1, 1), padding=(4, 2, 2)), nn.Conv3d(in_channels=n_class, out_channels=64, kernel_size=(9, 5, 5), stride=(1, 1, 1), padding=(4, 2, 2))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv3d_22": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/backbones/hgwi.py": {
        "torch": {
            "Conv3d_17": {
                "variable": {
                    "value": "self.conv1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.hourglass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.hourglass",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm3d_33": {
                "variable": {
                    "value": "self.bn1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_34": {
                "variable": {
                    "value": "self.bn1b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_35": {
                "variable": {
                    "value": "self.bn1c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_36": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_69": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, kernal_size[0], kernal_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(2, paddingX, paddingY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_72": {
                "variable": {
                    "value": "self.branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, kernal_size[0], kernal_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, paddingX, paddingY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_75": {
                "variable": {
                    "value": "self.branch2b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, kernal_size[0], kernal_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(4, paddingX, paddingY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_78": {
                "variable": {
                    "value": "self.branch3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, kernal_size[0], kernal_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, paddingX, paddingY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_81": {
                "variable": {
                    "value": "self.branch3b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(13, kernal_size[0], kernal_size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(6, paddingX, paddingY)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_116": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_117": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_118": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_120": {
                "variable": {
                    "value": "self.skip_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_121": {
                "variable": {
                    "value": "self.skip_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm3d_122": {
                "variable": {
                    "value": "self.skip_bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose3d_146": {
                "variable": {
                    "value": "self.convt1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_148": {
                "variable": {
                    "value": "self.convt2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_150": {
                "variable": {
                    "value": "self.convt3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_152": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_154": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_156": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "PReLU_158": {
                "variable": {
                    "value": "self.prelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_159": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3d_11": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "(branch1, branch2, branch3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "modules": {
                    "value": "[RODEncode(), RODDecode(), nn.Conv3d(in_channels=160, out_channels=n_class, kernel_size=(9, 5, 5), stride=(1, 1, 1), padding=(4, 2, 2)), nn.Conv3d(in_channels=n_class, out_channels=160, kernel_size=(9, 5, 5), stride=(1, 1, 1), padding=(4, 2, 2))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv3d_25": {
                "in_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv3d_28": {
                "in_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "160",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(9, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(4, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/losses/loss.py": {
        "torch": {
            "eye_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "smooth_l1_loss_148": {
                "variable": {
                    "value": "loc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_loc_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc_preds[mask].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "masked_loc_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc_targets[mask].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_105": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_embedding(y.data.cpu(), 1 + self.num_classes)",
                            "Call"
                        ],
                        [
                            "t[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "Variable(t).cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_embedding(y.data.cpu(), 1 + self.num_classes)",
                            "Call"
                        ],
                        [
                            "t[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "Variable(t).cuda()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * t + (1 - alpha) * (1 - t)",
                            "BinOp"
                        ],
                        [
                            "w * (1 - pt).pow(gamma)",
                            "BinOp"
                        ],
                        [
                            "alpha * t + (1 - alpha) * (1 - t)",
                            "BinOp"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/modules/mnet.py": {
        "torch": {
            "randn_40": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "win_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "in_chirps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "in_chirps",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "MaxPool3d_18": {
                "variable": {
                    "value": "self.t_maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(t_conv_out, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.out_channels, win_size, w, h)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/rodnet_cdc.py": {
        "torch": {}
    },
    "rodnet/models/rodnet_cdc_v2.py": {
        "torch": {}
    },
    "rodnet/models/rodnet_hg.py": {
        "torch": {}
    },
    "rodnet/models/rodnet_hg_v2.py": {
        "torch": {
            "set_device_41": {
                "device": {
                    "value": "torch.device('cuda:0')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_51": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "win_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "in_chirps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "randn_54": {
                "variable": {
                    "value": "output_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "win_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ]
                    ]
                }
            },
            "BCELoss_55": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_41": {
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/rodnet_hgwi.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, 16, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/models/rodnet_hgwi_v2.py": {
        "torch": {
            "zeros_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, 16, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/ops/dcn/deform_conv_2d.py": {
        "torch": {
            "zeros_like_158": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_160": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_162": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_279": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_pair(self.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_353": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_398": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_pair(self.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_415": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deform_conv(x, offset, self.weight, self.stride, self.padding, self.dilation, self.groups, self.deformable_groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, :out.size(2) - pad_h, :out.size(3) - pad_w].contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_417": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_247": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_248": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_357": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_76": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rodnet/ops/dcn/deform_conv_3d.py": {
        "torch": {
            "zeros_like_164": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_165": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_166": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_232": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_286": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 2 * self.kernel_size[0] * self.kernel_size[1] * self.kernel_size[2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_triple(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_triple(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_triple(self.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_355": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "variable": {
                    "value": "self.conv_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "dilation": {
                    "value": "_pair(self.dilation)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_417": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deform_conv(x, offset, self.weight, self.stride, self.padding, self.dilation, self.groups, self.deformable_groups)",
                            "Call"
                        ],
                        [
                            "out[:, :, :out.size(2) - pad_h, :out.size(3) - pad_w].contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_419": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_255": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_359": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_78": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(offset, (0, pad_w, 0, pad_h), 'constant', 0).contiguous()",
                            "Call"
                        ],
                        [
                            "self.conv_offset(x)",
                            "Call"
                        ],
                        [
                            "torch.cat((o1, o2), dim=1)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_90": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rodnet/ops/dcn/deform_pool_2d.py": {
        "torch": {
            "zeros_like_66": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rodnet/ops/dcn/deform_pool_3d.py": {
        "torch": {
            "zeros_like_66": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_68": {
                "variable": {
                    "value": "grad_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "data.new_empty(0)",
                            "Call"
                        ],
                        [
                            "self.offset_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "offset.view(n, 2, self.out_size[0], self.out_size[1])",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_145": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*offset_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_228": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mask_fc_seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_207": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_222": {
                "in_features": {
                    "value": "ic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * self.out_channels",
                            "BinOp"
                        ],
                        [
                            "oc",
                            "variable"
                        ],
                        [
                            "oc",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "oc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1] * 2",
                            "BinOp"
                        ],
                        [
                            "self.deform_fc_channels",
                            "Attribute"
                        ],
                        [
                            "self.out_size[0] * self.out_size[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_210": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_225": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "setup.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "setup_wo_tdc.py": {
        "torch": {
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tools/test.py": {
        "torch": {
            "load_116": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.checkpoint",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_169": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "crdata_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CRDataset(data_dir=args.data_dir, dataset=dataset, config_dict=config_dict, split='test', noise_channel=args.use_noise_channel, subset=subset, is_random_chirp=False)",
                            "Call"
                        ],
                        [
                            "CRDataset(data_dir=args.data_dir, dataset=dataset, config_dict=config_dict, split='demo', noise_channel=args.use_noise_channel, subset=subset, is_random_chirp=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "cr_collate",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "tools/train.py": {
        "torch": {
            "SummaryWriter_87": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_dir_for_new_model(model_cfg['name'], train_model_path)",
                            "Call"
                        ],
                        [
                            "create_dir_for_new_model(model_cfg['name'], train_model_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rodnet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['train_cfg']['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "StepLR_174": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(rodnet.parameters(), lr=lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "config_dict['train_cfg']['lr_step']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "load_configs_from_file(args.config)",
                            "Call"
                        ],
                        [
                            "update_config_dict(config_dict, args)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_115": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "crdata_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CRDataset(data_dir=args.data_dir, dataset=dataset, config_dict=config_dict, split='train', noise_channel=args.use_noise_channel)",
                            "Call"
                        ],
                        [
                            "CRDatasetSM(data_dir=args.data_dir, dataset=dataset, config_dict=config_dict, split='train', noise_channel=args.use_noise_channel)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['train_cfg']['batch_size']",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "cr_collate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BCELoss_146": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cp_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "args.resume_from",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BCELoss_149": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_310": {
                "obj": {
                    "value": "status_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_name': model_name, 'epoch': epoch, 'iter': iter, 'model_state_dict': rodnet.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss_confmap.item(), 'loss_ave': loss_ave, 'iter_count': iter_count}",
                            "Dict"
                        ],
                        [
                            "{'model_name': model_name, 'epoch': epoch + 1, 'iter': iter + 1, 'model_state_dict': rodnet.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss_confmap.item(), 'loss_ave': loss_ave, 'iter_count': iter_count}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/epoch_%02d_final.pkl' % (model_dir, epoch + 1)",
                            "BinOp"
                        ],
                        [
                            "'%s/epoch_%02d_iter_%010d.pkl' % (model_dir, epoch + 1, iter_count + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_152": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_158": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_292": {
                "obj": {
                    "value": "status_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model_name': model_name, 'epoch': epoch, 'iter': iter, 'model_state_dict': rodnet.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss_confmap.item(), 'loss_ave': loss_ave, 'iter_count': iter_count}",
                            "Dict"
                        ],
                        [
                            "{'model_name': model_name, 'epoch': epoch + 1, 'iter': iter + 1, 'model_state_dict': rodnet.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'loss': loss_confmap.item(), 'loss_ave': loss_ave, 'iter_count': iter_count}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s/epoch_%02d_final.pkl' % (model_dir, epoch + 1)",
                            "BinOp"
                        ],
                        [
                            "'%s/epoch_%02d_iter_%010d.pkl' % (model_dir, epoch + 1, iter_count + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BCELoss_164": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_170": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}