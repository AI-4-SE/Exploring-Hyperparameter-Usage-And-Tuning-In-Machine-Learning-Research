{
    "scripts/evaluate_segmenters.py": {
        "tensorflow": {
            "ConfigProto_42": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_44": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/experiment_base.py": {
        "tensorflow": {
            "plot_model_157": {
                "model": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.models",
                            "Attribute"
                        ],
                        [
                            "models_to_print",
                            "variable"
                        ],
                        [
                            "self.models",
                            "Attribute"
                        ]
                    ]
                },
                "to_file": {
                    "value": "os.path.join(figs_dir, m.name + '.jpg')",
                    "type": "Call",
                    "possible_values": []
                },
                "show_shapes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment_engine.py": {
        "tensorflow": {
            "ConfigProto_20": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FileWriter_123": {
                "variable": {
                    "value": "tbw",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "logs_dir",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_session_23": {
                "session": {
                    "value": "tf.Session(config=config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Progbar_172": {
                "variable": {
                    "value": "pb",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "n_batch_per_epoch_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(max_n_batch_per_epoch, int(np.ceil(exp.get_n_train() / float(batch_size))))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_23": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Progbar_239": {
                "variable": {
                    "value": "pbt",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Summary_274": {
                "value": {
                    "value": "[tf.Summary.Value(tag=loss_names[i], simple_value=loss_vals[i])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/metrics.py": {
        "tensorflow": {
            "ones_105": {
                "variable": {
                    "value": "sum_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[*self.win, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_67": {
                "variable": {
                    "value": "dIdx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(y_pred, tf.range(1, tf.shape(y_pred)[d + 1]), axis=d + 1) - tf.gather(y_pred, tf.range(0, tf.shape(y_pred)[d + 1] - 1), axis=d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross * cross / (I_var * J_var + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_24": {
                "input_tensor": {
                    "value": "tf.abs(dCdx * tf.gather(segments_mask, tf.range(1, tf.shape(y_pred)[d + 1]), axis=d + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_49": {
                "variable": {
                    "value": "dIdx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(y_true, tf.range(1, tf.shape(y_true)[d + 1]), axis=d + 1) - tf.gather(y_true, tf.range(0, tf.shape(y_true)[d + 1] - 1), axis=d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_58": {
                "input_tensor": {
                    "value": "tf.abs(dCdx * tf.exp(-dIdx))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_71": {
                "input_tensor": {
                    "value": "dIdx * dIdx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_20": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_pred)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_21": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, tf.shape(y_pred)[d + 1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_25": {
                "x": {
                    "value": "dCdx * tf.gather(segments_mask, tf.range(1, tf.shape(y_pred)[d + 1]), axis=d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_45": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_pred)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_46": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, tf.shape(y_pred)[d + 1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_58": {
                "x": {
                    "value": "dCdx * tf.exp(-dIdx)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_53": {
                "x": {
                    "value": "tf.gather(self.pred_image_output, tf.range(1, tf.shape(y_true)[d + 1]), axis=d + 1) - tf.gather(self.pred_image_output, tf.range(0, tf.shape(y_true)[d + 1] - 1), axis=d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_67": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_pred)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_68": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, tf.shape(y_pred)[d + 1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_26": {
                "params": {
                    "value": "segments_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - self.warped_contours_layer_output",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_pred)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_49": {
                "params": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_true)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_50": {
                "params": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, tf.shape(y_true)[d + 1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_58": {
                "x": {
                    "value": "-dIdx",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_20": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_45": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_54": {
                "params": {
                    "value": "self.pred_image_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_true)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_55": {
                "params": {
                    "value": "self.pred_image_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, tf.shape(y_true)[d + 1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_21": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_46": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_68": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_50": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_54": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/networks.py": {
        "tensorflow": {
            "Input_213": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "vol_size + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_src",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_214": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "vol_size + (1,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tgt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_229": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[src, tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[y, flow]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'voxelmorph'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_244": {
                "variable": {
                    "value": "x_src",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input_src",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_245": {
                "variable": {
                    "value": "x_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input_tgt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_251": {
                "variable": {
                    "value": "x_seg",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "aux_input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_shape",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "input_src_aux",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_302": {
                "variable": {
                    "value": "img_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "input_img",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_303": {
                "variable": {
                    "value": "flow_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape[:-1] + (n_dims,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_325": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "img_input_randwarp",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_369": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(V, [-1] + V.get_shape().as_list()[1:])",
                            "Call"
                        ],
                        [
                            "SpatialTransformer(interp_method='linear')([V, offset])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + V.get_shape().as_list()[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_373": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "volshape_to_ndgrid([f * 2 for f in V.get_shape().as_list()[1:-1]])",
                            "Call"
                        ],
                        [
                            "[tf.cast(f, 'float32') for f in grid]",
                            "ListComp"
                        ],
                        [
                            "[tf.expand_dims(f / 2 - f, 0) for f in grid]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "len(grid) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_559": {
                "variable": {
                    "value": "input_src",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Input_560": {
                "variable": {
                    "value": "input_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Input_575": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "img_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_256": {
                "variable": {
                    "value": "flow_srctotgt",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape[:-1] + (n_dims,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "input_flow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_294": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_tgt]",
                            "List"
                        ],
                        [
                            "inputs + [flow_srctotgt]",
                            "BinOp"
                        ]
                    ]
                },
                "outputs": {
                    "value": "[transformed_out, color_delta, x_seg]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'color_delta_unet'",
                            "Method Argument"
                        ],
                        [
                            "'randflow_model'",
                            "Method Argument"
                        ],
                        [
                            "'bidir_wrapper'",
                            "Method Argument"
                        ],
                        [
                            "'segmenter_unet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Model_308": {
                "inputs": {
                    "value": "[img_in, flow_in]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "img_warped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SpatialTransformer(interp_mode, indexing=indexing, name='densespatialtransformer_img')([img_in, flow_in])",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "warp_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_361": {
                "inputs": {
                    "value": "[x_in]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "model_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_warped)",
                            "Call"
                        ],
                        [
                            "[x_warped, flow]",
                            "List"
                        ],
                        [
                            "[model_outputs]",
                            "List"
                        ]
                    ]
                },
                "name": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'color_delta_unet'",
                            "Method Argument"
                        ],
                        [
                            "'randflow_model'",
                            "Method Argument"
                        ],
                        [
                            "'bidir_wrapper'",
                            "Method Argument"
                        ],
                        [
                            "'segmenter_unet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_418": {
                "variable": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "blur_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims, n_sigmas_per_side=4)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ],
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims, n_sigmas_per_side=2)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ],
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_450": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rand_flow, [-1] + list(self.flow_shape))",
                            "Call"
                        ],
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(rand_flow * self.flow_sigma, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + list(self.flow_shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_472": {
                "variable": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "blur_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims, n_sigmas_per_side=4)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ],
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims, n_sigmas_per_side=2)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ],
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_482": {
                "variable": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_tgt]",
                            "List"
                        ],
                        [
                            "inputs + [flow_srctotgt]",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_483": {
                "variable": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(flow_flat, [-1] + list(self.flow_shape[:-1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1] + list(self.flow_shape[:-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv3d_485": {
                "variable": {
                    "value": "flow_blurred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(flow_flat, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1] * (self.n_dims + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "flow_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flow_blurred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(tf.expand_dims(flow_flat, axis=-1), self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "flow_blurred[:, :, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_dims] + list(self.flow_shape[:-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_491": {
                "variable": {
                    "value": "flow_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flow_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(flow_blurred, [-1, self.n_dims] + list(self.flow_shape[:-1]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(flow_out, [0, 2, 3, 4, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_566": {
                "inputs": {
                    "value": "[input_src, input_tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[transformed_fwd, transformed_bck, flow_fwd, flow_bck]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'color_delta_unet'",
                            "Method Argument"
                        ],
                        [
                            "'randflow_model'",
                            "Method Argument"
                        ],
                        [
                            "'bidir_wrapper'",
                            "Method Argument"
                        ],
                        [
                            "'segmenter_unet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Model_598": {
                "inputs": {
                    "value": "[x_in]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "model_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'color_delta_unet'",
                            "Method Argument"
                        ],
                        [
                            "'randflow_model'",
                            "Method Argument"
                        ],
                        [
                            "'bidir_wrapper'",
                            "Method Argument"
                        ],
                        [
                            "'segmenter_unet'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_73": {
                "filters": {
                    "value": "out_im_chans",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_dec_conv2D_final'.format(layer_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3D_130": {
                "filters": {
                    "value": "out_im_chans",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_dec_conv3D_final'.format(layer_prefix)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_216": {
                "name": {
                    "value": "concat_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_265": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Add_287": {
                "name": {
                    "value": "add_color_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_292": {
                "target_shape": {
                    "value": "aux_input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_shape",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "aux",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_371": {
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_372": {
                "input": {
                    "value": "f / 2 - f",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_433": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rand_flow, [-1] + list(self.flow_shape))",
                            "Call"
                        ],
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(rand_flow * self.flow_sigma, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1] * (self.n_dims + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_511": {
                "variable": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "blur_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims, n_sigmas_per_side=4)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ],
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims, n_sigmas_per_side=2)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ],
                        [
                            "create_gaussian_kernel(blur_sigma, n_dims=n_dims)",
                            "Call"
                        ],
                        [
                            "np.tile(np.reshape(blur_kernel, blur_kernel.shape + (1, 1)), tuple([1] * n_dims) + (n_dims, 1))",
                            "Call"
                        ],
                        [
                            "np.reshape(blur_kernel, blur_kernel.shape + (1, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_527": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rand_flow, [-1] + list(self.flow_shape))",
                            "Call"
                        ],
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(rand_flow * self.flow_sigma, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1] * (self.n_dims + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_544": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_548": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rand_flow * self.flow_sigma",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_147": {
                "padding": {
                    "value": "(pad_amt, (0, 0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_150": {
                "padding": {
                    "value": "((0, 0), pad_amt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Cropping2D_154": {
                "cropping": {
                    "value": "(crop_amt, (0, 0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Cropping2D_157": {
                "cropping": {
                    "value": "((0, 0), crop_amt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding3D_169": {
                "padding": {
                    "value": "(pad_amt, (0, 0), (0, 0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding3D_176": {
                "padding": {
                    "value": "((0, 0), pad_amt, (0, 0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPadding3D_179": {
                "padding": {
                    "value": "((0, 0), (0, 0), pad_amt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Cropping3D_183": {
                "cropping": {
                    "value": "(crop_amt, (0, 0), (0, 0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Cropping3D_186": {
                "cropping": {
                    "value": "((0, 0), crop_amt, (0, 0))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Cropping3D_189": {
                "cropping": {
                    "value": "((0, 0), (0, 0), crop_amt)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling3D_328": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPooling3D_329": {
                "pool_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Reshape_343": {
                "target_shape": {
                    "value": "flow_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([int(s / 4) for s in img_shape[:-1]] + [n_dims])",
                            "Call"
                        ],
                        [
                            "img_shape[:-1] + (n_dims,)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Lambda_345": {
                "function": {
                    "value": "interp_upsampling",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Lambda_346": {
                "function": {
                    "value": "interp_upsampling",
                    "type": "variable",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "img_shape[:-1] + (n_dims,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Reshape_347": {
                "target_shape": {
                    "value": "img_shape[:-1] + (n_dims,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "randflow_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_349": {
                "target_shape": {
                    "value": "img_shape[:-1] + (n_dims,)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "randflow_out",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_443": {
                "variable": {
                    "value": "rand_flow_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rand_flow, [-1] + list(self.flow_shape))",
                            "Call"
                        ],
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(rand_flow * self.flow_sigma, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "self.n_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_449": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flow_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_485": {
                "input": {
                    "value": "flow_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(inputs, [0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(flow_flat, [-1] + list(self.flow_shape[:-1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Activation_594": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "nf_enc[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_enc_conv2D_{}_{}'.format(layer_prefix, i, j + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPooling2D_49": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_enc_maxpool_{}'.format(layer_prefix, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpSampling2D_59": {
                "size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_dec_upsamp_{}'.format(layer_prefix, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_64": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2D_67": {
                "filters": {
                    "value": "nf_dec[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_dec_conv2D_{}_{}'.format(layer_prefix, i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv3D_94": {
                "filters": {
                    "value": "nf_enc[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_enc_conv3D_{}_{}'.format(layer_prefix, i, j + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_99": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MaxPooling3D_105": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_enc_maxpool_{}'.format(layer_prefix, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "UpSampling3D_116": {
                "size": {
                    "value": "us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(2, 2, 2)",
                            "Tuple"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}_dec_upsamp_{}'.format(layer_prefix, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_121": {
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv3D_124": {
                "filters": {
                    "value": "nf_dec[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_dec_conv3D_{}_{}'.format(layer_prefix, i, j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_127": {
                "alpha": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RandomNormal_224": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv3d_446": {
                "variable": {
                    "value": "flow_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(rand_flow_list[c], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1] * (self.n_dims + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_535": {
                "variable": {
                    "value": "rand_flow_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rand_flow, [-1] + list(self.flow_shape))",
                            "Call"
                        ],
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(rand_flow * self.flow_sigma, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_541": {
                "variable": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "flow_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_n_545": {
                "inputs": {
                    "value": "[rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_429": {
                "value": {
                    "value": "[tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_524": {
                "value": {
                    "value": "[tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv3d_538": {
                "variable": {
                    "value": "flow_chan",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(rand_flow_list[c], axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1] * (self.n_dims + 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_437": {
                "value": {
                    "value": "[tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_446": {
                "input": {
                    "value": "rand_flow_list[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_531": {
                "value": {
                    "value": "[tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_538": {
                "input": {
                    "value": "rand_flow_list[c]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_430": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_tgt]",
                            "List"
                        ],
                        [
                            "inputs + [flow_srctotgt]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_525": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_tgt]",
                            "List"
                        ],
                        [
                            "inputs + [flow_srctotgt]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_545": {
                "input_tensor": {
                    "value": "tf.abs(rand_flow)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_438": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_tgt]",
                            "List"
                        ],
                        [
                            "inputs + [flow_srctotgt]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_532": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x_src, x_tgt]",
                            "List"
                        ],
                        [
                            "inputs + [flow_srctotgt]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_545": {
                "x": {
                    "value": "rand_flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(rand_flow, [-1] + list(self.flow_shape))",
                            "Call"
                        ],
                        [
                            "K.random_uniform(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), minval=-self.flow_amp, maxval=self.flow_amp, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(rand_flow, self.blur_kernel, strides=[1] * (self.n_dims + 2), padding='SAME')",
                            "Call"
                        ],
                        [
                            "K.random_normal(shape=tf.convert_to_tensor([tf.shape(inputs)[0], tf.shape(inputs)[1], tf.shape(inputs)[2], tf.shape(inputs)[3], self.n_dims]), mean=0.0, stddev=1.0, dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(tf.add_n([rand_flow * 0, rand_flow / tf.reduce_max(tf.abs(rand_flow)) * self.flow_sigma]), dtype='float32')",
                            "Call"
                        ],
                        [
                            "K.cast(rand_flow * self.flow_sigma, dtype='float32')",
                            "Call"
                        ],
                        [
                            "tf.stack(flow_chans, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/segmenter_model.py": {
        "tensorflow": {
            "load_model_389": {
                "variable": {
                    "value": "self.flow_aug_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.arch_params['tm_flow_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'SpatialTransformer': functools.partial(nrn_layers.SpatialTransformer, indexing=indexing)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Model_698": {
                "variable": {
                    "value": "self.segmenter_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.base_segmenter_model.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "self.base_segmenter_model.get_layer('unet_dec_conv2D_final').output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "segmenter_pre_softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_model_398": {
                "variable": {
                    "value": "self.flow_bck_aug_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.arch_params['tm_flow_bck_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'SpatialTransformer': functools.partial(nrn_layers.SpatialTransformer, indexing=indexing)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_model_405": {
                "variable": {
                    "value": "self.color_aug_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.arch_params['tm_color_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'SpatialTransformer': functools.partial(nrn_layers.SpatialTransformer, indexing=indexing)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Model_416": {
                "variable": {
                    "value": "self.color_aug_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.color_aug_model.inputs[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[self.color_aug_model.outputs[0], self.color_aug_model.get_layer('add_color_delta').output, self.color_aug_model.outputs[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "color_model_wrapper",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_726": {
                "lr": {
                    "value": "self.arch_params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_732": {
                "lr": {
                    "value": "self.arch_params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/transform_models.py": {
        "tensorflow": {
            "load_model_228": {
                "variable": {
                    "value": "self.flow_fwd_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.arch_params['flow_fwd_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'SpatialTransformer': functools.partial(nrn_layers.SpatialTransformer, indexing='xy')}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_model_237": {
                "variable": {
                    "value": "self.flow_bck_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.arch_params['flow_bck_model']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'SpatialTransformer': functools.partial(nrn_layers.SpatialTransformer, indexing='xy')}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_188": {
                "lr": {
                    "value": "self.arch_params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "lr": {
                    "value": "self.arch_params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_model_355": {
                "filepath": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'SpatialTransformer': nrn_layers.SpatialTransformer}",
                    "type": "Dict",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "tensorflow": {
            "Input_407": {
                "variable": {
                    "value": "warped_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "img_shape[0:-1] + (n_labels,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Model_410": {
                "variable": {
                    "value": "ce_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[warped_in]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[warped]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "ce_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_408": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_350": {
                "input_tensor": {
                    "value": "tf.abs(dCdx * tf.gather(segments_mask, tf.range(1, tf.shape(y_pred)[d + 1]), axis=d + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_411": {
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gather_346": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_pred)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_347": {
                "params": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, tf.shape(y_pred)[d + 1] - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_350": {
                "x": {
                    "value": "dCdx * tf.gather(segments_mask, tf.range(1, tf.shape(y_pred)[d + 1]), axis=d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Summary_378": {
                "value": {
                    "value": "[tf.Summary.Value(tag=loss_names[i], simple_value=loss_vals[i])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_350": {
                "params": {
                    "value": "segments_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - self.warped_contours_layer_output",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.range(1, tf.shape(y_pred)[d + 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_346": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_347": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_350": {
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}