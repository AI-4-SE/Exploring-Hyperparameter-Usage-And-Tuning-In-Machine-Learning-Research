{
    "examples/document_clustering.py": {
        "sklearn": {
            "fetch_20newsgroups_46": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "subset": {
                    "value": "all",
                    "type": "Constant",
                    "possible_values": []
                },
                "categories": {
                    "value": "categories",
                    "type": "Name",
                    "possible_values": [
                        [
                            "['alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space']",
                            "List"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TfidfVectorizer_57": {
                "variable": {
                    "value": "vectorizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "stop_words": {
                    "value": "english",
                    "type": "Constant",
                    "possible_values": []
                },
                "use_idf": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "KMeans_85": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "true_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.unique(labels).shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "init": {
                    "value": "k-means++",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TruncatedSVD_71": {
                "variable": {
                    "value": "svd",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                }
            },
            "Normalizer_72": {
                "variable": {
                    "value": "normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "copy": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_pipeline_73": {
                "variable": {
                    "value": "lsa",
                    "type": "Variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "svd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "TruncatedSVD(n_components)",
                            "Call"
                        ]
                    ]
                },
                "memory": {
                    "value": "normalizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normalizer(copy=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "homogeneity_score_93": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_94": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_95": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_96": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_97": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_98": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_100": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_101": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_102": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_104": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_106": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_108": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "silhouette_score_110": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_124": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_125": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_126": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_128": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_130": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_132": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "silhouette_score_134": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_140": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_141": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_142": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_143": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_144": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_145": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_159": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_160": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_161": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_163": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_165": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_167": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "silhouette_score_169": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_175": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_176": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_177": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_178": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_179": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_180": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_194": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_195": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_196": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_198": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_200": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_202": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "silhouette_score_204": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_210": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_211": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_212": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_rand_score_213": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adjusted_mutual_info_score_214": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.target",
                            "Attribute"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "silhouette_score_215": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "vectorizer.fit_transform(dataset.data)",
                            "Call"
                        ],
                        [
                            "lsa.fit_transform(X)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "examples/small_mix.py": {
        "sklearn": {
            "KMeans_50": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_init": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_214": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "homogeneity_score_215": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "homogeneity_score_216": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "homogeneity_score_217": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_220": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_221": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_222": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_223": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_226": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_227": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_228": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_229": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "examples/small_mix_3d.py": {
        "sklearn": {
            "KMeans_46": {
                "variable": {
                    "value": "km",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_init": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "homogeneity_score_193": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "homogeneity_score_194": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "homogeneity_score_195": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "homogeneity_score_196": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_199": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_200": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_201": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "completeness_score_202": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_205": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "km.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_206": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "skm.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_207": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_soft.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "v_measure_score_208": {
                "labels_true": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((2 * num_points_per_class,))",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "vmf_hard.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "spherecluster/spherical_kmeans.py": {
        "sklearn": {
            "check_random_state_39": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(self.random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_random_state_144": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(self.random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_array_155": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32], order=order, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "csr",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[np.float64, np.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "order": {
                    "value": "order",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'C' if copy_x else None",
                            "IfExp"
                        ]
                    ]
                },
                "copy": {
                    "value": "copy_x",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_88": {
                "variable": {
                    "value": "centers",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "centers",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_init_centroids(X, n_clusters, init, random_state=random_state, x_squared_norms=x_squared_norms)",
                            "Call"
                        ],
                        [
                            "_k_means._centers_sparse(X, sample_weight, labels, n_clusters, distances)",
                            "Call"
                        ],
                        [
                            "_k_means._centers_dense(X.astype(np.float), sample_weight.astype(np.float), labels, n_clusters, distances.astype(np.float))",
                            "Call"
                        ],
                        [
                            "normalize(centers)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_166": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "check_array(init, dtype=X.dtype.type, order='C', copy=True)",
                            "Call"
                        ],
                        [
                            "'k-means++'",
                            "MethodArgument"
                        ],
                        [
                            "'k-means++'",
                            "MethodArgument"
                        ],
                        [
                            "'k-means++'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "order": {
                    "value": "C",
                    "type": "Constant",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "check_random_state_353": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_351": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32], order=order, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "spherecluster/tests/test_common.py": {
        "sklearn": {
            "check_estimator_6": {
                "estimator": {
                    "value": "SphericalKMeans",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "spherecluster/von_mises_fisher_mixture.py": {
        "sklearn": {
            "check_random_state_447": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(self.random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_random_state_520": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "random_state",
                    "type": "Call",
                    "possible_values": [
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(random_state)",
                            "Call"
                        ],
                        [
                            "check_random_state(self.random_state)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_float_array_529": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                },
                "copy": {
                    "value": "copy_x",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "check_array_533": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "init",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "check_array(init, dtype=X.dtype.type, copy=True)",
                            "Call"
                        ],
                        [
                            "'random-class'",
                            "MethodArgument"
                        ],
                        [
                            "'random-class'",
                            "MethodArgument"
                        ],
                        [
                            "'random-class'",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "X.dtype.type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "copy": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "check_array_773": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "csr",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "[np.float64, np.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "check_array_793": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "csr",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "FLOAT_DTYPES",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "check_random_state_824": {
                "variable": {
                    "value": "random_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "seed": {
                    "value": "self.random_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_821": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_885": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_is_fitted_887": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cosine_distances_893": {
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "self.cluster_centers_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_914": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_is_fitted_916": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "normalize_935": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "X.reshape((1, len(X)))",
                            "Call"
                        ],
                        [
                            "as_float_array(X, copy=copy_x)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=[np.float64, np.float32])",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse='csr', dtype=FLOAT_DTYPES)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_fit_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ],
                        [
                            "normalize(X)",
                            "Call"
                        ],
                        [
                            "self._check_test_data(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_is_fitted_937": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "check_is_fitted_942": {
                "estimator": {
                    "value": "self",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}