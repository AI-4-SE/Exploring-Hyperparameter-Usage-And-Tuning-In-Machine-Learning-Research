{
    "cifar_gan_train.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pro_gan_pytorch/CustomLayers.py": {
        "torch": {
            "Parameter_26": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.nn.init.normal_(th.empty(c_out, c_in, *_pair(k_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.nn.init.normal_(th.empty(c_in, c_out, *_pair(k_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_125": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.nn.init.normal_(th.empty(c_out, c_in))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_199": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_208": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_253": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sqrt_324": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y.pow(2.0).mean(dim=0, keepdim=False) + alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_367": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_422": {
                "variable": {
                    "value": "self.label_embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_425": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "squeeze_448": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.pow(2.0).mean(dim=1, keepdim=True).add(alpha).sqrt()",
                            "Call"
                        ],
                        [
                            "x / y",
                            "BinOp"
                        ],
                        [
                            "th.unsqueeze(th.unsqueeze(x, -1), -1)",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_1(y))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_2(y))",
                            "Call"
                        ],
                        [
                            "self.pixNorm(y)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.pixNorm(self.lrelu(self.conv_1(y)))",
                            "Call"
                        ],
                        [
                            "self.pixNorm(self.lrelu(self.conv_2(y)))",
                            "Call"
                        ],
                        [
                            "x - x.mean(dim=0, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "th.sqrt(y.pow(2.0).mean(dim=0, keepdim=False) + alpha)",
                            "Call"
                        ],
                        [
                            "y.mean().view(1, 1, 1, 1)",
                            "Call"
                        ],
                        [
                            "y.repeat(batch_size, 1, height, width)",
                            "Call"
                        ],
                        [
                            "th.cat([x, y], 1)",
                            "Call"
                        ],
                        [
                            "self.batch_discriminator(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_1(y))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_2(y))",
                            "Call"
                        ],
                        [
                            "self.conv_3(y)",
                            "Call"
                        ],
                        [
                            "self.batch_discriminator(x)",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_1(y))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_2(y))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_3(y))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_1(x))",
                            "Call"
                        ],
                        [
                            "self.lrelu(self.conv_2(y))",
                            "Call"
                        ],
                        [
                            "self.downSampler(y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_483": {
                "variable": {
                    "value": "self.downSampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_486": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(c_out).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_86": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(c_out).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv_transpose2d_99": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(c_out).fill_(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_144": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias if self.use_bias else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_192": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_246": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_361": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_362": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_364": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_415": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_416": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_419": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_480": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_481": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_235": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_27": {
                "*size": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*_pair(k_size)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_78": {
                "*size": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "*_pair(k_size)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "empty_126": {
                "*size": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pro_gan_pytorch/DataTools.py": {
        "torch": {
            "DataLoader_38": {
                "variable": {
                    "value": "dl",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_workers",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "pro_gan_pytorch/Losses.py": {
        "torch": {
            "BCEWithLogitsLoss_69": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_123": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_186": {
                "variable": {
                    "value": "real_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis(real_samps, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_187": {
                "variable": {
                    "value": "fake_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis(fake_samps, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_192": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis(fake_samps, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_264": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_322": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sigmoid_386": {
                "variable": {
                    "value": "real_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis(real_samps, labels, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_387": {
                "variable": {
                    "value": "fake_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis(fake_samps, labels, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_392": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.dis(fake_samps, labels, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_85": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "real_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_99": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_133": {
                "outputs": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(merged, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(merged, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ],
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "th.ones_like(op)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_161": {
                "input": {
                    "value": "self.dis(fake_samps, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_176": {
                "input": {
                    "value": "(self.dis(fake_samps, height, alpha) - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "input": {
                    "value": "(scores - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_205": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_206": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_211": {
                "input": {
                    "value": "self.dis(fake_samps, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_225": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_228": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_231": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_232": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_242": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_245": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_248": {
                "input": {
                    "value": "th.nn.ReLU()(1 + r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_249": {
                "input": {
                    "value": "th.nn.ReLU()(1 - f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_280": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_281": {
                "*size": {
                    "value": "real_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_285": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_286": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_293": {
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_294": {
                "*size": {
                    "value": "fake_samps.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "grad_332": {
                "outputs": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(merged, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(merged, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "merged",
                    "type": "variable",
                    "possible_values": [
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ],
                        [
                            "epsilon * real_samps + (1 - epsilon) * fake_samps",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "th.ones_like(op)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_361": {
                "input": {
                    "value": "self.dis(fake_samps, labels, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_376": {
                "input": {
                    "value": "(self.dis(fake_samps, labels, height, alpha) - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_393": {
                "input": {
                    "value": "(scores - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_405": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_406": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_preds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_411": {
                "input": {
                    "value": "self.dis(fake_samps, labels, height, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_425": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_428": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_431": {
                "input": {
                    "value": "th.nn.ReLU()(1 - r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_432": {
                "input": {
                    "value": "th.nn.ReLU()(1 + f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_442": {
                "input": {
                    "value": "f_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(fake_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_445": {
                "input": {
                    "value": "r_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_448": {
                "input": {
                    "value": "th.nn.ReLU()(1 + r_f_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_449": {
                "input": {
                    "value": "th.nn.ReLU()(1 - f_r_diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_149": {
                "input": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_150": {
                "input": {
                    "value": "real_out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_172": {
                "input": {
                    "value": "(self.dis(real_samps, height, alpha) - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_173": {
                "input": {
                    "value": "self.dis(fake_samps, height, alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_188": {
                "input": {
                    "value": "fake_scores ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_348": {
                "input": {
                    "value": "real_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(real_samps, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(real_samps, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_349": {
                "input": {
                    "value": "real_out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_372": {
                "input": {
                    "value": "(self.dis(real_samps, labels, height, alpha) - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_373": {
                "input": {
                    "value": "self.dis(fake_samps, labels, height, alpha) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_388": {
                "input": {
                    "value": "fake_scores ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_134": {
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(merged, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(merged, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_248": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_333": {
                "input": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dis(merged, height, alpha)",
                            "Call"
                        ],
                        [
                            "self.dis(merged, labels, height, alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_431": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_432": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_449": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "pro_gan_pytorch/PRO_GAN.py": {
        "torch": {
            "ModuleList_48": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_59": {
                "variable": {
                    "value": "self.rgb_converters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.toRGB(self.latent_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.rgb_to_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.fromRGB(self.feature_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AvgPool2d_174": {
                "variable": {
                    "value": "self.temporaryDownsampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_245": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_256": {
                "variable": {
                    "value": "self.rgb_to_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.fromRGB(self.feature_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AvgPool2d_276": {
                "variable": {
                    "value": "self.temporaryDownsampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_366": {
                "variable": {
                    "value": "self.gen_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_369": {
                "variable": {
                    "value": "self.dis_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_579": {
                "variable": {
                    "value": "fixed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_757": {
                "variable": {
                    "value": "self.gen_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.gen.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_760": {
                "variable": {
                    "value": "self.dis_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.dis.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta_1, beta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-08",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_1001": {
                "variable": {
                    "value": "fixed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "fixed_labels.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size - self.num_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1003": {
                "variable": {
                    "value": "fixed_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(fixed_labels, fixed_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_320": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_352": {
                "variable": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_353": {
                "variable": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_446": {
                "variable": {
                    "value": "prior_ds_real_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AvgPool2d(prior_downsample_factor)(real_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_530": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate(samples, scale_factor=scale_factor)",
                            "Call"
                        ],
                        [
                            "interpolate(samples, scale_factor=scale_factor)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_705": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_742": {
                "variable": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.gen",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_743": {
                "variable": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.dis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_836": {
                "variable": {
                    "value": "prior_ds_real_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "AvgPool2d(prior_downsample_factor)(real_batch)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_924": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "interpolate(samples, scale_factor=scale_factor)",
                            "Call"
                        ],
                        [
                            "interpolate(samples, scale_factor=scale_factor)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale_factor",
                            "Method Argument"
                        ],
                        [
                            "scale_factor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_950": {
                "variable": {
                    "value": "self.label_oh_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_951": {
                "variable": {
                    "value": "self.label_oh_encoder.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_351": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AvgPool2d_443": {
                "kernel_size": {
                    "value": "down_sample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.power(2, self.depth - depth - 1))",
                            "Call"
                        ],
                        [
                            "int(np.power(2, self.depth - depth - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_741": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AvgPool2d_833": {
                "kernel_size": {
                    "value": "down_sample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.power(2, self.depth - depth - 1))",
                            "Call"
                        ],
                        [
                            "int(np.power(2, self.depth - depth - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_254": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_610": {
                "variable": {
                    "value": "gan_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_1041": {
                "variable": {
                    "value": "latent_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "images.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.latent_size - self.num_classes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_1043": {
                "variable": {
                    "value": "gan_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(label_information, latent_vector)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "AvgPool2d_446": {
                "kernel_size": {
                    "value": "prior_downsample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(np.power(2, self.depth - depth)), 0)",
                            "Call"
                        ],
                        [
                            "max(int(np.power(2, self.depth - depth)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_674": {
                "obj": {
                    "value": "self.gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_GEN_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_675": {
                "obj": {
                    "value": "self.dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_DIS_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_676": {
                "obj": {
                    "value": "self.gen_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_GEN_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_677": {
                "obj": {
                    "value": "self.dis_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_DIS_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "AvgPool2d_836": {
                "kernel_size": {
                    "value": "prior_downsample_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(int(np.power(2, self.depth - depth)), 0)",
                            "Call"
                        ],
                        [
                            "max(int(np.power(2, self.depth - depth)), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1110": {
                "obj": {
                    "value": "self.gen.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_GEN_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1111": {
                "obj": {
                    "value": "self.dis.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_DIS_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1112": {
                "obj": {
                    "value": "self.gen_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_GEN_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1113": {
                "obj": {
                    "value": "self.dis_optim.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "dis_optim_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_DIS_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_DIS_OPTIM_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_683": {
                "obj": {
                    "value": "self.gen_shadow.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_shadow_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_SHADOW_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_GEN_SHADOW_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_1119": {
                "obj": {
                    "value": "self.gen_shadow.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "gen_shadow_save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_dir, 'GAN_GEN_SHADOW_' + str(current_depth) + '.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(save_dir, 'GAN_GEN_SHADOW_' + str(current_depth) + '.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_640": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_1076": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "samples/demo.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_91": {
                "variable": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_99": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.num_points * args.transition_points",
                            "BinOp"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_filter(all_latents.cpu(), [args.smoothing * args.transition_points, 0], mode='wrap')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_107": {
                "variable": {
                    "value": "start_point",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_latents[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_66": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_95": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "str(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_118": {
                "input": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": [
                        [
                            "point",
                            "Method Argument"
                        ],
                        [
                            "point",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "samples/generate_samples.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_84": {
                "variable": {
                    "value": "gen",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_72": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "str(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_102": {
                "variable": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "samples/latent_space_interpolation.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_94": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "Generator(depth=args.depth, latent_size=args.latent_size).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(args.time * args.fps)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.latent_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_110": {
                "variable": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_latents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.randn(total_frames, args.latent_size).to(device)",
                            "Call"
                        ],
                        [
                            "gaussian_filter(all_latents.cpu(), [args.smoothing * args.fps, 0])",
                            "Call"
                        ],
                        [
                            "th.from_numpy(all_latents)",
                            "Call"
                        ],
                        [
                            "all_latents / all_latents.norm(dim=-1, keepdim=True) * sqrt(args.latent_size)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_75": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data * scale + bias",
                            "BinOp"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tqdm(all_latents)",
                            "Call"
                        ],
                        [
                            "th.unsqueeze(latent, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_100": {
                "f": {
                    "value": "args.generator_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "str(device)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "test/test_CustomLayers.py": {
        "torch": {
            "device_6": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if th.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "randn_18": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_43": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_69": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_114": {
                "variable": {
                    "value": "mock_in",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "13",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_23": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_24": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_48": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_49": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_74": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_75": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_96": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_96": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_97": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_119": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isinf_120": {
                "input": {
                    "value": "mock_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.deconv_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.lin_block(mock_in)",
                            "Call"
                        ],
                        [
                            "self.normalizer(mock_in)",
                            "Call"
                        ],
                        [
                            "self.minStdD(mock_in)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}