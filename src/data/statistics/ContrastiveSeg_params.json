{
    "lib/vis/attention_visualizer.py": {
        "sklearn": {},
        "torch": {}
    },
    "lib/datasets/data_loader.py": {
        "torch": {
            "DataLoader_135": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klass(root_dir, **kwargs)",
                            "Call"
                        ],
                        [
                            "MultiDatasetLoader(root_dir, klass, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'train', 'train')",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'val', dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.configer.get('train', 'batch_size') // get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.configer.get('data', 'workers') // get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(loader)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(loader)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "MultiDatasetTrainingSampler(loader)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'train', 'train')",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'val', dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "sampler is None",
                    "type": "Compare",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "self.configer.get('data', 'drop_last')",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda *args: collate(*args, trans_dict=self.configer.get('train', 'data_transformer'))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klass(root_dir, **kwargs)",
                            "Call"
                        ],
                        [
                            "MultiDatasetLoader(root_dir, klass, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'train', 'train')",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'val', dataset)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.distributed.DistributedSampler(loader)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.distributed.DistributedSampler(loader)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "MultiDatasetTrainingSampler(loader)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'train', 'train')",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'val', dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.configer.get('val', 'batch_size') // get_world_size()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.configer.get('data', 'workers')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda *args: collate(*args, trans_dict=self.configer.get('val', 'data_transformer'))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_186": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "SWOffsetTestLoader(root_dir=self.configer.get('data', 'data_dir'), dataset=dataset, img_transform=self.img_transform, configer=self.configer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.configer.get('test', 'batch_size')",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.configer.get('data', 'workers')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda *args: collate(*args, trans_dict=self.configer.get('test', 'data_transformer'))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedSampler_82": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klass(root_dir, **kwargs)",
                            "Call"
                        ],
                        [
                            "MultiDatasetLoader(root_dir, klass, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'train', 'train')",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'val', dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CSDataTestLoader(root_dir=root_dir, dataset=dataset, img_transform=self.img_transform, configer=self.configer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.configer.get('test', 'batch_size')",
                    "type": "Call",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.configer.get('data', 'workers')",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "lambda *args: collate(*args, trans_dict=self.configer.get('test', 'data_transformer'))",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedSampler_91": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klass(root_dir, **kwargs)",
                            "Call"
                        ],
                        [
                            "MultiDatasetLoader(root_dir, klass, **kwargs)",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'train', 'train')",
                            "Call"
                        ],
                        [
                            "self.get_dataloader_sampler(klass, 'val', dataset)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/loader/ade20k_loader.py": {
        "torch": {
            "zeros_102": {
                "variable": {
                    "value": "batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.configer.get('train', 'batch_per_gpu')",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(border_height)",
                            "Call"
                        ],
                        [
                            "target_height + pad_h",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(border_width)",
                            "Call"
                        ],
                        [
                            "target_width + pad_w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_103": {
                "variable": {
                    "value": "batch_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.configer.get('train', 'batch_per_gpu')",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "target_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(border_height)",
                            "Call"
                        ],
                        [
                            "target_height + pad_h",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "target_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(border_width)",
                            "Call"
                        ],
                        [
                            "target_width + pad_w",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/loader/default_loader.py": {
        "torch": {}
    },
    "lib/datasets/loader/lip_loader.py": {
        "torch": {}
    },
    "lib/datasets/loader/multi_dataset_loader.py": {
        "torch": {
            "randperm_148": {
                "n": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.data_source) // self.data_source.num_datasets",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/loader/offset_loader.py": {
        "torch": {
            "from_numpy_103": {
                "variable": {
                    "value": "distance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "distance_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dct['depth'].astype(np.int32)",
                            "Call"
                        ],
                        [
                            "self._load_maps(self.offset_list[index], labelmap)",
                            "Call"
                        ],
                        [
                            "self.aug_transform(img, labelmap=labelmap, distance_map=distance_map, angle_map=angle_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(distance_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "angle_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "angle_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._load_maps(self.offset_list[index], labelmap)",
                            "Call"
                        ],
                        [
                            "self.aug_transform(img, labelmap=labelmap, distance_map=distance_map, angle_map=angle_map)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(angle_map)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "offsetmap_h",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(offsetmap_h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "variable": {
                    "value": "offsetmap_w",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(offsetmap_w)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/preprocess/ade20k/dt_offset_generator.py": {
        "torch": {
            "cat_129": {
                "variable": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sobel_y, sobel_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_83": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(depth_i).float().view(1, 1, *depth_i.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sobel_y, sobel_x], dim=0).view(2, 1, ksize, ksize).float()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_83": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_83": {
                "ndarray": {
                    "value": "depth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_transform_edt(labelmap_i)",
                            "Call"
                        ],
                        [
                            "distance_transform_cdt(labelmap_i, metric='taxicab')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/preprocess/cityscapes/dt_offset_generator.py": {
        "torch": {
            "cat_124": {
                "variable": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sobel_y, sobel_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(depth_i).float().view(1, 1, *depth_i.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sobel_y, sobel_x], dim=0).view(2, 1, ksize, ksize).float()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_82": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "ndarray": {
                    "value": "depth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_transform_edt(labelmap_i)",
                            "Call"
                        ],
                        [
                            "distance_transform_cdt(labelmap_i, metric='taxicab')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/preprocess/cityscapes/instance_dt_offset_generator.py": {
        "torch": {
            "cat_142": {
                "variable": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sobel_y, sobel_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "coord_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([torch.arange(length) for length in _offset.shape[:-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_45": {
                "ndarray": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_45": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_102": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(depth_i).float().view(1, 1, *depth_i.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([sobel_y, sobel_x], dim=0).view(2, 1, ksize, ksize).float()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "permute_102": {
                "variable": {
                    "value": "dir_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "meshgrid_59": {
                "*tensors": {
                    "value": "[torch.arange(length) for length in _offset.shape[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_59": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "depth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_transform_edt(labelmap_i)",
                            "Call"
                        ],
                        [
                            "distance_transform_cdt(labelmap_i, metric='taxicab')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/preprocess/lip/lip.py": {
        "torch": {}
    },
    "lib/datasets/preprocess/pascal_context/pascal_context_generator.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "self.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('train.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "self.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('val.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/preprocess/pascal_voc/pascal_voc_generator.py": {
        "torch": {
            "load_44": {
                "variable": {
                    "value": "self.train_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.ori_root_dir, 'PytorchEncoding/train.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "self.val_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.ori_root_dir, 'PytorchEncoding/val.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/tools/collate.py": {
        "torch": {
            "interpolate_99": {
                "variable": {
                    "value": "labelmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labelmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[i]['labelmap'].data.unsqueeze(0).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(labelmap, scaled_size_hw, mode='nearest').long().squeeze(0).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "scaled_size_hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scaled_size[1], scaled_size[0])",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_99": {
                "variable": {
                    "value": "labelmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_104": {
                "variable": {
                    "value": "maskmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maskmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[i]['maskmap'].data.unsqueeze(0).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(maskmap, scaled_size_hw, mode='nearest').long().squeeze(0).squeeze(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "scaled_size_hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scaled_size[1], scaled_size[0])",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_104": {
                "variable": {
                    "value": "maskmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "input": {
                    "value": "batch[i]['img'].data.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "scaled_size_hw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(scaled_size[1], scaled_size[0])",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_143": {
                "input": {
                    "value": "batch[i]['img'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_146": {
                "input": {
                    "value": "batch[i]['labelmap'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_149": {
                "input": {
                    "value": "batch[i]['maskmap'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_152": {
                "input": {
                    "value": "batch[i]['distance_map'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "255",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_155": {
                "input": {
                    "value": "batch[i]['angle_map'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_158": {
                "input": {
                    "value": "batch[i]['mask_label_map'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_161": {
                "input": {
                    "value": "batch[i]['direction_label_map'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_164": {
                "input": {
                    "value": "batch[i]['multi_label_direction_map'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_167": {
                "input": {
                    "value": "batch[i]['energy_label_map'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_170": {
                "input": {
                    "value": "batch[i]['offsetmap_h'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_173": {
                "input": {
                    "value": "batch[i]['offsetmap_w'].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(left_pad, pad_width - left_pad, up_pad, pad_height - up_pad)",
                            "Tuple"
                        ]
                    ]
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/datasets/tools/transforms.py": {
        "torch": {
            "from_numpy_79": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_81": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "np.array(inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/cc_attention/_ext/__init__.py": {
        "torch": {}
    },
    "lib/extensions/cc_attention/build.py": {
        "torch": {}
    },
    "lib/extensions/cc_attention/functions.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(n, h + w - 1, h, w)",
                            "Tuple"
                        ]
                    ]
                },
                "dtype": {
                    "value": "t.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "t.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "t.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_40": {
                "variable": {
                    "value": "dt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.t_func(x)",
                            "Call"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_41": {
                "variable": {
                    "value": "df",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_func(x)",
                            "Call"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_func(x)",
                            "Call"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_66": {
                "variable": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(size, dtype=t.dtype, layout=t.layout, device=t.device)",
                            "Call"
                        ],
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "dg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_func(x)",
                            "Call"
                        ],
                        [
                            "g",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.t_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.f_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_inner",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_inner",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.g_func",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.inc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_103": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t.size()",
                            "Call"
                        ],
                        [
                            "ca_weight(t, f)",
                            "Call"
                        ],
                        [
                            "F.softmax(w, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_126": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ca_weight(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "variable": {
                    "value": "self.query_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.key_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim // 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "self.value_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_142": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_155": {
                "variable": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.query_conv(x)",
                            "Call"
                        ],
                        [
                            "self.query_conv(x).view(m_batchsize, -1, width * height).permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "proj_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.key_conv(x)",
                            "Call"
                        ],
                        [
                            "self.key_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_156": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "energy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ca_weight(proj_query, proj_key)",
                            "Call"
                        ],
                        [
                            "torch.bmm(proj_query, proj_key)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_159": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.value_conv(x)",
                            "Call"
                        ],
                        [
                            "self.value_conv(x).view(m_batchsize, -1, width * height)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attention.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/dcn/_ext/deform_conv/__init__.py": {
        "torch": {}
    },
    "lib/extensions/dcn/_ext/modulated_dcn/__init__.py": {
        "torch": {}
    },
    "lib/extensions/dcn/build.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/dcn/build_modulated.py": {
        "torch": {
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/dcn/functions/deform_conv.py": {
        "torch": {}
    },
    "lib/extensions/dcn/functions/modulated_dcn_func.py": {
        "torch": {
            "zeros_152": {
                "*size": {
                    "value": "rois.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/dcn/modules/deform_conv.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/dcn/modules/modulated_dcn.py": {
        "torch": {
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.stride, self.stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_69": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(out, 3, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ],
                        [
                            "self.mask_fc(x.view(n, -1))",
                            "Call"
                        ],
                        [
                            "mask.view(n, 1, self.pooled_size, self.pooled_size)",
                            "Call"
                        ],
                        [
                            "mask",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "self.offset_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pooled_size * self.pooled_size * self.output_dim, self.deform_fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.mask_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.pooled_size * self.pooled_size * self.output_dim, self.deform_fc_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "self.pooled_size * self.pooled_size * self.output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_148": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooled_size * self.pooled_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_153": {
                "in_features": {
                    "value": "self.pooled_size * self.pooled_size * self.output_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_155": {
                "in_features": {
                    "value": "self.deform_fc_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.pooled_size * self.pooled_size * 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sigmoid_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/dcn/test.py": {
        "torch": {
            "Conv2d_14": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_deformable_groups * 2 * kH * kW",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kH, kW)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_29": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "inC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "lib/extensions/dcn/test_modulated.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_36": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_40": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_42": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_78": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_80": {
                "variable": {
                    "value": "batch_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_82": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_83": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_84": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "(20, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "rois",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(batch_inds, x, y, x + w, y + h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/frn/frn.py": {
        "torch": {
            "Tensor_17": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_30": {
                "variable": {
                    "value": "nu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_34": {
                "input": {
                    "value": "self.gamma * x + self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_32": {
                "input": {
                    "value": "nu2 + torch.abs(self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_32": {
                "input": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/inplace_abn/bn.py": {
        "torch": {
            "batch_norm_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_51": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_66": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_45": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_46": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_70": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/inplace_abn/functions.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "_backend",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "inplace_abn",
                    "type": "str",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O3']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[path.join(_src_path, f) for f in ['inplace_abn.cpp', 'inplace_abn_cpu.cpp', 'inplace_abn_cuda.cu']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "extra_cuda_cflags": {
                    "value": "['--expt-extended-lambda']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_168": {
                "variable": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[mean.unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "comm.gather(means)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_169": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[var.unsqueeze(0)]",
                            "List"
                        ],
                        [
                            "comm.gather(vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_coalesced_174": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[mean.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_224": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edz, eydz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[edz.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_add_221": {
                "inputs": {
                    "value": "edzs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[edz]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_add_222": {
                "inputs": {
                    "value": "eydzs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[eydz]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "lib/extensions/inplace_abn_1/bn.py": {
        "torch": {
            "batch_norm_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_44": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_45": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_50": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_65": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_44": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "leaky_relu_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "elu_69": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/inplace_abn_1/functions.py": {
        "torch": {
            "load_10": {
                "variable": {
                    "value": "_backend",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "inplace_abn",
                    "type": "str",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O3']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[path.join(_src_path, f) for f in ['inplace_abn.cpp', 'inplace_abn_cpu.cpp', 'inplace_abn_cuda.cu', 'inplace_abn_cuda_half.cu']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "extra_cuda_cflags": {
                    "value": "['--expt-extended-lambda']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_initialized_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/inplace_abn_1/misc.py": {
        "torch": {}
    },
    "lib/extensions/pacnet/pac.py": {
        "torch": {
            "conv_transpose2d_73": {
                "variable": {
                    "value": "input_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "input_nd",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w_one",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nd.new_ones(1, 1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_74": {
                "variable": {
                    "value": "input_nd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "input_nd",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_85": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_nd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv_transpose2d(input_nd, w_one, stride=stride)",
                            "Call"
                        ],
                        [
                            "F.pad(input_nd, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "input_nd",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size,) * n_dims if isinstance(kernel_size, Number) else kernel_size",
                            "IfExp"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "tuple(weight.shape[-2:])",
                            "Call"
                        ],
                        [
                            "tuple(weight.shape[-2:])",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "_pair(kernel_size)",
                            "Call"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(dilation,) * n_dims if isinstance(dilation, Number) else dilation",
                            "IfExp"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "_pair(dilation)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "dilation",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(padding,) * n_dims if isinstance(padding, Number) else padding",
                            "IfExp"
                        ],
                        [
                            "_pair(0)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "tuple(((k - 1) * d // 2 for (k, d) in zip(kernel_size, dilation)))",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unfold_101": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_108": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * diff_sq",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unfold_120": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_160": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_244": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unfold_326": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_329": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(mask, dtype=input.dtype, device=input.device)",
                            "Call"
                        ],
                        [
                            "nd2col(mask, kernel_size, stride=stride, padding=padding, output_padding=output_padding, dilation=dilation, transposed=transposed)",
                            "Call"
                        ],
                        [
                            "mask_pattern",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_491": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "pad_493": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "einsum_166": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,zykl->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_168": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,ojkl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_190": {
                "variable": {
                    "value": "in_cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_215": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn->o",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_250": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,jokl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_252": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,jokl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(in_mul_k, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv_transpose2d_277": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.in_ch",
                            "Attribute"
                        ],
                        [
                            "ctx.in_ch",
                            "Attribute"
                        ]
                    ]
                }
            },
            "pad_278": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad[1][0], pad[1][1], pad[0][0], pad[0][1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_279": {
                "variable": {
                    "value": "in_cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_306": {
                "variable": {
                    "value": "grad_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn->o",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_341": {
                "variable": {
                    "value": "grad_im2col_output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,izklmn->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, kernel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_352": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "ctx.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "ctx.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "ctx.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "ctx.stride",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_354": {
                "variable": {
                    "value": "grad_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, cols)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "conv2d_414": {
                "variable": {
                    "value": "smoothed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_for_kernel_crop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, 1, in_h, in_w)[:, :, crop[0]:_neg_idx(crop[0]), crop[1]:_neg_idx(crop[1])]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "smooth_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smooth_1d",
                            "variable"
                        ],
                        [
                            "smooth_1d",
                            "variable"
                        ],
                        [
                            "smooth_kernel * smooth_1d.view(-1, *repeat(1, d))",
                            "BinOp"
                        ],
                        [
                            "smooth_kernel * smooth_1d.view(-1, *repeat(1, d))",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(stride,) * n_dims if isinstance(stride, Number) else stride",
                            "IfExp"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(1)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "_pair(stride)",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "tuple(np.maximum(0, smooth_padding))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_423": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nd2col(input, kernel_size, stride=stride, padding=padding, dilation=dilation)",
                            "Call"
                        ],
                        [
                            "x.view(bs, k_ch, -1, *x.shape[-2:]).contiguous()",
                            "Call"
                        ],
                        [
                            "x - feat_0",
                            "BinOp"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ],
                        [
                            "x * x",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "torch.exp_(x.mul_(-0.5))",
                            "Call"
                        ],
                        [
                            "inv_alpha.view(1, -1, 1, 1, 1) + torch.pow(x + epsilon, 0.5 * inv_lambda.view(1, -1, 1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + output_padding[1], pad[0], pad[0] + output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=stride, groups=ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1], pad[1] + ctx.output_padding[1], pad[0], pad[0] + ctx.output_padding[0]))",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(input, w, stride=ctx.stride, groups=in_ch)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (pad[1][0], pad[1][1], pad[0][0], pad[0][1]))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "einsum_468": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,zykl->ijmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(im_cols * kernel, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_470": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijklmn,ojkl->iomn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(im_cols * kernel, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_593": {
                "variable": {
                    "value": "self.smooth_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, *repeat(smooth_kernel_size, len(kernel_size)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_188": {
                "variable": {
                    "value": "grad_in_mul_k",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ojkl->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_210": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->kl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_213": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ijklmn->ojkl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_274": {
                "variable": {
                    "value": "grad_in_mul_k",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,jokl->ijklmn",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, weight)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_301": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ijmn,ijklmn->kl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "einsum_304": {
                "variable": {
                    "value": "grad_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "iomn,ijklmn->jokl",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(grad_output, in_mul_k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_569": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_581": {
                "variable": {
                    "value": "inv_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.inv_alpha_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_582": {
                "variable": {
                    "value": "inv_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float(self.inv_lambda_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_595": {
                "variable": {
                    "value": "smooth_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.25, 0.5, 0.25]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_447": {
                "data": {
                    "value": "empty_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm == 0",
                            "Compare"
                        ]
                    ]
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_563": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 1, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_602": {
                "variable": {
                    "value": "smooth_1d",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "(1.0 / smooth_kernel_size,) * smooth_kernel_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_430": {
                "input": {
                    "value": "x + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.5 * inv_lambda.view(1, -1, 1, 1, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_559": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*kernel_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_565": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_567": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels, *kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_578": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_579": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_584": {
                "data": {
                    "value": "inv_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(self.inv_alpha_init))",
                            "Call"
                        ],
                        [
                            "self.inv_alpha_init * torch.ones(out_channels)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_585": {
                "data": {
                    "value": "inv_lambda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(float(self.inv_lambda_init))",
                            "Call"
                        ],
                        [
                            "self.inv_lambda_init * torch.ones(out_channels)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_639": {
                "variable": {
                    "value": "self.weight.data[c, c, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "input.new_ones((in_ch, 1, 1, 1))",
                            "Call"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "w * (np.array((0.0,) * p + tuple(range(1, s)) + tuple(range(s, 0, -1)) + (0,) * p) / s).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ],
                        [
                            "w * np.array(tuple(((k - j - 1) // s + j // s + 1.0 for j in range(k)))).reshape((-1,) + (1,) * d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_650": {
                "variable": {
                    "value": "self.weight.data[0, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np_gaussian_2d(self.kernel_size[0]) * self.kernel_size[0] * self.kernel_size[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_653": {
                "variable": {
                    "value": "self.weight.data[:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "compat.reshape(n_classes, n_classes, 1, 1) * gauss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_like_655": {
                "input": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/pacnet/paccrf.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "mesh",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mesh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(np.meshgrid(*cord_range, indexing='ij'), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "th.from_numpy(mesh)",
                            "Call"
                        ],
                        [
                            "mesh.to(device)",
                            "Call"
                        ],
                        [
                            "mesh * (1.0 / scales.view(-1, 1, 1))",
                            "BinOp"
                        ],
                        [
                            "create_position_feats(img.shape[-2:], yx_scale, img.shape[0], img.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_37": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mesh, img]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_23": {
                "tensors": {
                    "value": "bs * [mesh]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ModuleList_70": {
                "variable": {
                    "value": "self.messengers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.compat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_73": {
                "variable": {
                    "value": "self.pairwise_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_235": {
                "variable": {
                    "value": "self.steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_21": {
                "variable": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "scales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.tensor(scales, dtype=th.float32, device=device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "rgb_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rgb_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales[2:]",
                            "Subscript"
                        ],
                        [
                            "th.tensor(rgb_scale, dtype=th.float32, device=img.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "variable": {
                    "value": "messenger",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(((off + 1) // 2 for off in offs))",
                            "Call"
                        ],
                        [
                            "int(kernel_size // 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "_ceil_pad_factor(Q.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], blurs[i])",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "unary * self.unary_weight",
                            "BinOp"
                        ],
                        [
                            "logQ - msg * pw",
                            "BinOp"
                        ],
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "step(unary, None, edge_kernel, logQ)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "unary * self.unary_weight",
                            "BinOp"
                        ],
                        [
                            "logQ - msg * pw",
                            "BinOp"
                        ],
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "step(unary, None, edge_kernel, logQ)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_293": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "unary * self.unary_weight",
                            "BinOp"
                        ],
                        [
                            "logQ - msg * pw",
                            "BinOp"
                        ],
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "step(unary, None, edge_kernel, logQ)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "data": {
                    "value": "th.tensor(float(unary_weight))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_132": {
                "data": {
                    "value": "th.tensor(pairwise_weight, dtype=th.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_218": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "unary * self.unary_weight",
                            "BinOp"
                        ],
                        [
                            "logQ - msg * pw",
                            "BinOp"
                        ],
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "step(unary, None, edge_kernel, logQ)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_295": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "unary * self.unary_weight",
                            "BinOp"
                        ],
                        [
                            "logQ - msg * pw",
                            "BinOp"
                        ],
                        [
                            "unary",
                            "variable"
                        ],
                        [
                            "step(unary, None, edge_kernel, logQ)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "float(unary_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_104": {
                "input": {
                    "value": "self.pairwise_weights[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "pairwise_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_weight * -1.0",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_199": {
                "variable": {
                    "value": "Q_blur[self.blur[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logQ, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.blur[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(((off + 1) // 2 for off in offs))",
                            "Call"
                        ],
                        [
                            "int(kernel_size // 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "_ceil_pad_factor(Q.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], blurs[i])",
                            "Call"
                        ]
                    ]
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_210": {
                "variable": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.messengers[i](Q_blur[self.blur[i]])",
                            "Call"
                        ],
                        [
                            "self.messengers[i](Q_blur[self.blur[i]], None, edge_kernel[i])",
                            "Call"
                        ],
                        [
                            "self.compat[i](msg)",
                            "Call"
                        ],
                        [
                            "F.interpolate(msg, scale_factor=self.blur[i], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "msg[:, :, pad[0]:pad[0] + unary.shape[2], pad[1]:pad[1] + unary.shape[3]].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "self.blur[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_100": {
                "n": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "th.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_180": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_feat[self.blur[i]]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[i]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[1] if _shared else edge_feat[i]",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(feat, kernel_size=self.blur[i], padding=pad, count_include_pad=False)",
                            "Call"
                        ],
                        [
                            "edge_feat[blurs[i]]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[i]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[1] if _shared else edge_feat[i]",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(feat, kernel_size=blurs[i], padding=pad, count_include_pad=False)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.blur[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(((off + 1) // 2 for off in offs))",
                            "Call"
                        ],
                        [
                            "int(kernel_size // 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "_ceil_pad_factor(Q.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], blurs[i])",
                            "Call"
                        ]
                    ]
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_278": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_feat[self.blur[i]]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[i]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[1] if _shared else edge_feat[i]",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(feat, kernel_size=self.blur[i], padding=pad, count_include_pad=False)",
                            "Call"
                        ],
                        [
                            "edge_feat[blurs[i]]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[i]",
                            "Subscript"
                        ],
                        [
                            "edge_feat[1] if _shared else edge_feat[i]",
                            "IfExp"
                        ],
                        [
                            "F.avg_pool2d(feat, kernel_size=blurs[i], padding=pad, count_include_pad=False)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "blurs[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self.steps[0].blur",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple(((off + 1) // 2 for off in offs))",
                            "Call"
                        ],
                        [
                            "int(kernel_size // 2) * dilation",
                            "BinOp"
                        ],
                        [
                            "_ceil_pad_factor(Q.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], self.blur[i])",
                            "Call"
                        ],
                        [
                            "_ceil_pad_factor(feat.shape[2:], blurs[i])",
                            "Call"
                        ]
                    ]
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_like_103": {
                "input": {
                    "value": "self.compat[i].weight.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/pacnet/test_pac.py": {
        "torch": {
            "gradcheck_21": {
                "func": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0",
                            "Method Argument"
                        ]
                    ]
                },
                "rtol": {
                    "value": "rtol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "atol": {
                    "value": "atol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Method Argument"
                        ],
                        [
                            "1e-08",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_54": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_61": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "ones_63": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_64": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_66": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "conv_th",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_80": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "ones_82": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_83": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_85": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_87": {
                "variable": {
                    "value": "conv_th",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_98": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "ones_100": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "AvgPool2d_102": {
                "variable": {
                    "value": "pool_th",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_110": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_111": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_121": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_122": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_135": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_136": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_139": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_140": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_153": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_154": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_169": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_170": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_173": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_174": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_185": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_186": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_194": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_195": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_203": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_205": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_222": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_225": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (f_sz - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (f_sz - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_233": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_235": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_254": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_255": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_263": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['in_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_265": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args['out_channels']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_282": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_283": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_302": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_324": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_325": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_328": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_329": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_346": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_347": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_350": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_351": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_362": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_363": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "k_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_372": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_382": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_383": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (f_sz - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (f_sz - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_386": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_387": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_398": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_399": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "sz_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * conv_args['stride'] - 2 * conv_args['padding'] + k_with_d + conv_args['output_padding']",
                            "BinOp"
                        ],
                        [
                            "(sz - 1) * args['stride'] - 2 * args['padding'] + k_with_d + args['output_padding']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_402": {
                "variable": {
                    "value": "conv_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "f_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_403": {
                "variable": {
                    "value": "conv_b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ]
                    ]
                }
            },
            "rand_414": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                },
                "layout": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "111",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "9",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ],
                        [
                            "256",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "8",
                            "int"
                        ]
                    ]
                }
            },
            "rand_415": {
                "variable": {
                    "value": "im_k",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ],
                        [
                            "4",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "24",
                            "int"
                        ],
                        [
                            "3",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "args['kernel_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (f_sz - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "out_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (f_sz - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ],
                        [
                            "int(np.floor((sz + 2 * args['padding'] - (args['kernel_size'] - 1) * args['dilation'] - 1) / args['stride'])) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_55": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/parallel/_functions.py": {
        "torch": {
            "device_22": {
                "type": {
                    "value": "devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "current_stream_39": {
                "variable": {
                    "value": "main_stream",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_38": {
                "type": {
                    "value": "devices[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/parallel/data_container.py": {
        "torch": {}
    },
    "lib/extensions/parallel/data_parallel.py": {
        "torch": {
            "is_grad_enabled_148": {
                "variable": {
                    "value": "grad_enabled",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_add_33": {
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sorted(inputs, key=lambda i: i.get_device())",
                            "Call"
                        ],
                        [
                            "self.scatter(inputs, kwargs, self.device_ids)",
                            "Call"
                        ],
                        [
                            "self.scatter([inputs], kwargs, self.device_ids)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_75": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "_criterion_parallel_apply(replicas, inputs, targets, kwargs)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_152": {
                "mode": {
                    "value": "grad_enabled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_156": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/extensions/parallel/distributed.py": {
        "torch": {
            "broadcast_25": {
                "tensor": {
                    "value": "flat_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_flatten_dense_tensors(tensors)",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/parallel/scatter_gather.py": {
        "torch": {}
    },
    "lib/extensions/switchablenorms/switchable_norm.py": {
        "torch": {
            "Parameter_11": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_50": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_125": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_206": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_73": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_75": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_156": {
                "variable": {
                    "value": "self.mean_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_157": {
                "variable": {
                    "value": "self.var_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_13": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_16": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_73": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_76": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_154": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_157": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ],
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/syncbn/allreduce.py": {
        "torch": {
            "broadcast_coalesced_37": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_46": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/extensions/syncbn/module.py": {
        "torch": {
            "load_33": {
                "variable": {
                    "value": "syncbn",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "syncbn",
                    "type": "str",
                    "possible_values": []
                },
                "sources": {
                    "value": "['lib/extensions/syncbn/src/operator.cpp', 'lib/extensions/syncbn/src/syncbn_kernel.cu']",
                    "type": "List",
                    "possible_values": []
                },
                "build_directory": {
                    "value": "build_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/tmp/bulid/syncbn'",
                            "str"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_norm_113": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(input_shape[0], self.num_features, -1)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss/aaf/layers.py": {
        "torch": {
            "pad_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=(0, 0, 1, 1, 1, 1, 0, 0), mode='reflect')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 1, 1, 1, 1, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.unsqueeze(c, dim=-1) for c in x_groups]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "[torch.unsqueeze(c, dim=-1) for c in x_groups]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_63": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=(0, 0, 1, 1, 1, 1, 0, 0), mode='reflect')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(p, p, p, p, 0, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.unsqueeze(c, dim=-1) for c in x_groups]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(output, dim=-1)",
                            "Call"
                        ],
                        [
                            "[torch.unsqueeze(c, dim=-1) for c in x_groups]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_117": {
                "variable": {
                    "value": "ignore_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels == ignore_index",
                            "Compare"
                        ],
                        [
                            "torch.cat(ignore_groups, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(p, p, p, p, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ignore_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[torch.unsqueeze(c, dim=-1) for c in ignore_groups]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_178": {
                "variable": {
                    "value": "labels_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, p, p, p, p, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "ignore_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_196": {
                "variable": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[torch.unsqueeze(c, dim=-1) for c in edge_groups]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_37": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_146": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_194": {
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss/aaf/losses.py": {
        "torch": {
            "squeeze_35": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "not_ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_not(ignore)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(not_ignore, dim=3)",
                            "Call"
                        ],
                        [
                            "~ignore",
                            "UnaryOp"
                        ],
                        [
                            "torch.unsqueeze(not_ignore, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_41": {
                "variable": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_48": {
                "variable": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(edge, (-1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_49": {
                "variable": {
                    "value": "not_edge_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(not_edge, (-1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_53": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(probs, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(probs < bot_epsilon, bot_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "torch.where(probs > top_epsilon, top_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_69": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "not_edge_loss * w_not_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_73": {
                "variable": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "not_edge_loss * w_not_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "not_edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.reshape(not_edge, (-1,)))",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.reshape(not_edge, (-1,)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(0.0, kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(0.0, requires_grad=False).cuda(), kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "edge_loss * w_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_75": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(0.0, kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(0.0, requires_grad=False).cuda(), kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "edge_loss * w_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.reshape(edge, (-1,)))",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.reshape(edge, (-1,)))",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(labels, dim=1)",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_123": {
                "variable": {
                    "value": "not_ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_ignore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_not(ignore)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(not_ignore, dim=3)",
                            "Call"
                        ],
                        [
                            "~ignore",
                            "UnaryOp"
                        ],
                        [
                            "torch.unsqueeze(not_ignore, dim=3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "nonzero_136": {
                "variable": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(edge, (-1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_143": {
                "variable": {
                    "value": "not_edge_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reshape(not_edge, (-1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_147": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(probs, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(probs < bot_epsilon, bot_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "torch.where(probs > top_epsilon, top_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "bot_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "variable": {
                    "value": "top_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_151": {
                "variable": {
                    "value": "neg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "1 - probs < bot_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "bot_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "torch.tensor(0.0001, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_152": {
                "variable": {
                    "value": "neg_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "neg_probs > top_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "top_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.tensor(1.0, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip(1 - probs, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.where(1 - probs < bot_epsilon, bot_epsilon, 1 - probs)",
                            "Call"
                        ],
                        [
                            "torch.where(neg_probs > top_epsilon, top_epsilon, neg_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_154": {
                "variable": {
                    "value": "neg_probs_paired",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "1 - probs_paired < bot_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "bot_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "torch.tensor(0.0001, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1 - probs_paired",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_155": {
                "variable": {
                    "value": "neg_probs_paired",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "neg_probs_paired > top_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "top_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.tensor(1.0, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "neg_probs_paired",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.clip(1 - probs_paired, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.where(1 - probs_paired < bot_epsilon, bot_epsilon, 1 - probs_paired)",
                            "Call"
                        ],
                        [
                            "torch.where(neg_probs_paired > top_epsilon, top_epsilon, neg_probs_paired)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_157": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs < bot_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "bot_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "torch.tensor(0.0001, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(probs, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(probs < bot_epsilon, bot_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "torch.where(probs > top_epsilon, top_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_158": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs > top_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "top_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.tensor(1.0, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "np.clip(probs, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(probs, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.where(probs < bot_epsilon, bot_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "torch.where(probs > top_epsilon, top_epsilon, probs)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_160": {
                "variable": {
                    "value": "probs_paired",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs_paired < bot_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "bot_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "torch.tensor(0.0001, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probs_paired",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnx.eightcorner_activation(probs, 1)",
                            "Call"
                        ],
                        [
                            "np.clip(probs_paired, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "nnx.eightcorner_activation(probs, size)",
                            "Call"
                        ],
                        [
                            "torch.where(probs_paired < bot_epsilon, bot_epsilon, probs_paired)",
                            "Call"
                        ],
                        [
                            "torch.where(probs_paired > top_epsilon, top_epsilon, probs_paired)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_161": {
                "variable": {
                    "value": "probs_paired",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "probs_paired > top_epsilon",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "top_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.tensor(1.0, requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "probs_paired",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnx.eightcorner_activation(probs, 1)",
                            "Call"
                        ],
                        [
                            "np.clip(probs_paired, bot_epsilon, top_epsilon)",
                            "Call"
                        ],
                        [
                            "nnx.eightcorner_activation(probs, size)",
                            "Call"
                        ],
                        [
                            "torch.where(probs_paired < bot_epsilon, bot_epsilon, probs_paired)",
                            "Call"
                        ],
                        [
                            "torch.where(probs_paired > top_epsilon, top_epsilon, probs_paired)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_175": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(0.0, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_179": {
                "variable": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.one_hot(labels, depth=num_classes)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(one_hot_lab, dim=-1)",
                            "Call"
                        ],
                        [
                            "one_hot_lab",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_181": {
                "variable": {
                    "value": "w_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_edge * one_hot_lab.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "w_not_edge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_not_edge * one_hot_lab.float()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_187": {
                "variable": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "not_edge_loss * w_not_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_188": {
                "variable": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "kldiv",
                            "variable"
                        ],
                        [
                            "not_edge_loss * w_not_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(not_edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(not_edge_loss, 0, not_edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "not_edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.reshape(not_edge, (-1,)))",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.reshape(not_edge, (-1,)))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(0.0, kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(0.0, requires_grad=False).cuda(), kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "edge_loss * w_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_190": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(0.0, kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1,))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ],
                        [
                            "torch.tensor(0.0, requires_grad=False).cuda()",
                            "Call"
                        ],
                        [
                            "torch.max(torch.tensor(0.0, requires_grad=False).cuda(), kld_margin - kldiv)",
                            "Call"
                        ],
                        [
                            "edge_loss * w_edge.permute(0, 3, 1, 2, 4)",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(edge_loss, (-1, 1))",
                            "Call"
                        ],
                        [
                            "torch.gather(edge_loss, 0, edge_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nonzero(torch.reshape(edge, (-1,)))",
                            "Call"
                        ],
                        [
                            "torch.nonzero(torch.reshape(edge, (-1,)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "not_edge_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "input": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnx.edges_from_label(one_hot_lab, 1, 255)",
                            "Call"
                        ],
                        [
                            "np.logical_and(edge, not_ignore)",
                            "Call"
                        ],
                        [
                            "nnx.edges_from_label(one_hot_lab, size, ignore_index)",
                            "Call"
                        ],
                        [
                            "edge & not_ignore",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_49": {
                "input": {
                    "value": "not_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_and(np.logical_not(edge), not_ignore)",
                            "Call"
                        ],
                        [
                            "~edge & not_ignore",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_67": {
                "input": {
                    "value": "probs_paired / probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "input": {
                    "value": "neg_probs_paired / neg_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "input": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nnx.edges_from_label(one_hot_lab, 1, 255)",
                            "Call"
                        ],
                        [
                            "np.logical_and(edge, not_ignore)",
                            "Call"
                        ],
                        [
                            "nnx.edges_from_label(one_hot_lab, size, ignore_index)",
                            "Call"
                        ],
                        [
                            "edge & not_ignore",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "input": {
                    "value": "not_edge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logical_and(np.logical_not(edge), not_ignore)",
                            "Call"
                        ],
                        [
                            "~edge & not_ignore",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_173": {
                "input": {
                    "value": "probs_paired / probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_174": {
                "input": {
                    "value": "neg_probs_paired / neg_probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss/loss_contrast.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(total_classes, n_view, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_classes + len(this_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_95": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "self._hard_anchor_sampling(feats, labels, predict)",
                            "Call"
                        ],
                        [
                            "labels_",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(labels_, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "contrast_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(feats_, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_103": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, torch.transpose(contrast_feature, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_105": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, torch.transpose(contrast_feature, 0, 1)), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_111": {
                "variable": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(labels_, torch.transpose(labels_, 0, 1)).float().cuda()",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_119": {
                "variable": {
                    "value": "exp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_132": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.unsqueeze(1).float().clone()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(labels, (feats.shape[2], feats.shape[3]), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels.squeeze(1).long()",
                            "Call"
                        ],
                        [
                            "labels.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(feats.shape[2], feats.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_180": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_183": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_225": {
                "variable": {
                    "value": "pred_aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg_aux']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_228": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unique_37": {
                "variable": {
                    "value": "this_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[ii]",
                            "Subscript"
                        ],
                        [
                            "y[ii]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_79": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hard_indices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_81": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "easy_indices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hard_indices, easy_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_98": {
                "input": {
                    "value": "feats_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._hard_anchor_sampling(feats, labels, predict)",
                            "Call"
                        ],
                        [
                            "feats_",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "input": {
                    "value": "anchor_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contrast_feature",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.transpose(contrast_feature, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_112": {
                "start": {
                    "value": "anchor_num * anchor_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_121": {
                "input": {
                    "value": "exp_logits + neg_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_103": {
                "input": {
                    "value": "contrast_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.unbind(feats_, dim=1), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_95": {
                "input": {
                    "value": "labels_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "self._hard_anchor_sampling(feats, labels, predict)",
                            "Call"
                        ],
                        [
                            "labels_",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss/loss_contrast_mem.py": {
        "torch": {
            "zeros_50": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(total_classes, n_view, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "total_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_classes + len(this_classes)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "X_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(class_num * cache_size, feat_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(class_num * cache_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "anchor_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(X_anchor, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eq_124": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_anchor.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "y_anchor",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "y_contrast.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_126": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, contrast_feature.T)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_128": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, contrast_feature.T), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_134": {
                "variable": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eq(y_anchor, y_contrast.T).float().cuda()",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_143": {
                "variable": {
                    "value": "exp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_156": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.unsqueeze(1).float().clone()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(labels, (feats.shape[2], feats.shape[3]), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels.squeeze(1).long()",
                            "Call"
                        ],
                        [
                            "labels.contiguous().view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(feats.shape[2], feats.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_217": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_266": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_267": {
                "variable": {
                    "value": "pred_aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg_aux']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unique_37": {
                "variable": {
                    "value": "this_classes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_hat[ii]",
                            "Subscript"
                        ],
                        [
                            "y[ii]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_122": {
                "variable": {
                    "value": "contrast_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(X_anchor, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(segment_queue, pixel_queue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_223": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_271": {
                "variable": {
                    "value": "(_, predict)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds['seg']",
                            "Subscript"
                        ],
                        [
                            "preds['seg']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_79": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_hard",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hard_indices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_81": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_easy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "easy_indices.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hard_indices, easy_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_112": {
                "input": {
                    "value": "X_anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_anchor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "input": {
                    "value": "anchor_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(torch.unbind(X_anchor, dim=1), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "contrast_feature.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_135": {
                "start": {
                    "value": "anchor_num * anchor_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_140": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_145": {
                "input": {
                    "value": "exp_logits + neg_logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unbind_122": {
                "input": {
                    "value": "X_anchor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_anchor",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss/loss_helper.py": {
        "torch": {
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ],
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ],
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_96": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ],
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ],
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_129": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_.clone().unsqueeze(1).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(targets, size=scaled_size, mode='nearest')",
                            "Call"
                        ],
                        [
                            "targets_.clone().unsqueeze(1).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(targets, size=scaled_size, mode='nearest')",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "scaled_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaled_size",
                            "Method Argument"
                        ],
                        [
                            "scaled_size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_148": {
                "variable": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_156": {
                "variable": {
                    "value": "loss_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._scale_target(targets[0], (inputs.size(2), inputs.size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[i], (inputs[i].size(2), inputs[i].size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[0], (inputs[i].size(2), inputs[i].size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[0], (inputs.size(2), inputs.size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[i], (inputs[i].size(2), inputs[i].size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[0], (inputs[i].size(2), inputs[i].size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[0], (inputs.size(2), inputs.size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[i], (inputs[i].size(2), inputs[i].size(3)))",
                            "Call"
                        ],
                        [
                            "self._scale_target(targets[0], (inputs[i].size(2), inputs[i].size(3)))",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_186": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ],
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ],
                        [
                            "'elementwise_mean'",
                            "str"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_reduction']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_211": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets_.clone().unsqueeze(1).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(targets, size=scaled_size, mode='nearest')",
                            "Call"
                        ],
                        [
                            "targets_.clone().unsqueeze(1).float()",
                            "Call"
                        ],
                        [
                            "F.interpolate(targets, size=scaled_size, mode='nearest')",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "scaled_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scaled_size",
                            "Method Argument"
                        ],
                        [
                            "scaled_size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_235": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_weight']",
                            "Subscript"
                        ],
                        [
                            "torch.FloatTensor(weight).cuda()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "UnaryOp"
                        ],
                        [
                            "self.configer.get('loss', 'params')['ce_ignore_index']",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_245": {
                "variable": {
                    "value": "prob_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict",
                            "Method Argument"
                        ],
                        [
                            "predict",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_350": {
                "variable": {
                    "value": "scaled_pred_05x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_05x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['pred_05x']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(seg_out.size(2), seg_out.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_405": {
                "variable": {
                    "value": "pred_direction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_direction, size=gt_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "gt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_mask.shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_406": {
                "variable": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_mask, size=gt_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "gt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_mask.shape[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_407": {
                "variable": {
                    "value": "mask_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_mask, size=gt_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTOffsetHelper.distance_to_mask_label(distance_map, seg_label_map, return_tensor=True)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "mask_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_weights(gt_mask, 2)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_421": {
                "variable": {
                    "value": "direction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_direction, size=gt_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "gt_direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTOffsetHelper.angle_to_direction_label(angle_map, seg_label_map=seg_label_map, extra_ignore_mask=binary_pred_mask == 0, return_tensor=True)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "direction_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_weights(gt_direction[direction_loss_mask], pred_direction.size(1))",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_118": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['seg']",
                            "Subscript"
                        ],
                        [
                            "inputs['seg']",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_410": {
                "input": {
                    "value": "pred_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(pred_mask, size=gt_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_425": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/loss/lovasz_loss.py": {
        "torch": {
            "sort_301": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ],
                        [
                            "(Variable(fg) - preds[:, c]).abs()",
                            "Call"
                        ],
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dot_305": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.relu(errors_sorted)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Variable(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_49": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_54": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "pred_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_72": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_77": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "pred_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_96": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "pred_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_128": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "255",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_133": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_134": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_142": {
                "variable": {
                    "value": "pred_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_190": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ],
                        [
                            "(Variable(fg) - preds[:, c]).abs()",
                            "Call"
                        ],
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_234": {
                "variable": {
                    "value": "(errors_sorted, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "errors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(Variable(fg) - class_pred).abs()",
                            "Call"
                        ],
                        [
                            "(Variable(fg) - preds[:, c]).abs()",
                            "Call"
                        ],
                        [
                            "1.0 - logits * Variable(signs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_363": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "self.w_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_365": {
                "variable": {
                    "value": "self.w_edge_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_366": {
                "variable": {
                    "value": "self.w_not_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_367": {
                "variable": {
                    "value": "self.w_not_edge_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_372": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preds.permute(0, 2, 3, 1).contiguous().view(-1, C)",
                            "Call"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ],
                        [
                            "preds",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_373": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds[0], size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=preds, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.softmax(input=pred, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "one_label.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "one_label.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "one_label.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_389": {
                "variable": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "targets_p_node_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(torch.split(one_hot_lab, 1, dim=1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_389": {
                "variable": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_305": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "dot_193": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(lovasz_grad(fg_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_237": {
                "input": {
                    "value": "errors_sorted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, 0, descending=True)",
                            "Call"
                        ],
                        [
                            "torch.sort(errors, dim=0, descending=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Variable(lovasz_grad(fg_sorted))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_384": {
                "tensor": {
                    "value": "one_hot_lab",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(one_label.size(0), self.num_classes, one_label.size(2), one_label.size(3)).cuda()",
                            "Call"
                        ],
                        [
                            "one_hot_lab.scatter_(1, one_label.data, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat(targets_p_node_list, dim=1).permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_425": {
                "input": {
                    "value": "eloss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossx.adaptive_affinity_loss(labels, one_hot_lab, prob, 1, self.num_classes, self.kld_margin, w_edge[..., 0], w_not_edge[..., 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_428": {
                "input": {
                    "value": "neloss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossx.adaptive_affinity_loss(labels, one_hot_lab, prob, 1, self.num_classes, self.kld_margin, w_edge[..., 0], w_not_edge[..., 0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/loss/rmi_loss.py": {
        "torch": {
            "zeros_84": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[num_classeses, 1, radius, radius]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_121": {
                "variable": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ],
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_131": {
                "variable": {
                    "value": "chol_low",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix",
                            "Method Argument"
                        ],
                        [
                            "matrix",
                            "Method Argument"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "invL",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_160": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logdet_163": {
                "variable": {
                    "value": "res_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.squeeze(a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_172": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "a.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_175": {
                "variable": {
                    "value": "res_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_182": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "x_var_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(x - x_mean).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_191": {
                "variable": {
                    "value": "xy_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "(y - y_mean).t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "p_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pair_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ],
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_70": {
                "variable": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "la_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_71": {
                "variable": {
                    "value": "pr_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pr_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "p_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pair_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ],
                        [
                            "la_ns + pr_ns",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "la_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "pr_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pr_ns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_133": {
                "input": {
                    "value": "chol_low_inv.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "chol_low_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_low_tri_inv(chol_low)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_256": {
                "variable": {
                    "value": "normal_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D",
                            "Method Argument"
                        ],
                        [
                            "logits_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels_4D.long()",
                    "type": "Call",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_265": {
                "variable": {
                    "value": "valid_onehot_labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_4D.long() * label_mask_3D.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_294": {
                "variable": {
                    "value": "valid_onehot_labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels_4D.long() * label_mask_3D.long()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_306": {
                "variable": {
                    "value": "valid_pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_mask_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_mask_3D.view([-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_307": {
                "variable": {
                    "value": "binary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D.permute(0, 2, 3, 1).contiguous().view([-1, self.num_classes])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "valid_onehot_label_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_onehot_labels_4D.view([-1, self.num_classes]).requires_grad_(False)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "label_mask_flat.unsqueeze(dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "div_311": {
                "variable": {
                    "value": "bce_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "binary_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.binary_cross_entropy_with_logits(logits_flat, target=valid_onehot_label_flat, weight=label_mask_flat.unsqueeze(dim=1), reduction='sum')",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "valid_pixels + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_363": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.half_d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_363": {
                "variable": {
                    "value": "diag_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_368": {
                "variable": {
                    "value": "la_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(la_ns, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.stack(la_ns, dim=2)",
                            "Call"
                        ],
                        [
                            "map_get_pairs(labels_4D, probs_4D, radius=self.rmi_radius, is_combine=0)",
                            "Call"
                        ],
                        [
                            "la_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "la_vectors - la_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "la_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_371": {
                "variable": {
                    "value": "pr_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pr_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(pr_ns, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.stack(pr_ns, dim=2)",
                            "Call"
                        ],
                        [
                            "map_get_pairs(labels_4D, probs_4D, radius=self.rmi_radius, is_combine=0)",
                            "Call"
                        ],
                        [
                            "pr_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor)",
                            "Call"
                        ],
                        [
                            "pr_vectors - pr_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pr_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_374": {
                "variable": {
                    "value": "pr_cov_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pr_cov + diag_matrix.type_as(pr_cov) * _POS_ALPHA",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_379": {
                "variable": {
                    "value": "la_pr_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "la_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(la_ns, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.stack(la_ns, dim=2)",
                            "Call"
                        ],
                        [
                            "map_get_pairs(labels_4D, probs_4D, radius=self.rmi_radius, is_combine=0)",
                            "Call"
                        ],
                        [
                            "la_vectors.view([n, c, self.half_d, -1]).type(torch.cuda.DoubleTensor).requires_grad_(False)",
                            "Call"
                        ],
                        [
                            "la_vectors - la_vectors.mean(dim=3, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "pr_vectors.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_399": {
                "variable": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "float(self.half_d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_93": {
                "variable": {
                    "value": "la_now",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_now",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.clone()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_classeses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_94": {
                "variable": {
                    "value": "pr_now",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(logits_4D) * label_mask_3D.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "probs_4D.clamp(min=_CLIP_MIN, max=_CLIP_MAX)",
                            "Call"
                        ],
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel_now",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.clone()",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "radius // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "num_classeses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "21",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_123": {
                "input": {
                    "value": "torch.log(torch.diagonal(chol, dim1=-2, dim2=-1) + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_163": {
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(2, 1))",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.matmul(a, a.transpose(-2, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_190": {
                "input": {
                    "value": "x_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.sum(dim=1, keepdim=True) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "x_sum.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_192": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in range(0, radius, 1)",
                            "Call"
                        ],
                        [
                            "x in range(0, radius, 1)",
                            "Call"
                        ],
                        [
                            "torch.randn(3, 4)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "torch.diagonal(chol, dim1=-2, dim2=-1) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_271": {
                "input": {
                    "value": "logits_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_4D",
                            "Method Argument"
                        ],
                        [
                            "logits_4D",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_pool2d_339": {
                "variable": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_pool2d_340": {
                "variable": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(logits_4D) * label_mask_3D.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "probs_4D.clamp(min=_CLIP_MIN, max=_CLIP_MAX)",
                            "Call"
                        ],
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_385": {
                "input": {
                    "value": "la_pr_cov.matmul(pr_cov_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "la_pr_cov.transpose(-2, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_401": {
                "input": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_401": {
                "input": {
                    "value": "rmi_per_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rmi_now.view([-1, self.num_classes]).mean(dim=0).float()",
                            "Call"
                        ],
                        [
                            "torch.div(rmi_per_class, float(self.half_d))",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_342": {
                "variable": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_343": {
                "variable": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(logits_4D) * label_mask_3D.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "probs_4D.clamp(min=_CLIP_MIN, max=_CLIP_MAX)",
                            "Call"
                        ],
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_size",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rmi_pool_stride",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "self.kernel_padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diagonal_123": {
                "input": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cholesky(matrix)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_348": {
                "variable": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(labels_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(labels_4D, size=(new_h, new_w), mode='nearest')",
                            "Call"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ],
                        [
                            "labels_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_349": {
                "variable": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs_4D",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(logits_4D) * label_mask_3D.unsqueeze(dim=1)",
                            "BinOp"
                        ],
                        [
                            "probs_4D.clamp(min=_CLIP_MIN, max=_CLIP_MAX)",
                            "Call"
                        ],
                        [
                            "logits_4D.sigmoid() * label_mask_3D.unsqueeze(dim=1) + _CLIP_MIN",
                            "BinOp"
                        ],
                        [
                            "F.max_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(probs_4D, kernel_size=p, stride=s, padding=self.kernel_padding)",
                            "Call"
                        ],
                        [
                            "F.interpolate(probs_4D, size=(new_h, new_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ],
                        [
                            "probs_4D",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(new_h, new_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/metrics/F1_running_score.py": {
        "torch": {}
    },
    "lib/models/backbones/hrnet/hrnet_backbone.py": {
        "torch": {
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "incre_modules",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "incre_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(incre_modules)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_398": {
                "variable": {
                    "value": "downsamp_modules",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "downsamp_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nn.ModuleList(downsamp_modules)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_400": {
                "variable": {
                    "value": "final_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=head_channels[3] * head_block.expansion, out_channels=2048, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_582": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_585": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_196": {
                "modules": {
                    "value": "branches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_257": {
                "modules": {
                    "value": "fuse_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_306": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stem_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_313": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stem_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_316": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stem_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_319": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_388": {
                "variable": {
                    "value": "downsamp_module",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=2, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_460": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_465": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_480": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_665": {
                "modules": {
                    "value": "transition_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_401": {
                "in_channels": {
                    "value": "head_channels[3] * head_block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_409": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_514": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_698": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_255": {
                "modules": {
                    "value": "fuse_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_389": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_channels[i] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_channels[i + 1] * head_block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_395": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_466": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_458": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_663": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_423": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_445": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_636": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_655": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "*args": {
                    "value": "*conv3x3s",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_279": {
                "input": {
                    "value": "self.fuse_layers[i][j](x[j])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[height_output, width_output]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_433": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_446": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ],
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ],
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_455": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_637": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_643": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_656": {
                "in_channels": {
                    "value": "inchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ],
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ],
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_660": {
                "inplace": {
                    "value": "relu_inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ],
                        [
                            "False",
                            "bool"
                        ]
                    ]
                }
            },
            "Sequential_230": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_251": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/mobilenet/mobilenet_v1.py": {
        "torch": {
            "Sequential_48": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_bn(3, 32, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "*args": {
                    "value": "nn.ConstantPad2d((0, 1, 0, 1), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad2d_15": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU6_18": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "nn.ConstantPad2d((0, 1, 0, 1), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "*args": {
                    "value": "nn.Conv2d(inp, inp, 3, stride, 1, groups=inp, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConstantPad2d_27": {
                "padding": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU6_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU6_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(inp * self.alpha)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "int(oup * self.alpha)",
                            "Call"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU6_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/mobilenet/mobilenet_v2.py": {
        "torch": {
            "Sequential_28": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU6_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_56": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_66": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU6_70": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/backbones/mobilenet/mobilenet_v3.py": {
        "torch": {
            "ReLU6_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_50": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, _make_divisible(channel // reduction, 8))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, kernel_size, stride, (kernel_size - 1) // 2, groups=hidden_dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "_make_divisible(channel // reduction, 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "_make_divisible(channel // reduction, 8)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_92": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel_size - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "oup",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ],
                        [
                            "oup",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/pvt/pcpvt_backbone.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_118": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, embed_dim, 3, s, 1, bias=True, groups=embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_158": {
                "variable": {
                    "value": "self.patch_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.pos_drops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_160": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_180": {
                "variable": {
                    "value": "self.pos_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PosCNN(embed_dim, embed_dim) for embed_dim in embed_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.sr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_53": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_188": {
                "variable": {
                    "value": "_block",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[k], num_heads=num_heads[k], mlp_ratio=mlp_ratios[k], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[k]) for i in range(depths[k])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Identity_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_169": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_185": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/pvt/pvt_backbone.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_117": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_118": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.pos_embed1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.patch_embed1.num_patches, embed_dims[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_151": {
                "variable": {
                    "value": "self.pos_drop1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.pos_embed2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.patch_embed2.num_patches, embed_dims[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_153": {
                "variable": {
                    "value": "self.pos_drop2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_154": {
                "variable": {
                    "value": "self.pos_embed3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.patch_embed3.num_patches, embed_dims[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_155": {
                "variable": {
                    "value": "self.pos_drop3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_156": {
                "variable": {
                    "value": "self.pos_embed4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, self.patch_embed4.num_patches, embed_dims[3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_157": {
                "variable": {
                    "value": "self.pos_drop4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.block1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[0], num_heads=num_heads[0], mlp_ratio=mlp_ratios[0], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=en_dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[0]) for i in range(depths[0])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_169": {
                "variable": {
                    "value": "self.block2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[1], num_heads=num_heads[1], mlp_ratio=mlp_ratios[1], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=en_dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[1]) for i in range(depths[1])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.block3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[2], num_heads=num_heads[2], mlp_ratio=mlp_ratios[2], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=en_dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[2]) for i in range(depths[2])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.block4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[3], num_heads=num_heads[3], mlp_ratio=mlp_ratios[3], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=en_dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[3]) for i in range(depths[3])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.sr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_53": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed1.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed2.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed3.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.patch_embed4.num_patches",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dims[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_209": {
                "input": {
                    "value": "pos_embed.reshape(1, patch_embed.H, patch_embed.W, -1).permute(0, 3, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_209": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_160": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/pvt/svt_backbone.py": {
        "torch": {
            "Linear_20": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pad_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "self.act(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "self.drop(x)",
                            "Call"
                        ],
                        [
                            "x.view(B, H, W, C)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, 0, pad_l, pad_r, pad_t, pad_b))",
                            "Call"
                        ],
                        [
                            "x.reshape(B, _h, self.ws, _w, self.ws, C).transpose(2, 3)",
                            "Call"
                        ],
                        [
                            "attn.transpose(2, 3).reshape(B, _h * self.ws, _w * self.ws, C)",
                            "Call"
                        ],
                        [
                            "x[:, :H, :W, :].contiguous()",
                            "Call"
                        ],
                        [
                            "x.reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "(attn @ v).transpose(1, 2).reshape(B, N, C)",
                            "Call"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "self.proj_drop(x)",
                            "Call"
                        ],
                        [
                            "x + self.drop_path(self.attn(self.norm1(x), H, W))",
                            "BinOp"
                        ],
                        [
                            "x + self.drop_path(self.mlp(self.norm2(x)))",
                            "BinOp"
                        ],
                        [
                            "self.proj(x).flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.proj(cnn_feat) + cnn_feat",
                            "BinOp"
                        ],
                        [
                            "self.proj(cnn_feat)",
                            "Call"
                        ],
                        [
                            "x.flatten(2).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.patch_embeds[i](x)",
                            "Call"
                        ],
                        [
                            "self.pos_drops[i](x)",
                            "Call"
                        ],
                        [
                            "blk(x, H, W)",
                            "Call"
                        ],
                        [
                            "x.reshape(B, H, W, -1).permute(0, 3, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "self.pos_block[i](x, H, W)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, pad_l, pad_r, pad_t, pad_b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, Hp, Wp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_97": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "patch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_163": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_179": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_chans, embed_dim, 3, s, 1, bias=True, groups=embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_208": {
                "variable": {
                    "value": "self.patch_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_209": {
                "variable": {
                    "value": "self.pos_embeds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.pos_drops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_221": {
                "variable": {
                    "value": "self.pos_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PosCNN(embed_dim, embed_dim) for embed_dim in embed_dims]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_228": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.sr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_104": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_230": {
                "variable": {
                    "value": "_block",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "[block_cls(dim=embed_dims[k], num_heads=num_heads[k], mlp_ratio=mlp_ratios[k], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[k], ws=1 if i % 2 == 1 else wss[k]) for i in range(depths[k])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "in_chans",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_219": {
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_226": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "drop_path_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_243": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "drop_path_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(self.depths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/resnet/dcn_resnet_models.py": {
        "torch": {
            "Conv2d_18": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv1_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_150": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_151": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_311": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv2_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_294": {
                "variable": {
                    "value": "self.resinit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(bn_type=bn_type)(64)), ('relu1', nn.ReLU(inplace=False)), ('conv2', nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)), ('bn2', ModuleHelper.BatchNorm2d(bn_type=bn_type)(64)), ('relu2', nn.ReLU(inplace=False)), ('conv3', nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('bn3', ModuleHelper.BatchNorm2d(bn_type=bn_type)(self.inplanes)), ('relu3', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_306": {
                "variable": {
                    "value": "self.resinit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(bn_type=bn_type)(self.inplanes)), ('relu1', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_deformable_groups * 27",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv2_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_121": {
                "variable": {
                    "value": "self.conv2_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_deformable_groups * 18",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "conv2_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2.dilation[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "chunk_169": {
                "variable": {
                    "value": "(offset1, offset2, mask_raw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "offset_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(out)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_170": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(offset1, offset2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_raw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.chunk(offset_mask, 3, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "[bias_h.reshape(-1), bias_w.reshape(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_295": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_297": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_298": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_301": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_303": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_307": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_309": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/resnet/resnest_models.py": {
        "torch": {
            "ReLU_51": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(in_channels * radix // reduction_factor, 32)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.cardinality",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(in_channels * radix // reduction_factor, 32)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.cardinality",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_73": {
                "variable": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(splited)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.adaptive_avg_pool2d(gap, 1)",
                            "Call"
                        ],
                        [
                            "self.fc1(gap)",
                            "Call"
                        ],
                        [
                            "self.bn1(gap)",
                            "Call"
                        ],
                        [
                            "self.relu(gap)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_178": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_179": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_262": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_263": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_290": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_pair(padding)",
                            "Call"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups * radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "split_69": {
                "variable": {
                    "value": "splited",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.dropblock(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "rchannel // self.radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_84": {
                "variable": {
                    "value": "attens",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "atten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc2(gap)",
                            "Call"
                        ],
                        [
                            "self.rsoftmax(atten).view(batch, -1, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "rchannel // self.radix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_100": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.dropblock(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn0(x)",
                            "Call"
                        ],
                        [
                            "self.dropblock(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.view(batch, self.cardinality, self.radix, -1).transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "F.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "x.reshape(batch, -1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "adaptive_avg_pool2d_116": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_138": {
                "variable": {
                    "value": "self.avd_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv_layer(3, stem_width, kernel_size=3, stride=2, padding=1, bias=False, **conv_kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*down_layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_353": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "group_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(planes * (bottleneck_width / 64.0)) * cardinality",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cardinality",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_289": {
                "p": {
                    "value": "final_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_252": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_255": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_307": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_310": {
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/resnet/resnet_backbone.py": {
        "torch": {}
    },
    "lib/models/backbones/resnet/resnet_models.py": {
        "torch": {
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_131": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_137": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.resinit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(bn_type=bn_type)(64)), ('relu1', nn.ReLU(inplace=False)), ('conv2', nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)), ('bn2', ModuleHelper.BatchNorm2d(bn_type=bn_type)(64)), ('relu2', nn.ReLU(inplace=False)), ('conv3', nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('bn3', ModuleHelper.BatchNorm2d(bn_type=bn_type)(self.inplanes)), ('relu3', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_125": {
                "variable": {
                    "value": "self.resinit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(bn_type=bn_type)(self.inplanes)), ('relu1', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_151": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_116": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_122": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/resnet/resnext_models.py": {
        "torch": {
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ],
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ],
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.relu_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "self.resinit",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(bn_type=bn_type)(self.inplanes)), ('relu1', nn.ReLU(inplace=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_154": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/resnet/wide_resnet_models.py": {
        "torch": {
            "Sequential_88": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "variable": {
                    "value": "self.mod1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, 3, stride=1, padding=1, bias=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_179": {
                "*args": {
                    "value": "OrderedDict(blocks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "channels[mod_id][-1]",
                            "Subscript"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if block_id == 0 and 2 <= mod_id <= 4 else 1",
                            "IfExp"
                        ],
                        [
                            "2 if block_id == 0 and mod_id == 2 else 1",
                            "IfExp"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_178": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/resnet/wsl_resnext_models.py": {
        "torch": {}
    },
    "lib/models/backbones/vit/helper.py": {
        "torch": {}
    },
    "lib/models/backbones/vit/position_encoding.py": {
        "torch": {
            "zeros_9": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_10": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_11": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, embedding_dim, 2).float() * (-torch.log(torch.tensor(10000.0)) / embedding_dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_15": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_16": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_28": {
                "variable": {
                    "value": "self.pe",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_position_embeddings",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_33": {
                "start": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_position_embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_12": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_13": {
                "input": {
                    "value": "torch.tensor(10000.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "10000.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/vit/setr.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.linear_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.flatten_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.pe_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LayerNorm_75": {
                "variable": {
                    "value": "self.pre_head_ln",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ],
                        [
                            "embedding_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_192": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('VALID', (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('VALID', (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_208": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.patch_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_390": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(key0_out, key1_out, key2_out, key3_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.patch_dim, self.patch_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(self.patch_dim, self.patch_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('VALID', (self.patch_dim, self.patch_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_340": {
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('VALID', (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_348": {
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_399": {
                "in_channels": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.embedding_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('VALID', (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_408": {
                "in_channels": {
                    "value": "int(self.embedding_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.embedding_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('SAME', (3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_417": {
                "in_channels": {
                    "value": "int(self.embedding_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.embedding_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('SAME', (3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_424": {
                "in_channels": {
                    "value": "int(self.embedding_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(self.embedding_dim / 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('SAME', (3, 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_430": {
                "scale_factor": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._get_padding('VALID', (1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_286": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/backbones/vit/transformer.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_15": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_17": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_54": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_64": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_65": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GELU_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_78": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_79": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "dropout_rate",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/modules/asp_oc_block.py": {
        "torch": {
            "randn_78": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2048, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "conv_3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=1, dilation=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_features * 5, out_features * 2, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "out_features * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_41": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "memory_allocated_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_48": {
                "tensors": {
                    "value": "(feat1[i], feat2[i], feat3[i], feat4[i], feat5[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/aspp_block.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.conv_3x3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.conv_3x3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.conv_3x3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inner_features * 4, out_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.conv_gp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.conv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.conv_3x3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.conv_3x3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.conv_3x3_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, inner_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.fuse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inner_features * 5, out_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "feat_gp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_gp(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat_gp, feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2048, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_110": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 720, 256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "inner_features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_43": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_64": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ],
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "inner_features * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_85": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "synchronize_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/base_oc_block.py": {
        "torch": {
            "randn_199": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2048, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "variable": {
                    "value": "conv_3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_53": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.f_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_query(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_key(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_value(x).view(batch_size, self.value_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_136": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(in_channels, in_channels, key_channels, value_channels, size, bn_type) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_175": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(in_channels, out_channels, key_channels, value_channels, size, bn_type) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_177": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ModuleHelper.BNReLU(out_channels, bn_type=bn_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_97": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.value_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=context, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "priors[0]",
                            "Subscript"
                        ],
                        [
                            "context + priors[i]",
                            "BinOp"
                        ],
                        [
                            "priors[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_141": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_179": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "synchronize_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/basic.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "depthwise",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "pointwise",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu', nn.ReLU()), ('depthwise', depthwise), ('bn_depth', bn_depth), ('pointwise', pointwise), ('bn_point', bn_point)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('depthwise', depthwise), ('bn_depth', bn_depth), ('relu1', nn.ReLU(inplace=True)), ('pointwise', pointwise), ('bn_point', bn_point), ('relu2', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/decoder_block.py": {
        "torch": {
            "AdaptiveAvgPool2d_21": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_27": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.b0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=3, padding=d_rate[0], dilation=d_rate[0], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=3, padding=d_rate[1], dilation=d_rate[1], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.b3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_dim, out_dim, kernel_size=3, padding=d_rate[2], dilation=d_rate[2], bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.b4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.project",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(5 * out_dim, out_dim, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.b4(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat0, feat1, feat2, feat3, feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "variable": {
                    "value": "self.refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_136": {
                "variable": {
                    "value": "self.refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_157": {
                "variable": {
                    "value": "self.layer_dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "self.refine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(512, 512, kernel_size=3, padding=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_186": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplane1, 256, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplane2, 48, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(304, outplane, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_203": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(xt, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.interpolate(self.conv1(xt), size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "xt",
                            "Method Argument"
                        ],
                        [
                            "xt",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, xl]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplane1, 256, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_218": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplane2, 48, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_222": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(304, 256, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_230": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_234": {
                "variable": {
                    "value": "xt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(xt)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_236": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, xl]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "d_rate[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "d_rate[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "d_rate[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "d_rate[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "d_rate[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "d_rate[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_63": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "in_channels": {
                    "value": "5 * out_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_168": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "in_channels": {
                    "value": "inplane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "inplane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "304",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "inplane1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_219": {
                "in_channels": {
                    "value": "inplane2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_223": {
                "in_channels": {
                    "value": "304",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_225": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_227": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/modules/edge_block.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(factor * 256, mid_fea, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(factor * 512, mid_fea, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(factor * 1024, mid_fea, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_fea",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fea",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_fea * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_fea",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "edge2_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge2_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(x2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge2_fea, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "edge3_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge3_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv3(x3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge3_fea, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4(edge2_fea)",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge2, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "edge3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv4(edge3_fea)",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge3, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "edge_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge1_fea, edge2_fea, edge3_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "edge",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge1, edge2, edge3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "factor * 256",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_fea",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "factor * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_fea",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "factor * 1024",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_fea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_fea",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/hanet_attention.py": {
        "torch": {
            "interpolate_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_26": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.attention_first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=in_channel, out_channels=mid_1_channel, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_119": {
                "variable": {
                    "value": "x1d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.rowpool(x).squeeze(3)",
                            "Call"
                        ],
                        [
                            "self.pos_emb1d_1st(x1d, pos, True)",
                            "Call"
                        ],
                        [
                            "self.pos_emb1d_1st(x1d, pos)",
                            "Call"
                        ],
                        [
                            "self.dropout(x1d)",
                            "Call"
                        ],
                        [
                            "self.attention_first(x1d)",
                            "Call"
                        ],
                        [
                            "self.attention_second(x1d)",
                            "Call"
                        ],
                        [
                            "self.pos_emb1d_2nd(x1d, pos, True)",
                            "Call"
                        ],
                        [
                            "self.pos_emb1d_2nd(x1d, pos)",
                            "Call"
                        ],
                        [
                            "self.attention_third(x1d)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x1d)",
                            "Call"
                        ],
                        [
                            "self.sigmoid(x1d)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x1d, size=H, mode='linear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.size(2)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mul_120": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(out, x1d.unsqueeze(3))",
                            "Call"
                        ],
                        [
                            "out",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "x1d.unsqueeze(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout2d_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.attention_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=mid_1_channel, out_channels=out_channel, kernel_size=kernel_size, stride=1, padding=kernel_size // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_60": {
                "variable": {
                    "value": "self.rowpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(128 // pos_rfactor, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_63": {
                "variable": {
                    "value": "self.rowpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(128 // pos_rfactor, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv1d_38": {
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_1_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(in_channel / r_factor)",
                            "Call"
                        ],
                        [
                            "in_channel * r_factor",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.attention_second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=mid_1_channel, out_channels=mid_2_channel, kernel_size=3, stride=1, padding=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.attention_third",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(in_channels=mid_2_channel, out_channels=out_channel, kernel_size=kernel_size, stride=1, padding=kernel_size // 2, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_45": {
                "in_channels": {
                    "value": "mid_1_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(in_channel / r_factor)",
                            "Call"
                        ],
                        [
                            "in_channel * r_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_50": {
                "in_channels": {
                    "value": "mid_1_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(in_channel / r_factor)",
                            "Call"
                        ],
                        [
                            "in_channel * r_factor",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_2_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_1_channel * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_55": {
                "in_channels": {
                    "value": "mid_2_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mid_1_channel * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/isa_block.py": {
        "torch": {
            "randn_153": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2048, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_memory_allocated_154": {
                "variable": {
                    "value": "mem",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "conv_3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, self.key_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.f_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.in_channels, self.key_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.value_channels, self.out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_query(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_key(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_value(x).view(batch_size, self.value_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_121": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ISA_Block(in_channels, key_channels, value_channels, out_channels, d, bn_type) for d in down_factors]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.conv_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(concat_channels, out_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.up_conv(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.up_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, len(self.down_factors) * out_channels, kernel_size=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[stage(x) for stage in self.stages]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "in_channels": {
                    "value": "concat_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels + out_channels",
                            "BinOp"
                        ],
                        [
                            "out_channels * len(self.down_factors) * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_136": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_147": {
                "tensors": {
                    "value": "[x, context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "len(self.down_factors) * out_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_memory_allocated_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/norm.py": {
        "torch": {
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/offset_block.py": {
        "torch": {
            "meshgrid_22": {
                "variable": {
                    "value": "(coord_h, coord_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "coord_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(length, dtype=torch.float).cuda() for length in (H, W)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "grid_sample_40": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([grid_w, grid_h], dim=-1) / self.norm_factor - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_37": {
                "tensors": {
                    "value": "[grid_w, grid_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/pos_embedding.py": {
        "torch": {
            "interpolate_21": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + pos_h + pos_w",
                            "BinOp"
                        ],
                        [
                            "x + pos_h",
                            "BinOp"
                        ],
                        [
                            "x + pos_h",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_55": {
                "variable": {
                    "value": "self.pos_layer_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "128 // pos_rfactor + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_56": {
                "variable": {
                    "value": "self.pos_layer_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "128 // pos_rfactor + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_h.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "pos_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_w.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "self.sel_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_93": {
                "variable": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_h.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "self.sel_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Embedding_116": {
                "variable": {
                    "value": "self.pos_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "128 // pos_rfactor + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_h.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "x.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_87": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([pos_noise])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_99": {
                "variable": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_h.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(pos_h.float(), size=x.shape[2:], mode='nearest').long()",
                            "Call"
                        ],
                        [
                            "self.pos_layer_h(pos_h).transpose(1, 4).squeeze(4)",
                            "Call"
                        ],
                        [
                            "pos_h // self.pos_rfactor",
                            "BinOp"
                        ],
                        [
                            "pos_h.index_select(2, self.sel_index).unsqueeze(1).squeeze(3)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(pos_h.float(), size=x.shape[2], mode='nearest').long()",
                            "Call"
                        ],
                        [
                            "pos_h + torch.clamp((self.noise.sample(pos_h.shape).squeeze(3).cuda() // 1).long(), min=-self.noise_clamp, max=self.noise_clamp)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pos_h, min=self.min, max=self.max)",
                            "Call"
                        ],
                        [
                            "self.pos_layer(pos_h).transpose(1, 3).squeeze(3)",
                            "Call"
                        ],
                        [
                            "pos_h // self.pos_rfactor",
                            "BinOp"
                        ],
                        [
                            "pos_h.index_select(2, self.sel_index).unsqueeze(1).squeeze(3)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(pos_h.float(), size=x.shape[2], mode='nearest').long()",
                            "Call"
                        ],
                        [
                            "pos_h + torch.clamp((self.noise.sample(pos_h.shape).squeeze(3).cuda() // 1).long(), min=-self.noise_clamp, max=self.noise_clamp)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pos_h, min=self.min, max=self.max)",
                            "Call"
                        ],
                        [
                            "self.pos_layer(pos_h).transpose(1, 3).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_125": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.tensor([0.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.tensor([pos_noise])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_137": {
                "variable": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_h.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(pos_h.float(), size=x.shape[2:], mode='nearest').long()",
                            "Call"
                        ],
                        [
                            "self.pos_layer_h(pos_h).transpose(1, 4).squeeze(4)",
                            "Call"
                        ],
                        [
                            "pos_h // self.pos_rfactor",
                            "BinOp"
                        ],
                        [
                            "pos_h.index_select(2, self.sel_index).unsqueeze(1).squeeze(3)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(pos_h.float(), size=x.shape[2], mode='nearest').long()",
                            "Call"
                        ],
                        [
                            "pos_h + torch.clamp((self.noise.sample(pos_h.shape).squeeze(3).cuda() // 1).long(), min=-self.noise_clamp, max=self.noise_clamp)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pos_h, min=self.min, max=self.max)",
                            "Call"
                        ],
                        [
                            "self.pos_layer(pos_h).transpose(1, 3).squeeze(3)",
                            "Call"
                        ],
                        [
                            "pos_h // self.pos_rfactor",
                            "BinOp"
                        ],
                        [
                            "pos_h.index_select(2, self.sel_index).unsqueeze(1).squeeze(3)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(pos_h.float(), size=x.shape[2], mode='nearest').long()",
                            "Call"
                        ],
                        [
                            "pos_h + torch.clamp((self.noise.sample(pos_h.shape).squeeze(3).cuda() // 1).long(), min=-self.noise_clamp, max=self.noise_clamp)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(pos_h, min=self.min, max=self.max)",
                            "Call"
                        ],
                        [
                            "self.pos_layer(pos_h).transpose(1, 3).squeeze(3)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "[pos_noise]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_97": {
                "input": {
                    "value": "(self.noise.sample(pos_h.shape).squeeze(3).cuda() // 1).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.noise_clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.noise_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_125": {
                "data": {
                    "value": "[pos_noise]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_135": {
                "input": {
                    "value": "(self.noise.sample(pos_h.shape).squeeze(3).cuda() // 1).long()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-self.noise_clamp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.noise_clamp",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/projection.py": {
        "torch": {
            "Conv2d_15": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_24": {
                "input": {
                    "value": "self.proj(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(dim_in, dim_in, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "proj_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/psp_block.py": {
        "torch": {
            "ModuleList_24": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(features, out_features, size, bn_type) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features + len(sizes) * out_features, out_features, kernel_size=3, padding=1, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_32": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_50": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2048, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 720, 256, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "*args": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "features + len(sizes) * out_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_28": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "priors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[F.interpolate(input=stage(feats), size=(h, w), mode='bilinear', align_corners=True) for stage in self.stages] + [feats]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_39": {
                "input": {
                    "value": "stage(feats)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/seg_basic.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, inter_channels, 3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_12": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels // 4",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/spatial_ocr_block.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt.size()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_396": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 19, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_397": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2048, 128, 128)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "variable": {
                    "value": "conv_3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_102": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 19, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(probs, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, k, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "probs.contiguous().view(batch_size, dh * dw, k, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, dh * dw, k, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=3)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_103": {
                "variable": {
                    "value": "cc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 19, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(probs, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, k, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "probs.contiguous().view(batch_size, dh * dw, k, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, dh * dw, k, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=3)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 2048, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(feats, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, c, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "feats.contiguous().view(batch_size, dh * dw, c, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, dh * dw, c, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_112": {
                "variable": {
                    "value": "pyramid_ocr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ocr_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_147": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "self.f_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.f_object",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.f_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.f_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.key_channels, out_channels=self.in_channels, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_199": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_label[:, :, :, :].permute(0, 2, 3, 1).view(batch_size, h * w, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(sim_map, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_down(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_279": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(_in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_334": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, hidden_features, kernel_size=3, padding=1, dilation=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_340": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, hidden_features, kernel_size=1, padding=0, dilation=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_343": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, hidden_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_346": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, hidden_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, hidden_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_352": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_features * 5, out_features, kernel_size=1, padding=0, dilation=1, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_57": {
                "variable": {
                    "value": "gt_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_to_onehot(gt_probs.squeeze(1).type(torch.cuda.LongTensor), probs.size(1))",
                            "Call"
                        ],
                        [
                            "gt_probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(gt_probs, p=1, dim=2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_to_onehot(gt_probs.squeeze(1).type(torch.cuda.LongTensor), probs.size(1))",
                            "Call"
                        ],
                        [
                            "gt_probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.normalize(gt_probs, p=1, dim=2)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 2048, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(feats, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, c, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "feats.contiguous().view(batch_size, dh * dw, c, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, dh * dw, c, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_58": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_58": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 19, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(probs, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, k, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "probs.contiguous().view(batch_size, dh * dw, k, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, dh * dw, k, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=3)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 2048, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(feats, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, c, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "feats.contiguous().view(batch_size, dh * dw, c, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, dh * dw, c, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_66": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "variable": {
                    "value": "ocr_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_89": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 2048, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, feats.size(1), -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(feats, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, c, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "feats.contiguous().view(batch_size, dh * dw, c, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "feats.view(batch_size, dh * dw, c, -1)",
                            "Call"
                        ],
                        [
                            "feats.permute(0, 1, 3, 2)",
                            "Call"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ],
                        [
                            "feats",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_90": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((1, 19, 128, 128)).cuda()",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, c, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.scale * probs, dim=2)",
                            "Call"
                        ],
                        [
                            "F.pad(probs, (pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2))",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, k, out_h, dh, out_w, dw).permute(0, 3, 5, 1, 2, 4)",
                            "Call"
                        ],
                        [
                            "probs.contiguous().view(batch_size, dh * dw, k, out_h, out_w)",
                            "Call"
                        ],
                        [
                            "probs.view(batch_size, dh * dw, k, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(probs, dim=3)",
                            "Call"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_w // 2, pad_w - pad_w // 2, pad_h // 2, pad_h - pad_h // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "normalize_192": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_label[:, :, :, :].permute(0, 2, 3, 1).view(batch_size, h * w, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(sim_map, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_pixel(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_object(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_label[:, :, :, :].permute(0, 2, 3, 1).view(batch_size, h * w, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(sim_map, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_204": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.key_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.f_up(context)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=context, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats, gt_label)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats, gt_label)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_207": {
                "variable": {
                    "value": "bg_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bg_sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - sim_map",
                            "BinOp"
                        ],
                        [
                            "F.normalize(bg_sim_map, p=1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.f_down(proxy).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_211": {
                "variable": {
                    "value": "bg_context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bg_context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(bg_sim_map, value)",
                            "Call"
                        ],
                        [
                            "bg_context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "bg_context.view(batch_size, self.key_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.f_up(bg_context)",
                            "Call"
                        ],
                        [
                            "F.interpolate(input=bg_context, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.object_context_block(feats, proxy_feats, gt_label)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_384": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_427": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_165": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "in_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_191": {
                "variable": {
                    "value": "bg_sim_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bg_sim_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - sim_map",
                            "BinOp"
                        ],
                        [
                            "F.normalize(bg_sim_map, p=1, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_280": {
                "in_channels": {
                    "value": "_in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * in_channels",
                            "BinOp"
                        ],
                        [
                            "3 * in_channels",
                            "BinOp"
                        ],
                        [
                            "2 * in_channels",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_282": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_335": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_341": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_344": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_347": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_353": {
                "in_channels": {
                    "value": "hidden_features * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_355": {
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "synchronize_433": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_303": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_363": {
                "tensors": {
                    "value": "(feat1[i], feat2[i], feat3[i], feat4[i], feat5[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_memory_allocated_435": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_299": {
                "tensors": {
                    "value": "[context, bg_context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_301": {
                "tensors": {
                    "value": "[bg_context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/modules/trans_layer.py": {
        "torch": {
            "ones_15": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "torch.linspace(-1.0, 1.0, out_h).view(-1, 1).repeat(1, out_w)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "variable"
                        ],
                        [
                            "input.size()",
                            "Call"
                        ],
                        [
                            "torch.linspace(-1.0, 1.0, out_w).repeat(out_h, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_25": {
                "variable": {
                    "value": "dim_t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "one_direction_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model // 2",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_30": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, 0::2].sin(), pos_x[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_30": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, 0::2].sin(), pos_y[:, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_32": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_34": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_70": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_109": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.patch_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.upsample_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LayerNorm_117": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "60",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_157": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.reset_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplane",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outplane",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outplane",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.flow_make",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outplane * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "upsample_180": {
                "variable": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reset_h(h_feature)",
                            "Call"
                        ],
                        [
                            "F.upsample(h_feature, size=size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.flow_warp(h_feature_orign, flow, size=size)",
                            "Call"
                        ],
                        [
                            "h_feature",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(h, w)",
                            "Tuple"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "flow_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_feature, low_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_191": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[[out_w, out_h]]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_192": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "out_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_193": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "out_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w.unsqueeze(2), h.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_198": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((w.unsqueeze(2), h.unsqueeze(2)), 2)",
                            "Call"
                        ],
                        [
                            "grid.repeat(n, 1, 1, 1).type_as(input).to(input.device)",
                            "Call"
                        ],
                        [
                            "grid + flow.permute(0, 2, 3, 1) / norm",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_76": {
                "variable": {
                    "value": "self.sr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "sr_ratio",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "sr_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "sr_ratio",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_77": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/modules/vit_trans_layer.py": {
        "torch": {
            "Linear_45": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.qkv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_69": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_71": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.fc_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.fc_kv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_103": {
                "variable": {
                    "value": "self.attn_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.proj_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_193": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ],
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_210": {
                "variable": {
                    "value": "self.cls_token",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_211": {
                "variable": {
                    "value": "self.pos_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_patches + 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_212": {
                "variable": {
                    "value": "self.pos_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_214": {
                "variable": {
                    "value": "self.cls_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, nclass, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_217": {
                "variable": {
                    "value": "self.blocks_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block_Encoder(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_223": {
                "variable": {
                    "value": "self.blocks_decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block_Decoder(dim=embed_dim, num_heads=num_heads, mlp_ratio=mlp_ratio, feat_HxW=decoder_feat_HxW, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[i], norm_layer=norm_layer) for i in range(depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cls_tokens, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_280": {
                "variable": {
                    "value": "feat_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_pos_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_embed[:, 1:, :]",
                            "Subscript"
                        ],
                        [
                            "feat_pos_embed.reshape(feat_pos_embed.shape[0], feat_h, feat_w, -1).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "F.interpolate(feat_pos_embed, (h, w), mode='bilinear', align_corners=True).permute(0, 2, 3, 1).reshape(feat_pos_embed.shape[0], h * w, -1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "permute_280": {
                "variable": {
                    "value": "feat_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_280": {
                "variable": {
                    "value": "feat_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_pos_embed.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_284": {
                "variable": {
                    "value": "new_pos_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_pos_embed, feat_pos_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_21": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(x.shape[0],) + (1,) * (x.ndim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.fc_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_210": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_211": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_patches + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_214": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nclass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_216": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "steps": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/models/nets/ce2pnet.py": {
        "torch": {
            "Sequential_55": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_hr, edge_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_78": {
                "variable": {
                    "value": "seg_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_82": {
                "variable": {
                    "value": "seg_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_86": {
                "variable": {
                    "value": "seg_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_156": {
                "variable": {
                    "value": "x_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_hr, edge_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_159": {
                "variable": {
                    "value": "seg_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "seg_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_167": {
                "variable": {
                    "value": "seg_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_171": {
                "variable": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 256, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_223": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_236": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_.unsqueeze(1).type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(x5.size(2), x5.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "x_hr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_hr, edge_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_244": {
                "variable": {
                    "value": "seg_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_248": {
                "variable": {
                    "value": "seg_out2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls(x_hr)",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out2, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_252": {
                "variable": {
                    "value": "seg_out1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_out1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.decoder(x_hr, x[-4])",
                            "Call"
                        ],
                        [
                            "F.interpolate(seg_out1, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_256": {
                "variable": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.edgelayer(x[-4], x[-3], x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(edge_out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_64": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_138": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_144": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_218": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_224": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_226": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/deeplab.py": {
        "torch": {}
    },
    "lib/models/nets/fcnet.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_67": {
                "variable": {
                    "value": "aux_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(aux_x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.cls_head(x[-1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.cls_head(x[-1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.cls_head(x[-1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.cls_head(x[-1])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 128, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_39": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_45": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_90": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_53": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_59": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_98": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/hrnet.py": {
        "torch": {
            "Sequential_37": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_49": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_51": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "ret['seg']",
                            "Subscript"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_89": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.conv3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_120": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_134": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_136": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_166": {
                "variable": {
                    "value": "self.segment_queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.segment_queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_170": {
                "variable": {
                    "value": "self.pixel_queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pixel_queue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.conv3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_225": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_226": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_238": {
                "variable": {
                    "value": "out_aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_239": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "ret['seg']",
                            "Subscript"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_256": {
                "variable": {
                    "value": "self.conv3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_271": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_282": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_283": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_284": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_296": {
                "variable": {
                    "value": "out_aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_297": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "ret['seg']",
                            "Subscript"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_314": {
                "variable": {
                    "value": "self.conv3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_327": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_349": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_350": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_351": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_353": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_363": {
                "variable": {
                    "value": "out_aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.aux_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out_aux, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_364": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "ret['seg']",
                            "Subscript"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.cls_head(feats)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_40": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_76": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_165": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.configer.get('data', 'num_classes')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_167": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.configer.get('data', 'num_classes')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_169": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.configer.get('data', 'num_classes')",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_171": {
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.configer.get('data', 'num_classes')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_216": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_272": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_274": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_315": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_329": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ],
                        [
                            "720",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_331": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/ideal_ocrnet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_.unsqueeze(1).type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_64": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_111": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_.unsqueeze(1).type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_151": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_.unsqueeze(1).type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_167": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_184": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_210": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_.unsqueeze(1).type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_215": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_231": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_245": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_246": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_257": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_.unsqueeze(1).type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.size(2), x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_261": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_262": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context, label)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_52": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_103": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_155": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_185": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_202": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_247": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_249": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_250": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/isanet.py": {
        "torch": {
            "Sequential_24": {
                "variable": {
                    "value": "self.isa_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.isa_head(x[-1])",
                            "Call"
                        ],
                        [
                            "self.cls_head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout2d_34": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/ms_ocrnet.py": {
        "torch": {
            "Conv2d_69": {
                "variable": {
                    "value": "od[conv2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_70": {
                "variable": {
                    "value": "od[sig]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "attn_head",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "od",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.conv3x3_ocr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(high_level_ch, ocr_mid_channels, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.cls_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ocr_mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.aux_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(high_level_ch, 256, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "od[conv1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_64": {
                "variable": {
                    "value": "od[re1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "od[drop]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(x_1x, scale_factor=s, mode='bilinear', align_corners=False, recompute_scale_factor=True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_116": {
                "variable": {
                    "value": "feat2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "feat3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "feat4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "high_level_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feat1, feat2, feat3, feat4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_215": {
                "variable": {
                    "value": "x_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_231": {
                "variable": {
                    "value": "p_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_05x",
                            "variable"
                        ],
                        [
                            "logit_attn * p_lo",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(p_lo, size=(p_1x.size(2), p_1x.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(p_1x.size(2), p_1x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_233": {
                "variable": {
                    "value": "aux_lo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_lo",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lo_outs['aux_out']",
                            "Subscript"
                        ],
                        [
                            "logit_attn * aux_lo",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(aux_lo, size=(p_1x.size(2), p_1x.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(p_1x.size(2), p_1x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_236": {
                "variable": {
                    "value": "logit_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lo_outs['logit_attn']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(logit_attn, size=(p_1x.size(2), p_1x.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(p_1x.size(2), p_1x.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_1x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs['images']",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "variable"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scales",
                            "variable"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "recompute_scale_factor": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "high_level_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ocr_mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "high_level_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "high_level_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bot_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "cls_out",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.interpolate(pred, size=(cls_out.size(2), cls_out.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "attn_out * cls_out + (1 - attn_out) * pred",
                            "BinOp"
                        ],
                        [
                            "cls_out + (1 - attn_out) * pred",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(cls_out.size(2), cls_out.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_184": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "aux_out",
                            "variable"
                        ],
                        [
                            "torch.nn.functional.interpolate(aux, size=(cls_out.size(2), cls_out.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "attn_out * aux_out + (1 - attn_out) * aux",
                            "BinOp"
                        ],
                        [
                            "aux_out + (1 - attn_out) * aux",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(cls_out.size(2), cls_out.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "variable": {
                    "value": "cls_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cls_head(ocr_feats)",
                            "Call"
                        ],
                        [
                            "self.ocr(high_level_features)",
                            "Call"
                        ],
                        [
                            "Upsample(cls_out, x_size)",
                            "Call"
                        ],
                        [
                            "outs['cls_out']",
                            "Subscript"
                        ],
                        [
                            "attn_out * cls_out",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(cls_out, size=(pred.size(2), pred.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(pred.size(2), pred.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_194": {
                "variable": {
                    "value": "aux_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.aux_head(high_level_features)",
                            "Call"
                        ],
                        [
                            "self.ocr(high_level_features)",
                            "Call"
                        ],
                        [
                            "Upsample(aux_out, x_size)",
                            "Call"
                        ],
                        [
                            "outs['aux_out']",
                            "Subscript"
                        ],
                        [
                            "attn_out * aux_out",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.interpolate(aux_out, size=(pred.size(2), pred.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(pred.size(2), pred.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_196": {
                "variable": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outs['logit_attn']",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.interpolate(attn_out, size=(pred.size(2), pred.size(3)), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(pred.size(2), pred.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/ocnet.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.oc_module_pre",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_59": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.oc_module_pre(x[-1])",
                            "Call"
                        ],
                        [
                            "self.oc_module(x)",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.context(x[-1])",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_98": {
                "variable": {
                    "value": "aux_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(aux_x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.oc_module_pre(x[-1])",
                            "Call"
                        ],
                        [
                            "self.oc_module(x)",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.context(x[-1])",
                            "Call"
                        ],
                        [
                            "self.cls(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/ocrnet.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.asp_ocr_head(x[-1], x_dsn)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.asp_ocr_head(x[-1], x_dsn)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_54": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_100": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/ocrnet_ha.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.conv_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[1], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_65": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.asp_ocr_head(x[-1], x_dsn)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.dsn_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels[0], 512, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "variable": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_dsn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.dsn_head(x[-2])",
                            "Call"
                        ],
                        [
                            "F.interpolate(x_dsn, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.conv_3x3(x[-1])",
                            "Call"
                        ],
                        [
                            "self.spatial_ocr_head(x, context)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.backbone(x_)",
                            "Call"
                        ],
                        [
                            "self.asp_ocr_head(x[-1], x_dsn)",
                            "Call"
                        ],
                        [
                            "self.head(x)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=(x_.size(2), x_.size(3)), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x_.size(2), x_.size(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_54": {
                "p": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "in_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout2d_100": {
                "p": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/segfix.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.dir_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.mask_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, mid_channels, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x_)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_81": {
                "variable": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 31",
                            "BinOp"
                        ],
                        [
                            "width * 15",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_directions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DTOffsetConfig.num_classes",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * 31",
                            "BinOp"
                        ],
                        [
                            "width * 15",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "mid_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/nets/semantic_fpn.py": {
        "torch": {
            "ModuleList_55": {
                "variable": {
                    "value": "self.lateral_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.fpn_convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_152": {
                "variable": {
                    "value": "self.scale_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.cls_seg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "l_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "fpn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "extra_fpn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_channels[self.backbone_end_level - 1]",
                            "Subscript"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "input": {
                    "value": "laterals[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "prev_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "laterals[i - 1].shape[2:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "*args": {
                    "value": "*scale_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "interpolate_180": {
                "input": {
                    "value": "self.scale_heads[i](x[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "output.shape[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "256 if k == 0 else self.channels",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_127": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_169": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_141": {
                "input": {
                    "value": "outs[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/tools/module_helper.py": {
        "torch": {
            "load_130": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "pretrained_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_250": {
                "f": {
                    "value": "cached_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "nn.BatchNorm2d(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.SyncBatchNorm(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SyncBatchNorm_37": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "BatchNorm2d(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "*args": {
                    "value": "SwitchNorm2d(num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_159": {
                "input": {
                    "value": "pretrained_dict['pos_embed1'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[16384, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_161": {
                "input": {
                    "value": "pretrained_dict['pos_embed2'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[4096, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "pretrained_dict['pos_embed3'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1024, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_165": {
                "input": {
                    "value": "pretrained_dict['pos_embed4'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[256, 512]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_167": {
                "input": {
                    "value": "pretrained_dict['pos_embed1'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[16384, 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_169": {
                "input": {
                    "value": "pretrained_dict['pos_embed2'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[4096, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_171": {
                "input": {
                    "value": "pretrained_dict['pos_embed3'].unsqueeze(dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[1024, 320]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "nn.GroupNorm(num_groups=8, num_channels=num_features, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GroupNorm_54": {
                "num_groups": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_192": {
                "input": {
                    "value": "pretrained_dict[item].unsqueeze(dim=0).unsqueeze(dim=0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[256, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_196": {
                "input": {
                    "value": "pretrained_dict[item].unsqueeze(dim=0).unsqueeze(dim=0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[961, pretrained_dict[item].size(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "interpolate_200": {
                "input": {
                    "value": "pretrained_dict[item].unsqueeze(dim=0).unsqueeze(dim=0).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "[pretrained_dict[item].size(0), 256, 256]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/distributed.py": {
        "torch": {
            "from_numpy_23": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_initialized_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_74": {
                "device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.local_rank",
                            "Attribute"
                        ]
                    ]
                }
            },
            "is_initialized_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/helpers/offset_helper.py": {
        "torch": {
            "tensor_512": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 45.0, 90.0, 180.0, -180.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_515": {
                "variable": {
                    "value": "distance_map",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 2.0, 3.0, 255.0, 4.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "variable": {
                    "value": "seg_map",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[-1, 0, 0, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "sobel_ker",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sobel_y, sobel_x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_158": {
                "variable": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(edge_mask, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "1 - edge_mask",
                            "BinOp"
                        ],
                        [
                            "edge_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_162": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "edge_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(edge_mask, min=0, max=1)",
                            "Call"
                        ],
                        [
                            "1 - edge_mask",
                            "BinOp"
                        ],
                        [
                            "edge_mask",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "sobel_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Sobel.kernel(ksize=kernel_size).to(edge_mask.device)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "depths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(depths, dim=0).to(bmap.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_188": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(depths, dim=0).to(bmap.device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Sobel.kernel().to(bmap.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "Sobel.ksize // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_226": {
                "variable": {
                    "value": "dir_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(dir_map, dim=1)",
                            "Call"
                        ],
                        [
                            "dir_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_234": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(offsets_h * dir_map).sum(dim=1), (offsets_w * dir_map).sum(dim=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_238": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(depths, Sobel.kernel().to(bmap.device), padding=Sobel.ksize // 2)",
                            "Call"
                        ],
                        [
                            "DTOffsetHelper.label_to_vector(torch.arange(DTOffsetConfig.num_classes).view(DTOffsetConfig.num_classes, 1, 1).cuda()).float().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.stack([(offsets_h * dir_map).sum(dim=1), (offsets_w * dir_map).sum(dim=1)], dim=1)",
                            "Call"
                        ],
                        [
                            "F.normalize(offsets, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_256": {
                "variable": {
                    "value": "offset_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labelmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labelmap",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "offset_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labelmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labelmap",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trunc_303": {
                "variable": {
                    "value": "angle_index_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(angle_map + 180) / 90",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_304": {
                "variable": {
                    "value": "angle_index_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_index_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.trunc((angle_map + 180) / 90).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(angle_index_map, min=0, max=3)",
                            "Call"
                        ],
                        [
                            "angle_index_map.numpy()",
                            "Call"
                        ],
                        [
                            "torch.zeros(angle_map.shape).long().to(angle_map.device)",
                            "Call"
                        ],
                        [
                            "np.zeros(angle_map.shape, dtype=np.int)",
                            "Call"
                        ],
                        [
                            "DTOffsetHelper.align_angle(angle_map, num_classes=num_classes, return_tensor=return_tensor)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(shape, dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_123": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_169": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.conv2d(edge_mask, sobel_kernel, padding=kernel_size // 2)",
                            "Call"
                        ],
                        [
                            "F.normalize(direction, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_206": {
                "variable": {
                    "value": "energy_label_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_label_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_label_map",
                            "Method Argument"
                        ],
                        [
                            "seg_label_map",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_264": {
                "tensors": {
                    "value": "[offset_h, offset_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "permute_264": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_279": {
                "variable": {
                    "value": "mask_label_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg_label_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seg_label_map",
                            "Method Argument"
                        ],
                        [
                            "seg_label_map",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "angle_map",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "angle_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(angle_map)",
                            "Call"
                        ],
                        [
                            "DTOffsetHelper.align_angle(angle_map, num_classes=num_classes, return_tensor=return_tensor)",
                            "Call"
                        ],
                        [
                            "deg2rad(angle_map)",
                            "Call"
                        ],
                        [
                            "np.arctan2(vector_map[..., 0], vector_map[..., 1])",
                            "Call"
                        ],
                        [
                            "rad2deg(angle_map)",
                            "Call"
                        ],
                        [
                            "angle_map",
                            "Method Argument"
                        ],
                        [
                            "angle_map",
                            "Method Argument"
                        ],
                        [
                            "angle_map",
                            "Method Argument"
                        ],
                        [
                            "angle_map",
                            "Method Argument"
                        ],
                        [
                            "angle_map",
                            "Method Argument"
                        ],
                        [
                            "angle_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_329": {
                "variable": {
                    "value": "new_angle_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_330": {
                "variable": {
                    "value": "angle_index_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_376": {
                "variable": {
                    "value": "no_offset_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_379": {
                "variable": {
                    "value": "offset_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_380": {
                "variable": {
                    "value": "offset_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_413": {
                "variable": {
                    "value": "coord_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid([torch.arange(length) for length in _offset.shape[:-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "variable": {
                    "value": "vector_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(*angle_map.shape, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_391": {
                "tensors": {
                    "value": "[offset_h, offset_w]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_477": {
                "variable": {
                    "value": "ignore_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_map.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "depth_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_transform_edt(bmap_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "atan2_189": {
                "input": {
                    "value": "offsets[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "offsets[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_230": {
                "start": {
                    "value": "DTOffsetConfig.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_413": {
                "*tensors": {
                    "value": "[torch.arange(length) for length in _offset.shape[:-1]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "arange_413": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_182": {
                "seed": {
                    "value": "args_parser.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "main_contrastive.py": {
        "torch": {
            "manual_seed_171": {
                "seed": {
                    "value": "args_parser.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/cityscapes/segfix.py": {
        "torch": {
            "meshgrid_61": {
                "variable": {
                    "value": "(coord_h, coord_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "coord_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(length, dtype=torch.float) for length in (H, W)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x.unsqueeze(1).float(), grid, padding_mode='border', mode='bilinear').squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "np.round(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(offset).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_71": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([grid_w, grid_h], dim=-1) / norm_factor - 1",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_60": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_76": {
                "tensors": {
                    "value": "[grid_w, grid_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/cityscapes/segfix_ade20k.py": {
        "torch": {
            "meshgrid_60": {
                "variable": {
                    "value": "(coord_h, coord_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "coord_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(length, dtype=torch.float) for length in (H, W)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x.unsqueeze(1).float(), grid, padding_mode='border', mode='bilinear').squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "np.round(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_70": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(offset).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_70": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([grid_w, grid_h], dim=-1) / norm_factor - 1",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_59": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_75": {
                "tensors": {
                    "value": "[grid_w, grid_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/cityscapes/segfix_instance.py": {
        "torch": {
            "meshgrid_30": {
                "variable": {
                    "value": "(coord_h, coord_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "coord_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(length, dtype=torch.float) for length in (H, W)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "do_shift(x, offset)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid, padding_mode='border', mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(x).unsqueeze(0).float()",
                            "Call"
                        ],
                        [
                            "do_shift(x, offset)",
                            "Call"
                        ],
                        [
                            "F.grid_sample(x, grid, padding_mode='border', mode='bilinear')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([grid_w, grid_h], dim=-1) / norm_factor - 1",
                            "BinOp"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_29": {
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(offset).unsqueeze(0).clone() * args.scale",
                            "BinOp"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ],
                        [
                            "offset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_56": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clone_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_43": {
                "tensors": {
                    "value": "[grid_w, grid_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tester.py": {
        "torch": {
            "arange_347": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_356": {
                "variable": {
                    "value": "scaled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['img']",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(ori_h * scale), int(ori_w * scale))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_377": {
                "variable": {
                    "value": "full_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(n, self.configer.get('data', 'num_classes'), h, w).fill_(0)",
                            "Call"
                        ],
                        [
                            "full_probs + probs",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(full_probs, size=(ori_h, ori_w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(n, self.configer.get('data', 'num_classes'), h, w).fill_(0)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(1, self.configer.get('data', 'num_classes'), i.size(1), i.size(2)).cuda(device_ids[index], non_blocking=True) for (index, i) in enumerate(inputs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cuda.FloatTensor(n, self.configer.get('data', 'num_classes'), h, w).fill_(0)",
                            "Call"
                        ],
                        [
                            "self.fuse_with_depth(prob_list, scale_list, names)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(n, self.configer.get('data', 'num_classes'), h, w).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(n, self.configer.get('data', 'num_classes'), h, w).fill_(0)",
                            "Call"
                        ],
                        [
                            "[torch.zeros(1, self.configer.get('data', 'num_classes'), i.size(1), i.size(2)).cuda(device_ids[index], non_blocking=True) for (index, i) in enumerate(inputs)]",
                            "ListComp"
                        ],
                        [
                            "torch.cuda.FloatTensor(n, self.configer.get('data', 'num_classes'), h, w).fill_(0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(ori_h, ori_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_557": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset_test(inputs, offset_h_maps, offset_w_maps)",
                            "Call"
                        ],
                        [
                            "self.ss_test(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[output.permute(0, 2, 3, 1).cpu().numpy().squeeze() for output in outputs]",
                            "ListComp"
                        ],
                        [
                            "self.ms_test(inputs)",
                            "Call"
                        ],
                        [
                            "self.ms_test_depth(inputs, names)",
                            "Call"
                        ],
                        [
                            "self.sscrop_test(inputs, crop_size)",
                            "Call"
                        ],
                        [
                            "self.mscrop_test(inputs, crop_size)",
                            "Call"
                        ],
                        [
                            "self.ss_test(inputs)",
                            "Call"
                        ],
                        [
                            "self.dense_crf_process(inputs, outputs)",
                            "Call"
                        ],
                        [
                            "self.seg_net.forward(inputs, offset_h_maps, offset_w_maps)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs[1] + outputs[2] + outputs[3] + outputs[4]",
                            "BinOp"
                        ],
                        [
                            "self.seg_net.forward(scaled_inputs)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.interpolate(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs['seg']",
                            "Subscript"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_305": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset_test(inputs, offset_h_maps, offset_w_maps)",
                            "Call"
                        ],
                        [
                            "self.ss_test(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[output.permute(0, 2, 3, 1).cpu().numpy().squeeze() for output in outputs]",
                            "ListComp"
                        ],
                        [
                            "self.ms_test(inputs)",
                            "Call"
                        ],
                        [
                            "self.ms_test_depth(inputs, names)",
                            "Call"
                        ],
                        [
                            "self.sscrop_test(inputs, crop_size)",
                            "Call"
                        ],
                        [
                            "self.mscrop_test(inputs, crop_size)",
                            "Call"
                        ],
                        [
                            "self.ss_test(inputs)",
                            "Call"
                        ],
                        [
                            "self.dense_crf_process(inputs, outputs)",
                            "Call"
                        ],
                        [
                            "self.seg_net.forward(inputs, offset_h_maps, offset_w_maps)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs[1] + outputs[2] + outputs[3] + outputs[4]",
                            "BinOp"
                        ],
                        [
                            "self.seg_net.forward(scaled_inputs)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.interpolate(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs['seg']",
                            "Subscript"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_313": {
                "variable": {
                    "value": "scaled_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['img']",
                            "Subscript"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(h * scale), int(w * scale))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_326": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.offset_test(inputs, offset_h_maps, offset_w_maps)",
                            "Call"
                        ],
                        [
                            "self.ss_test(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "[output.permute(0, 2, 3, 1).cpu().numpy().squeeze() for output in outputs]",
                            "ListComp"
                        ],
                        [
                            "self.ms_test(inputs)",
                            "Call"
                        ],
                        [
                            "self.ms_test_depth(inputs, names)",
                            "Call"
                        ],
                        [
                            "self.sscrop_test(inputs, crop_size)",
                            "Call"
                        ],
                        [
                            "self.mscrop_test(inputs, crop_size)",
                            "Call"
                        ],
                        [
                            "self.ss_test(inputs)",
                            "Call"
                        ],
                        [
                            "self.dense_crf_process(inputs, outputs)",
                            "Call"
                        ],
                        [
                            "self.seg_net.forward(inputs, offset_h_maps, offset_w_maps)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs[1] + outputs[2] + outputs[3] + outputs[4]",
                            "BinOp"
                        ],
                        [
                            "self.seg_net.forward(scaled_inputs)",
                            "Call"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.interpolate(outputs, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "outputs['seg']",
                            "Subscript"
                        ],
                        [
                            "outputs[-1]",
                            "Subscript"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_573": {
                "variable": {
                    "value": "outputs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "out_crf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(d.inference(iter_max))",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_335": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(int(h * scale), int(w * scale))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_402": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.configer.get('data', 'num_classes')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_472": {
                "ndarray": {
                    "value": "np.expand_dims(weight_map, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.configer.get('data', 'num_classes')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "i.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "i.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_340": {
                "input": {
                    "value": "output[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "ori_size[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tester_offset.py": {
        "torch": {
            "softmax_196": {
                "variable": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*outputs[:2], inputs[0])",
                            "Call"
                        ],
                        [
                            "F.interpolate(dir_logits.unsqueeze(0), size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.softmax(dir_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "dir_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_201": {
                "variable": {
                    "value": "dir_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*outputs[:2], inputs[0])",
                            "Call"
                        ],
                        [
                            "F.interpolate(dir_logits.unsqueeze(0), size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.softmax(dir_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "dir_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_209": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_175": {
                "variable": {
                    "value": "mask_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_logits.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_179": {
                "variable": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_logits.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_184": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*outputs[:2], inputs[0])",
                            "Call"
                        ],
                        [
                            "F.interpolate(dir_logits.unsqueeze(0), size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "torch.softmax(dir_logits, dim=1)",
                            "Call"
                        ],
                        [
                            "dir_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_302": {
                "variable": {
                    "value": "full_probs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "full_probs[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(ori_h, ori_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_310": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._flip(x, dim=-1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h * scale), int(w * scale))",
                            "Tuple"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_325": {
                "variable": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_258": {
                "input": {
                    "value": "inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(h * scale), int(w * scale))",
                            "Tuple"
                        ],
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tools/blob_helper.py": {
        "torch": {
            "cat_29": {
                "tensors": {
                    "value": "input_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tools/data_helper.py": {
        "torch": {
            "flip_77": {
                "variable": {
                    "value": "new_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict.items()",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[len(x.shape) - 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tools/evaluator/base.py": {
        "torch": {}
    },
    "segmentor/tools/evaluator/standard.py": {
        "torch": {}
    },
    "segmentor/tools/evaluator/tasks.py": {
        "torch": {
            "from_numpy_178": {
                "variable": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(dir_logits).unsqueeze(0).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.topk(dir_logits, topk, dim=1)",
                            "Call"
                        ],
                        [
                            "dir_logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_178": {
                "variable": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_190": {
                "variable": {
                    "value": "(dir_logits, dir_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dir_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(dir_logits).unsqueeze(0).permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "torch.topk(dir_logits, topk, dim=1)",
                            "Call"
                        ],
                        [
                            "dir_logits",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "topk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_185": {
                "data": {
                    "value": "[i]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tools/module_runner.py": {
        "torch": {
            "device_50": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(get_rank())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_52": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.configer.get(gpu) is None else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "resume_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.configer.get('network', 'resume')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "save_187": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config_dict': self.configer.to_dict(), 'state_dict': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, latest_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_66": {
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.to_device(net)",
                            "Call"
                        ],
                        [
                            "self._make_parallel(net)",
                            "Call"
                        ],
                        [
                            "net.to(torch.device('cpu' if self.configer.get('gpu') is None else 'cuda'))",
                            "Call"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ],
                        [
                            "net",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "local_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_rank()",
                            "Call"
                        ]
                    ]
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_83": {
                "type": {
                    "value": "cpu if self.configer.get(gpu) is None else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_191": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config_dict': self.configer.to_dict(), 'state_dict': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, latest_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config_dict': self.configer.to_dict(), 'state_dict': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, latest_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config_dict': self.configer.to_dict(), 'state_dict': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, latest_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'config_dict': self.configer.to_dict(), 'state_dict': net.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(checkpoints_dir, latest_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/tools/optim_scheduler.py": {
        "torch": {
            "SGD_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.configer.get('lr', 'base_lr')",
                    "type": "Call",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.configer.get('optim', 'sgd')['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.configer.get('optim', 'sgd')['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "self.configer.get('optim', 'sgd')['nesterov']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_76": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "self.configer.get('lr', 'step')['step_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.configer.get('lr', 'step')['gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_56": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.configer.get('lr', 'base_lr')",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.configer.get('optim', 'adam')['betas']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.configer.get('optim', 'adam')['eps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.configer.get('optim', 'adam')['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultiStepLR_81": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.configer.get('lr', 'multistep')['stepvalue']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.configer.get('lr', 'multistep')['gamma']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamW_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_params",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.configer.get('lr', 'base_lr')",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.configer.get('optim', 'adamw')['betas']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.configer.get('optim', 'adamw')['eps']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.configer.get('optim', 'adamw')['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LambdaLR_98": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_poly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda iters: pow(1.0 - iters / self.configer.get('solver', 'max_iters'), _lambda_poly_power)",
                            "Lambda"
                        ],
                        [
                            "lambda iters: pow(1.0 - iters / self.configer.get('solver', 'max_iters'), self.configer.get('lr', 'lambda_poly')['power'])",
                            "Lambda"
                        ],
                        [
                            "lambda iters: pow(1.0 - iters / self.configer.get('solver', 'max_iters'), 0.9)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "LambdaLR_103": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda iters: (math.cos(math.pi * iters / self.configer.get('solver', 'max_iters')) + 1.0) / 2",
                            "Lambda"
                        ]
                    ]
                }
            },
            "ReduceLROnPlateau_106": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.configer.get('lr', 'plateau')['mode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "factor": {
                    "value": "self.configer.get('lr', 'plateau')['factor']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.configer.get('lr', 'plateau')['patience']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.configer.get('lr', 'plateau')['threshold']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "self.configer.get('lr', 'plateau')['thre_mode']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "cooldown": {
                    "value": "self.configer.get('lr', 'plateau')['cooldown']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "self.configer.get('lr', 'plateau')['min_lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.configer.get('lr', 'plateau')['eps']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LambdaLR_128": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "swa_lambda_poly",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swa_lambda_poly",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_143": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "SGD(net_params, lr=self.configer.get('lr', 'base_lr'), momentum=self.configer.get('optim', 'sgd')['momentum'], weight_decay=self.configer.get('optim', 'sgd')['weight_decay'], nesterov=self.configer.get('optim', 'sgd')['nesterov'])",
                            "Call"
                        ],
                        [
                            "Adam(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adam')['betas'], eps=self.configer.get('optim', 'adam')['eps'], weight_decay=self.configer.get('optim', 'adam')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "AdamW(net_params, lr=self.configer.get('lr', 'base_lr'), betas=self.configer.get('optim', 'adamw')['betas'], eps=self.configer.get('optim', 'adamw')['eps'], weight_decay=self.configer.get('optim', 'adamw')['weight_decay'])",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "torchcontrib.optim.SWA(optimizer)",
                            "Call"
                        ],
                        [
                            "self.init_optimizer(net)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "swa_lambda_cosine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "swa_lambda_cosine",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "segmentor/trainer.py": {
        "torch": {
            "GradScaler_153": {
                "variable": {
                    "value": "scaler",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_287": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[0], inputs_rev[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_304": {
                "variable": {
                    "value": "outputs_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_[int(outputs_.size(0) / 2):int(outputs_.size(0)), :, :, :].clone()",
                            "Call"
                        ],
                        [
                            "torch.flip(outputs_rev, [3])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "autocast_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "segmentor/trainer_contrastive.py": {
        "torch": {
            "unique_113": {
                "variable": {
                    "value": "this_label_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[bs].contiguous().view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_120": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_feat[:, idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_120": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_122": {
                "variable": {
                    "value": "segment_queue[lb, ptr, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feat.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_127": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_pixel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "idxs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(this_feat[:, idxs], dim=1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "this_feat[:, perm[:K]]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(feat, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_134": {
                "variable": {
                    "value": "pixel_queue[lb, -K:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(this_feat[:, idxs], dim=1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "this_feat[:, perm[:K]]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(feat, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_137": {
                "variable": {
                    "value": "pixel_queue[lb, ptr:ptr + K, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mean(this_feat[:, idxs], dim=1).squeeze(1)",
                            "Call"
                        ],
                        [
                            "this_feat[:, perm[:K]]",
                            "Subscript"
                        ],
                        [
                            "torch.transpose(feat, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_328": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[inputs[0], inputs_rev[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flip_344": {
                "variable": {
                    "value": "outputs_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs_rev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs_[int(outputs_.size(0) / 2):int(outputs_.size(0)), :, :, :].clone()",
                            "Call"
                        ],
                        [
                            "torch.flip(outputs_rev, [3])",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}