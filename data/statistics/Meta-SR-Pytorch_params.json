{
    "data/__init__.py": {
        "torch": {}
    },
    "data/benchmark.py": {
        "torch": {}
    },
    "data/common.py": {
        "torch": {
            "from_numpy_63": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np_transpose",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ascontiguousarray(img.transpose((2, 0, 1)))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data/demo.py": {
        "torch": {}
    },
    "data/multiscalesrdata.py": {
        "torch": {}
    },
    "data/srdata.py": {
        "torch": {}
    },
    "dataloader.py": {
        "torch": {
            "set_num_threads_34": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_35": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_102": {
                "variable": {
                    "value": "maybe_device_id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "loss/__init__.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_57": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.log, torch.zeros(1, len(self.loss)))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_139": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_63": {
                "variable": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.loss_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'loss_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_25": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "os.path.join(apath, 'loss.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "L1Loss_27": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.loss)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "loss/adversarial.py": {
        "torch": {
            "Adam_20": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_69": {
                "variable": {
                    "value": "loss_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake_for_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(d_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_35": {
                "variable": {
                    "value": "label_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_detach)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_36": {
                "variable": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(real)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_38": {
                "input": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_detach)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(d_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_39": {
                "input": {
                    "value": "d_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(real)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones_like(d_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_like_43": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "grad_47": {
                "outputs": {
                    "value": "d_hat.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_detach.mul(1 - epsilon) + real.mul(epsilon)",
                            "BinOp"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "loss/discriminator.py": {
        "torch": {
            "LeakyReLU_14": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_features",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_classifier",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "out_channels * patch_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loss/vgg.py": {
        "torch": {
            "mse_loss_34": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vgg_sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_forward(sr)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "vgg_hr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_forward(hr.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:8]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules[:35]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "model/__init__.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "output_cat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sr_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[self.forward_chop(patch, shave=shave, min_size=min_size) for patch in lr_list]",
                            "ListComp"
                        ],
                        [
                            "[forward_function(aug) for aug in lr_list]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_28": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "range(args.n_GPUs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_latest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_169": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_best.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_79": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "lr_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lr_list[i:i + n_GPUs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_latest.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "os.path.join(apath, 'model', 'model_{}.pt'.format(resume))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_102": {
                "f": {
                    "value": "pre_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'.'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/common.py": {
        "torch": {
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_18": {
                "variable": {
                    "value": "self.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_20": {},
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_46": {
                "num_features": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feats",
                            "Method Argument"
                        ],
                        [
                            "n_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PixelShuffle_65": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_75": {
                "upscale_factor": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feats",
                            "Method Argument"
                        ],
                        [
                            "n_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feats",
                            "Method Argument"
                        ],
                        [
                            "n_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "PReLU_71": {
                "num_parameters": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feats",
                            "Method Argument"
                        ],
                        [
                            "n_feats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_81": {
                "num_parameters": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feats",
                            "Method Argument"
                        ],
                        [
                            "n_feats",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/ddbpn.py": {
        "torch": {
            "Sequential_42": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(inter_channels, nr, scale, up), nn.PReLU(nr)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(nr, inter_channels, scale, not up), nn.PReLU(inter_channels)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[projection_conv(inter_channels, nr, scale, up), nn.PReLU(nr)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.initial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*initial",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.upmodules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.downmodules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "variable": {
                    "value": "self.reconstruction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*reconstruction",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.bottleneck",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(in_channels, nr, 1), nn.PReLU(nr)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_82": {
                "num_parameters": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "n0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "nr",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_84": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "nr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "self.depth * nr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "tensors": {
                    "value": "h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "l_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_44": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "nr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_48": {
                "num_parameters": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr",
                            "variable"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ]
                    ]
                }
            },
            "PReLU_52": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "nr",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "h_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "nr",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_35": {
                "num_parameters": {
                    "value": "nr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "nr",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/edsr.py": {
        "torch": {
            "ReLU_20": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "n_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.n_feats",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "kernel_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/mdsr.py": {
        "torch": {
            "ReLU_16": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_24": {
                "variable": {
                    "value": "self.pre_process",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Sequential(common.ResBlock(conv, n_feats, 5, act=act), common.ResBlock(conv, n_feats, 5, act=act)) for _ in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[common.Upsampler(conv, s, n_feats, act=False) for s in args.scale]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "common.ResBlock(conv, n_feats, 5, act=act)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/meta.py": {
        "torch": {
            "arange_115": {
                "variable": {
                    "value": "pos_h",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hr_h / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1 / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_118": {
                "variable": {
                    "value": "pos_w",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "hr_w / scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "1 / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_h, pos_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_123": {
                "variable": {
                    "value": "int_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((pos_h, pos_w), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "upsample_128": {
                "variable": {
                    "value": "up_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SFENet2(f__1)",
                            "Call"
                        ],
                        [
                            "self.RDBs[i](x)",
                            "Call"
                        ],
                        [
                            "self.GFF(torch.cat(RDBs_out, 1))",
                            "Call"
                        ],
                        [
                            "x + f__1",
                            "BinOp"
                        ],
                        [
                            "up_input + w_x",
                            "BinOp"
                        ],
                        [
                            "self.add_mean(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[hr_h, hr_w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "upsample_129": {
                "variable": {
                    "value": "up_input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "[hr_h, hr_w]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(up_x, res_pos)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(Cin, G, kSize, padding=(kSize - 1) // 2, stride=1), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.LFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0 + C * G",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.SFENet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.SFENet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_71": {
                "variable": {
                    "value": "self.RDBs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.GFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(self.D * G0, G0, 1, padding=0, stride=1), nn.Conv2d(G0, G0, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.weight_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0 + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "RDBs_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "variable"
                        ],
                        [
                            "growRate",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "self.D * G0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/metaedsr.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.meta_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*m_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * scale_int",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * scale_int",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_90": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.repeat_x(res)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(up_x, 3, padding=1)",
                            "Call"
                        ],
                        [
                            "cols.contiguous().view(cols.size(0) // scale_int ** 2, scale_int ** 2, cols.size(1), cols.size(2), 1).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "local_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P2W(pos_mat.view(pos_mat.size(1), -1))",
                            "Call"
                        ],
                        [
                            "local_weight.contiguous().view(x.size(2), scale_int, x.size(3), scale_int, -1, 3).permute(1, 3, 0, 2, 4, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "local_weight.contiguous().view(scale_int ** 2, x.size(2) * x.size(3), -1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_98": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.kernel_size * self.kernel_size * self.inC * self.outC",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "model/metarcan.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.meta_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_35": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.conv_du",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, channel // reduction, 1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * scale_int",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * scale_int",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_139": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_156": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.repeat_x(res)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(up_x, 3, padding=1)",
                            "Call"
                        ],
                        [
                            "cols.contiguous().view(cols.size(0) // scale_int ** 2, scale_int ** 2, cols.size(1), cols.size(2), 1).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "local_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P2W(pos_mat.view(pos_mat.size(1), -1))",
                            "Call"
                        ],
                        [
                            "local_weight.contiguous().view(x.size(2), scale_int, x.size(3), scale_int, -1, 3).permute(1, 3, 0, 2, 4, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "local_weight.contiguous().view(scale_int ** 2, x.size(2) * x.size(3), -1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_164": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.kernel_size * self.kernel_size * self.inC * self.outC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_80": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/metardn.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(Cin, G, kSize, padding=(kSize - 1) // 2, stride=1), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.LFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0 + C * G",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.meta_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(3, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.SFENet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.SFENet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.RDBs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "self.GFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(self.D * G0, G0, 1, padding=0, stride=1), nn.Conv2d(G0, G0, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * scale_int",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x] * scale_int",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_108": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_129": {
                "variable": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "up_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.repeat_x(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(up_x, 3, padding=1)",
                            "Call"
                        ],
                        [
                            "cols.contiguous().view(cols.size(0) // scale_int ** 2, scale_int ** 2, cols.size(1), cols.size(2), 1).permute(0, 1, 3, 4, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "local_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.P2W(pos_mat.view(pos_mat.size(1), -1))",
                            "Call"
                        ],
                        [
                            "local_weight.contiguous().view(x.size(2), scale_int, x.size(3), scale_int, -1, 3).permute(1, 3, 0, 2, 4, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "local_weight.contiguous().view(scale_int ** 2, x.size(2) * x.size(3), -1, 3)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_26": {
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.kernel_size * self.kernel_size * self.inC * self.outC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "RDBs_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "variable"
                        ],
                        [
                            "growRate",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "self.D * G0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/rcan.py": {
        "torch": {
            "AdaptiveAvgPool2d_15": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.conv_du",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channel, channel // reduction, 1, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "act",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_head",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.body",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_body",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channel",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "n_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_feat",
                            "Method Argument"
                        ],
                        [
                            "n_feat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/rdn.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(Cin, G, kSize, padding=(kSize - 1) // 2, stride=1), nn.ReLU()]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_37": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.LFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0 + C * G",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.SFENet1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.SFENet2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.RDBs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.GFF",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(self.D * G0, G0, 1, padding=0, stride=1), nn.Conv2d(G0, G0, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_25": {
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.UPNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(G0, G * r * r, kSize, padding=(kSize - 1) // 2, stride=1), nn.PixelShuffle(r), nn.Conv2d(G, args.n_colors, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.UPNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[nn.Conv2d(G0, G * 4, kSize, padding=(kSize - 1) // 2, stride=1), nn.PixelShuffle(2), nn.Conv2d(G, G * 4, kSize, padding=(kSize - 1) // 2, stride=1), nn.PixelShuffle(2), nn.Conv2d(G, args.n_colors, kSize, padding=(kSize - 1) // 2, stride=1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "RDBs_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "Cin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inChannels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "variable"
                        ],
                        [
                            "growRate",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "self.D * G0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G * r * r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_85": {
                "upscale_factor": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.scale[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "variable"
                        ],
                        [
                            "growRate",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "G0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate0",
                            "variable"
                        ],
                        [
                            "args.G0",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_91": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "variable"
                        ],
                        [
                            "growRate",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "G * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PixelShuffle_93": {
                "upscale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_94": {
                "in_channels": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growRate",
                            "variable"
                        ],
                        [
                            "growRate",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "args.n_colors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kSize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.RDNkSize",
                            "Attribute"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kSize - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "manual_seed_10": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "ones_46": {
                "variable": {
                    "value": "h_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inH",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "scale_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.ceil(scale))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_47": {
                "variable": {
                    "value": "mask_h",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "inH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inH",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "scale_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.ceil(scale))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_48": {
                "variable": {
                    "value": "w_offset",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inW",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "scale_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.ceil(scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "mask_w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inW",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "scale_int",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.ceil(scale))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_59": {
                "variable": {
                    "value": "h_project_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "outH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(scale * inH)",
                            "Call"
                        ],
                        [
                            "hr.size()",
                            "Call"
                        ],
                        [
                            "int(H * scale)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_59": {
                "variable": {
                    "value": "h_project_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_60": {
                "variable": {
                    "value": "int_h_project_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_project_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, outH, 1).float().mul(1.0 / scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_65": {
                "variable": {
                    "value": "w_project_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "outW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(scale * inW)",
                            "Call"
                        ],
                        [
                            "hr.size()",
                            "Call"
                        ],
                        [
                            "int(W * scale)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_65": {
                "variable": {
                    "value": "w_project_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_66": {
                "variable": {
                    "value": "int_w_project_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_project_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(0, outW, 1).float().mul(1.0 / scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_99": {
                "variable": {
                    "value": "h_offset_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_offset] * (scale_int * inW)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "w_offset_coord",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[w_offset] * (scale_int * inH)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "mask_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_h] * (scale_int * inW)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "mask_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mask_w] * (scale_int * inH)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "pos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h_offset_coord, w_offset_coord)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "mask_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((mask_h, mask_w), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_188": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_260": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if self.args.cpu else cuda",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "scale_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "scale_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_mat] * (inH * inW * scale_int ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "pos_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scale_mat.view(1, -1, 1), pos_mat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "masked_select_144": {
                "variable": {
                    "value": "re_sr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(lr, idx_scale, scale_coord_map)",
                            "Call"
                        ],
                        [
                            "self.model(lr, idx_scale, scale_coord_map)",
                            "Call"
                        ],
                        [
                            "re_sr.contiguous().view(N, C, outH, outW)",
                            "Call"
                        ],
                        [
                            "utility.quantize(sr, self.args.rgb_range)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_176": {
                "obj": {
                    "value": "target.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.ckp.dir, 'model', 'model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_138": {
                "variable": {
                    "value": "scale_coord_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_coord_map] * self.args.n_GPUs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_185": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "len(self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_26": {
                "f": {
                    "value": "os.path.join(ckp.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "masked_select_220": {
                "variable": {
                    "value": "re_sr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(lr, idx_scale, scale_coord_map)",
                            "Call"
                        ],
                        [
                            "self.model(lr, idx_scale, scale_coord_map)",
                            "Call"
                        ],
                        [
                            "re_sr.contiguous().view(N, C, outH, outW)",
                            "Call"
                        ],
                        [
                            "utility.quantize(sr, self.args.rgb_range)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "(mask_h, mask_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "scale_coord_map",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[scale_coord_map] * self.args.n_GPUs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utility.py": {
        "torch": {
            "Tensor_45": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.log, log]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "StepLR_240": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "my_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_84": {
                "obj": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'psnr_log.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "trainer.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_250": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "my_optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "my_optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "milestones",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.decay_type.split('_')",
                            "Call"
                        ],
                        [
                            "list(map(lambda x: int(x), milestones))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_56": {
                "variable": {
                    "value": "self.log",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.dir + '/psnr_log.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    }
}