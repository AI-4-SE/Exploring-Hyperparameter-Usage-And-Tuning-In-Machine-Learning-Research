{
    "eval/meta_eval.py": {
        "sklearn": {
            "LogisticRegression_127": {
                "variable": {
                    "value": "clf_spatial",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogisticRegression_134": {
                "variable": {
                    "value": "clf_global",
                    "type": "variable",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_207": {
                "y_true": {
                    "value": "query_ys_np",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_ys.view(-1).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "query_ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([scores_global, scores_spatial], axis=1).max(1).argmax(1)",
                            "Call"
                        ],
                        [
                            "(scores_global + scores_spatial).argmax(1)",
                            "Call"
                        ],
                        [
                            "np.stack([scores_global, scores_spatial], axis=1).max(1).argmax(1)",
                            "Call"
                        ],
                        [
                            "(scores_global + scores_spatial).argmax(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_146": {
                "y_true": {
                    "value": "query_ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_ys.view(-1).numpy()",
                            "Call"
                        ],
                        [
                            "query_ys.view(-1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "query_ys_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack([scores_global, scores_spatial], axis=1).max(1).argmax(1)",
                            "Call"
                        ],
                        [
                            "(scores_global + scores_spatial).argmax(1)",
                            "Call"
                        ],
                        [
                            "np.stack([scores_global, scores_spatial], axis=1).max(1).argmax(1)",
                            "Call"
                        ],
                        [
                            "(scores_global + scores_spatial).argmax(1)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "normalize_239": {
                "variable": {
                    "value": "z_support",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_support.view(z_support.size(0), z_support.size(1), -1).mean(-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_support, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_240": {
                "variable": {
                    "value": "z_query",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_query.view(z_query.size(0), z_query.size(1), -1).mean(-1)",
                            "Call"
                        ],
                        [
                            "F.normalize(z_query, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LBFGS_263": {
                "variable": {
                    "value": "set_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "linear_clf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_264": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_227": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_243": {
                "variable": {
                    "value": "linear_clf",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveMaxPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_246": {
                "variable": {
                    "value": "linear_clf",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_256": {
                "variable": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(prototypes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_99": {
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_100": {
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_243": {
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_244": {
                "in_channels": {
                    "value": "self.feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_way",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_256": {
                "tensors": {
                    "value": "prototypes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[z_support_pooled[y_support == l].mean(0) for l in y_support.unique()]",
                            "ListComp"
                        ],
                        [
                            "[z_support[y_support == l].mean(0) for l in y_support.unique()]",
                            "ListComp"
                        ],
                        [
                            "F.normalize(torch.stack(prototypes), dim=1, p=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdaptiveMaxPool2d_252": {
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/cifar.py": {
        "torch": {
            "stack_150": {
                "variable": {
                    "value": "support_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.train_transform(x.squeeze()), support_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_151": {
                "variable": {
                    "value": "query_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.test_transform(x.squeeze()), query_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/cub.py": {
        "torch": {
            "stack_195": {
                "variable": {
                    "value": "support_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.train_transform(x.squeeze()), support_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_196": {
                "variable": {
                    "value": "query_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.test_transform(x.squeeze()), query_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/loaders.py": {
        "torch": {
            "DataLoader_45": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageNet(args=opt, partition=train_partition, transform=train_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageNet(args=opt, partition='val', transform=test_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_125": {
                "variable": {
                    "value": "meta_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaImageNet(args=opt, partition='test', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "meta_valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaImageNet(args=opt, partition='val', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TieredImageNet(args=opt, partition=train_partition, transform=train_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_62": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TieredImageNet(args=opt, partition='train_phase_val', transform=test_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "meta_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaTieredImageNet(args=opt, partition='test', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "meta_valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaTieredImageNet(args=opt, partition='val', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CIFAR100(args=opt, partition=train_partition, transform=train_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CIFAR100(args=opt, partition='train', transform=test_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_157": {
                "variable": {
                    "value": "meta_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaCIFAR100(args=opt, partition='test', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_161": {
                "variable": {
                    "value": "meta_valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaCIFAR100(args=opt, partition='val', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConcatDataset_97": {
                "variable": {
                    "value": "all_datasets",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_dataset, val_dataset, test_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "all_datasets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConcatDataset([train_dataset, val_dataset, test_dataset])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ImageNet(args=opt, partition='val', transform=test_trans)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.batch_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "worker_init_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_181": {
                "variable": {
                    "value": "meta_testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaCUB(args=opt, partition='novel', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_185": {
                "variable": {
                    "value": "meta_valloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MetaCUB(args=opt, partition='val', train_transform=train_trans, test_transform=test_trans, fix_seed=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opt.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "opt.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/mini_imagenet.py": {
        "torch": {
            "stack_133": {
                "variable": {
                    "value": "support_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.train_transform(x.squeeze()), support_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_134": {
                "variable": {
                    "value": "query_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.test_transform(x.squeeze()), query_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/tiered_imagenet.py": {
        "torch": {
            "stack_152": {
                "variable": {
                    "value": "support_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.train_transform(x.squeeze()), support_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "query_xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(map(lambda x: self.test_transform(x.squeeze()), query_xs))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/transform_cfg.py": {
        "torch": {}
    },
    "dataset/utils.py": {
        "torch": {
            "Conv2d_31": {
                "variable": {
                    "value": "self.blur_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.blur_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.blur",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(radias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.arange(-self.r, self.r + 1)",
                            "Call"
                        ],
                        [
                            "np.exp(-np.power(x, 2) / (2 * sigma * sigma))",
                            "Call"
                        ],
                        [
                            "x / x.sum()",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(x).view(1, -1).repeat(3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReflectionPad2d_37": {
                "padding": {
                    "value": "radias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "eval_fewshot.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "losses.py": {
        "torch": {
            "normalize_10": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(f1, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_11": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(f2, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_25": {
                "variable": {
                    "value": "p_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t / self.T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_93": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(features_a, features_b.T)",
                            "Call"
                        ],
                        [
                            "contrast * self.temperature",
                            "BinOp"
                        ],
                        [
                            "attention(features_a, features_b)",
                            "Call"
                        ],
                        [
                            "self._compute_logits(features_a, features_b, attention)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_95": {
                "variable": {
                    "value": "exp_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "features_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(features_a, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "features_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(features_b, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "features_a",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(features_a, dim=1, p=2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "features_b.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_67": {
                "variable": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_72": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_75": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "labels.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_57": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_98": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_div_27": {
                "input": {
                    "value": "p_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(y_s / self.T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(y_t / self.T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_64": {
                "n": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/attention.py": {
        "torch": {
            "Sequential_11": {
                "*args": {
                    "value": "nn.Linear(dim, dim, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "drop_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_b.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key_a.unsqueeze(0).transpose(-1, -2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "aligned_features_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(att_scores / math.sqrt(self.inner_size))",
                            "Call"
                        ],
                        [
                            "self.dropout(att_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(att_scores / math.sqrt(self.inner_size))",
                            "Call"
                        ],
                        [
                            "self.dropout(att_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_a.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "self.value(features_a)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_a.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "key_b.unsqueeze(1).transpose(-1, -2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "aligned_features_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "att_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(att_scores / math.sqrt(self.inner_size))",
                            "Call"
                        ],
                        [
                            "self.dropout(att_probs)",
                            "Call"
                        ],
                        [
                            "nn.Softmax(dim=-1)(att_scores / math.sqrt(self.inner_size))",
                            "Call"
                        ],
                        [
                            "self.dropout(att_probs)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_b.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.value(features_b)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_44": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Softmax_52": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_64": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineSimilarity_65": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_70": {
                "input": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.CosineSimilarity(dim=-1)(value_a, aligned_features_b)",
                            "Call"
                        ],
                        [
                            "similarity + nn.CosineSimilarity(dim=-1)(value_b, aligned_features_a)",
                            "BinOp"
                        ],
                        [
                            "similarity.mul_(self.lambda_lse).exp_().sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.log(similarity) / self.lambda_lse",
                            "BinOp"
                        ],
                        [
                            "similarity.mean(-1)",
                            "Call"
                        ],
                        [
                            "similarity.sum(-1)",
                            "Call"
                        ],
                        [
                            "similarity.max(-1)[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/contrast.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(dim, hidden_size, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.feat_dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/convnet.py": {
        "torch": {
            "randn_77": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64, 64, kernel_size=3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_32": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_15": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_25": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "randn_333": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_16": {
                "variable": {
                    "value": "self.avg_pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(channel, channel // reduction)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nonzero_62": {
                "variable": {
                    "value": "non_zero_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.arange(self.block_size).view(-1, 1).expand(self.block_size, self.block_size).reshape(-1), torch.arange(self.block_size).repeat(self.block_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "t_65": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.zeros(self.block_size ** 2, 2).cuda().long(), offsets.long())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_97": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_99": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_101": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_102": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_171": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "1 - self.keep_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Bernoulli_45": {
                "variable": {
                    "value": "bernoulli",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - keep_rate) / self.block_size ** 2 * feat_size ** 2 / (feat_size - self.block_size + 1) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pad_80": {
                "variable": {
                    "value": "padded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_83": {
                "variable": {
                    "value": "padded_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bernoulli.sample((batch_size, channels, height - (self.block_size - 1), width - (self.block_size - 1))).cuda()",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(left_padding, right_padding, left_padding, right_padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_168": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_189": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "channel // reduction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sigmoid_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_145": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out)",
                            "Call"
                        ],
                        [
                            "self.se(out)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.relu(out)",
                            "Call"
                        ],
                        [
                            "self.maxpool(out)",
                            "Call"
                        ],
                        [
                            "self.DropBlock(out, gamma=gamma)",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.drop_rate, training=self.training, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "self.block_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_190": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_192": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_67": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_67": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet_standard.py": {
        "torch": {
            "randn_185": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_113": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_123": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.base * 8 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/wresnet.py": {
        "torch": {
            "Conv2d_12": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nStages[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(out_spatial)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(self.conv1(F.relu(self.bn1(x))))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(out_spatial))",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, 1)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_42": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_41": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_contrastive.py": {
        "torch": {
            "device_count_94": {
                "variable": {
                    "value": "opt.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_182": {
                "variable": {
                    "value": "criterion_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_209": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.encoder.parameters(), 'lr': opt.learning_rate}]",
                            "List"
                        ],
                        [
                            "params + [{'params': attention.parameters(), 'lr': opt.learning_rate}]",
                            "BinOp"
                        ],
                        [
                            "params + [{'params': model.head.parameters(), 'lr': opt.learning_rate}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_211": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model.encoder.parameters(), 'lr': opt.learning_rate}]",
                            "List"
                        ],
                        [
                            "params + [{'params': attention.parameters(), 'lr': opt.learning_rate}]",
                            "BinOp"
                        ],
                        [
                            "params + [{'params': model.head.parameters(), 'lr': opt.learning_rate}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_216": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_235": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(params, lr=opt.learning_rate, weight_decay=opt.weight_decay)",
                            "Call"
                        ],
                        [
                            "optim.SGD(params, lr=opt.learning_rate, momentum=opt.momentum, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "opt.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "eta_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.learning_rate * opt.lr_decay_rate ** 3",
                            "BinOp"
                        ],
                        [
                            "opt.learning_rate * opt.lr_decay_rate ** 3",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model.state_dict() if opt.n_gpu <= 1 else model.module.state_dict(), 'attention': attention.state_dict() if opt.spatial_cont_loss else None}",
                            "Dict"
                        ],
                        [
                            "{'opt': opt, 'model': model.state_dict() if opt.n_gpu <= 1 else model.module.state_dict(), 'attention': attention.state_dict() if opt.spatial_similarity else None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_226": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContrastResNet(opt, n_cls)",
                            "Call"
                        ],
                        [
                            "apex.parallel.convert_syncbn_model(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.train()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_324": {
                "variable": {
                    "value": "loss_contrast_global",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(criterion_cls(outputs[:bsz], target) + criterion_cls(outputs[bsz:], target)) / 2.0",
                            "BinOp"
                        ],
                        [
                            "criterion_cls(outputs, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_330": {
                "variable": {
                    "value": "loss_contrast_spatial",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(criterion_cls(outputs[:bsz], target) + criterion_cls(outputs[bsz:], target)) / 2.0",
                            "BinOp"
                        ],
                        [
                            "criterion_cls(outputs, target)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': opt, 'model': model.state_dict() if opt.n_gpu <= 1 else model.module.state_dict(), 'attention': attention.state_dict() if opt.spatial_cont_loss else None}",
                            "Dict"
                        ],
                        [
                            "{'opt': opt, 'model': model.state_dict() if opt.n_gpu <= 1 else model.module.state_dict(), 'attention': attention.state_dict() if opt.spatial_similarity else None}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_last.pth'.format(opt.model))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_297": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input[0].cuda(non_blocking=True).float(), input[1].cuda(non_blocking=True).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_distillation.py": {
        "torch": {
            "device_count_133": {
                "variable": {
                    "value": "opt.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_176": {
                "variable": {
                    "value": "criterion_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_182": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': model_s.parameters()}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "opt.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "opt.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_204": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=opt.learning_rate, momentum=opt.momentum, weight_decay=opt.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "opt.epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "eta_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.learning_rate * opt.lr_decay_rate ** 3",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_239": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': ckpt_opt, 'model': model_s.state_dict() if opt.n_gpu <= 1 else model_s.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'opt': ckpt_opt, 'model': model_s.state_dict() if opt.n_gpu <= 1 else model_s.module.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_student_last.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_191": {
                "variable": {
                    "value": "model_t",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apex.parallel.convert_syncbn_model(model_t)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_t)",
                            "Call"
                        ],
                        [
                            "model_t.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_192": {
                "variable": {
                    "value": "model_s",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ContrastResNet(ckpt_opt, n_cls)",
                            "Call"
                        ],
                        [
                            "apex.parallel.convert_syncbn_model(model_s)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model_s)",
                            "Call"
                        ],
                        [
                            "model_s.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_231": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'opt': ckpt_opt, 'model': model_s.state_dict() if opt.n_gpu <= 1 else model_s.module.state_dict()}",
                            "Dict"
                        ],
                        [
                            "{'opt': ckpt_opt, 'model': model_s.state_dict() if opt.n_gpu <= 1 else model_s.module.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(opt.save_folder, '{}_student_last.pth'.format(opt.model_s))",
                            "Call"
                        ],
                        [
                            "os.path.join(opt.save_folder, 'ckpt_epoch_{epoch}.pth'.format(epoch=epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_263": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input[0].cuda(non_blocking=True).float(), input[1].cuda(non_blocking=True).float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_272": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "manual_seed_70": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "31",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_all_71": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "31",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}