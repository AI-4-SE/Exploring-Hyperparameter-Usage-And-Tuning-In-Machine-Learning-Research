{
    "community-detection/GSTauthorship.py": {
        "sklearn": {
            "LinearSVC_435": {
                "variable": {
                    "value": "classifiers[thisModel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_482": {
                "variable": {
                    "value": "classifierGFT",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_525": {
                "variable": {
                    "value": "classifierData",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_567": {
                "variable": {
                    "value": "classifierData",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "community-detection/GSTfacebook.py": {
        "sklearn": {
            "LinearSVC_483": {
                "variable": {
                    "value": "classifiers[thisModel]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_529": {
                "variable": {
                    "value": "classifierGFT",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_572": {
                "variable": {
                    "value": "classifierData",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_614": {
                "variable": {
                    "value": "classifierData",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "images_graph_experiments/utils_classif.py": {
        "sklearn": {
            "LinearSVC_10": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StandardScaler_11": {
                "variable": {
                    "value": "scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "community-detection/utils.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.W_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N, N).squeeze() * torch.bernoulli(0.9 * torch.ones(K, N, N))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.W_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N, N).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N, N))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_22": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_real ** 2 + self.W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_43": {
                "variable": {
                    "value": "W_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2 * torch.abs(self.avg.phi_signal) ** 2 + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_46": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_47": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_49": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(-2 * torch.abs(self.avg.phi_signal) ** 2 + 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "rfft_63": {
                "variable": {
                    "value": "x_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.N, self.N)",
                            "Call"
                        ],
                        [
                            "x.view((-1, self.N))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ifft_74": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_79": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ifft(y_f, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "y ** 2",
                            "BinOp"
                        ],
                        [
                            "y.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y)",
                            "Call"
                        ],
                        [
                            "self.avg(y)",
                            "Call"
                        ],
                        [
                            "y.view(batch, -1, y.size(2), y.size(3))",
                            "Call"
                        ],
                        [
                            "y_r + y_i",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(y)",
                            "Call"
                        ],
                        [
                            "y.view(batch1, -1, self.N)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_136": {
                "variable": {
                    "value": "self.phi_signal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(gabor_2d(N, N, 0.8 * 2 ** (J - 1), 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rfft_139": {
                "variable": {
                    "value": "x_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.N, self.N)",
                            "Call"
                        ],
                        [
                            "x.view((-1, self.N))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_260": {
                "variable": {
                    "value": "self.W_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N_init).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N_init))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_261": {
                "variable": {
                    "value": "self.W_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N_init).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N_init))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_262": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "avg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "self.F_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "variable": {
                    "value": "self.F_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_266": {
                "variable": {
                    "value": "self.F_inv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(np.conj(F.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_267": {
                "variable": {
                    "value": "self.F_inv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(np.conj(F.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_275": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_real ** 2 + self.W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_284": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_332": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ifft(y_f, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "y ** 2",
                            "BinOp"
                        ],
                        [
                            "y.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y)",
                            "Call"
                        ],
                        [
                            "self.avg(y)",
                            "Call"
                        ],
                        [
                            "y.view(batch, -1, y.size(2), y.size(3))",
                            "Call"
                        ],
                        [
                            "y_r + y_i",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(y)",
                            "Call"
                        ],
                        [
                            "y.view(batch1, -1, self.N)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "tensors": {
                    "value": "[y, x_LF]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "irfft_143": {
                "input": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_294": {
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_12": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_12": {
                "input": {
                    "value": "0.9 * torch.ones(K, N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_13": {
                "input": {
                    "value": "0.5 * torch.ones(K, N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_260": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_260": {
                "input": {
                    "value": "0.5 * torch.ones(K, N_init)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_261": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_261": {
                "input": {
                    "value": "0.5 * torch.ones(K, N_init)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_13": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_43": {
                "input": {
                    "value": "self.avg.phi_signal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_260": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_261": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "community-detection/utils_compute_interferometric.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(z.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_18": {
                "variable": {
                    "value": "easy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(norm_net_x) / (0.0001 + torch.sqrt(norm_x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "HF",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(z.view(z.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_19": {
                "input": {
                    "value": "to_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(norm_x) - torch.mean(norm_net_x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X[batch_idx, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(x.view(x.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net[o].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "images_graph_experiments/build_representation.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_20": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_46": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_73": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_74": {
                "variable": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(z.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "easy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(norm_net_x) / (0.0001 + torch.sqrt(norm_x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "W_ + args.dataset + _ + args.lr_schedule + _ + str(args.J) + _ + str(args.K) + .t7",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('./data_mnist', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_56": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torchvision.datasets.MNIST('./data_mnist', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "28",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "28",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "150",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_155": {
                "variable": {
                    "value": "glah",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net.W_real ** 2 + net.W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_155": {
                "variable": {
                    "value": "glah",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_156": {
                "variable": {
                    "value": "glah2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net.W_real ** 2 + net.W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "glah2",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fft.fftshift(glah2.detach().numpy(), axes=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "glah",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.fft.fftshift(glah.detach().numpy(), axes=(0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(z.view(z.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_77": {
                "input": {
                    "value": "to_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(norm_x) - torch.mean(norm_net_x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_81": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_88": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_114": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rates[n]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ast.literal_eval(args.lr_schedule)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_76": {
                "input": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(x.view(x.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_159": {
                "input": {
                    "value": "glah2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(net.W_real ** 2 + net.W_imag ** 2).cpu()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.fft.fftshift(glah2.detach().numpy(), axes=(1, 2)))",
                            "Call"
                        ],
                        [
                            "torchvision.utils.make_grid(glah2.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "glah2 / torch.max(glah2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_161": {
                "input": {
                    "value": "glah",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(net.W_real ** 2 + net.W_imag ** 2, 0).sqrt().view(N, N).cpu()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.fft.fftshift(glah.detach().numpy(), axes=(0, 1)))",
                            "Call"
                        ],
                        [
                            "glah / torch.max(glah)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_139": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_144": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_149": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_138": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_143": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_148": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "images_graph_experiments/build_representation_graph.py": {
        "torch": {
            "is_available_26": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_27": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_29": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_72": {
                "variable": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(z.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "easy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(norm_net_x) / (0.0001 + torch.sqrt(norm_x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_183": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'./W_' + args.lr_schedule + '_' + str(args.K) + '_' + args.data_name + '_' + str(args.split) + '_' + str(args.order) + '_' + str(args.epochs) + '.t7'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_73": {
                "input": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(z.view(z.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_75": {
                "input": {
                    "value": "to_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(norm_x) - torch.mean(norm_net_x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "variable": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_x).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_123": {
                "variable": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train_y).type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_146": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_172": {
                "variable": {
                    "value": "glah",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net[o].W_real ** 2 + net[o].W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_172": {
                "variable": {
                    "value": "glah",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_74": {
                "input": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(x.view(x.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_128": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net[o].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rates[n - N]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ast.literal_eval(args.lr_schedule)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_157": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_162": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_161": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "images_graph_experiments/classif.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_94": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_95": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_123": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "K * (N // 2 ** J) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "K * (N // 2 ** J) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_39": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(1 - output * y, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=scattering_datasets.get_dataset_dir('CIFAR'), train=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), download=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(root=scattering_datasets.get_dataset_dir('CIFAR'), train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ],
                        [
                            "False",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_153": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./data_mnist', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_160": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./data_mnist', train=False, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50000",
                            "Constant"
                        ],
                        [
                            "60000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "K * (N // 2 ** J) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50000",
                            "Constant"
                        ],
                        [
                            "60000",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "K * (N // 2 ** J) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ],
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_38": {
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "model.weight.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_39": {
                "input": {
                    "value": "1 - output * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_40": {
                "input": {
                    "value": "model.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_60": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "feature(data)",
                            "Call"
                        ],
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "bn(output)",
                            "Call"
                        ],
                        [
                            "model(output)",
                            "Call"
                        ],
                        [
                            "feature(data)",
                            "Call"
                        ],
                        [
                            "output.view(output.size(0), -1)",
                            "Call"
                        ],
                        [
                            "bn(output)",
                            "Call"
                        ],
                        [
                            "model(output)",
                            "Call"
                        ],
                        [
                            "feature(data)",
                            "Call"
                        ],
                        [
                            "output[..., 0:N:2 ** J, 0:N:2 ** J].contiguous()",
                            "Call"
                        ],
                        [
                            "feature(data)",
                            "Call"
                        ],
                        [
                            "output[..., 0:N:2 ** J, 0:N:2 ** J].contiguous()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_174": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rates[epoch]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ast.literal_eval(args.lr_schedule)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "images_graph_experiments/classif_graph.py": {
        "torch": {
            "manual_seed_26": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_27": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_134": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_161": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "variable": {
                    "value": "features_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features_train).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "features_train.permute((0, 2, 1)).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "features_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "features_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(features_test).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "features_test.permute((0, 2, 1)).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_196": {
                "variable": {
                    "value": "SIZE_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "numel_196": {
                "variable": {
                    "value": "SIZE_feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_70": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(1 - output * y, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_202": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "features_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_203": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(features_train, torch.from_numpy(labels_train))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(train_loader, batch_size=64, shuffle=True, num_workers=2)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(features_train, torch.from_numpy(labels_train))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(train_loader, batch_size=256, shuffle=True, num_workers=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_204": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "features_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_205": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(features_test, torch.from_numpy(labels_test))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(test_loader, batch_size=64, shuffle=False, num_workers=2)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(features_test, torch.from_numpy(labels_test))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(test_loader, batch_size=256, shuffle=False, num_workers=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(train_loader.dataset)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "SIZE_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 1).detach().numel()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "y_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(train_loader.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_212": {
                "variable": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(test_loader.dataset)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "SIZE_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 1).detach().numel()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_213": {
                "variable": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N_sample_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(test_loader.dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_256": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "features_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_257": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(features_train, torch.from_numpy(labels_train))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(train_loader, batch_size=64, shuffle=True, num_workers=2)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(features_train, torch.from_numpy(labels_train))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(train_loader, batch_size=256, shuffle=True, num_workers=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_258": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "features_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_259": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(features_test, torch.from_numpy(labels_test))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(test_loader, batch_size=64, shuffle=False, num_workers=2)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(features_test, torch.from_numpy(labels_test))",
                            "Call"
                        ],
                        [
                            "torch.utils.data.DataLoader(test_loader, batch_size=256, shuffle=False, num_workers=2)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_260": {
                "variable": {
                    "value": "BN",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "SIZE_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 1).detach().numel()",
                            "Call"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "linear",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "SIZE_feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 1).detach().numel()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "21",
                            "Constant"
                        ],
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_73": {
                "tensor": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "linear.weight.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_74": {
                "input": {
                    "value": "1 - output * y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_75": {
                "input": {
                    "value": "linear.weight ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_103": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(outs, 1).detach().view((data.size(0), -1))",
                            "Call"
                        ],
                        [
                            "BN(output)",
                            "Call"
                        ],
                        [
                            "linear(output)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, 1).detach().view((data.size(0), -1))",
                            "Call"
                        ],
                        [
                            "BN(output)",
                            "Call"
                        ],
                        [
                            "linear(output)",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, 1).detach().view((data.size(0), -1))",
                            "Call"
                        ],
                        [
                            "torch.cat(outs, 1).detach().view((data.size(0), -1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_202": {
                "ndarray": {
                    "value": "labels_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_204": {
                "ndarray": {
                    "value": "labels_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_244": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_256": {
                "ndarray": {
                    "value": "labels_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_258": {
                "ndarray": {
                    "value": "labels_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_267": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "linear.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rates[epoch]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ast.literal_eval(args.lr_schedule)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "images_graph_experiments/figure.py": {
        "torch": {
            "load_7": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "W.t7",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "{'cuda:0': 'cpu'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "from_numpy_11": {
                "variable": {
                    "value": "P",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.fft.fftshift(torch.sqrt(W_real ** 2 + W_imag ** 2).numpy(), axes=(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_10": {
                "input": {
                    "value": "W_real ** 2 + W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "images_graph_experiments/utils.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.W_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N, N).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N, N))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.W_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N, N).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N, N))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_real ** 2 + self.W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_41": {
                "variable": {
                    "value": "W_target",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-2 * torch.abs(self.avg.phi_signal) ** 2 + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_44": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_45": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_47": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(-2 * torch.abs(self.avg.phi_signal) ** 2 + 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "rfft_62": {
                "variable": {
                    "value": "x_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.N, self.N)",
                            "Call"
                        ],
                        [
                            "x.view((-1, self.N))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ifft_73": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_78": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ifft(y_f, 2, normalized=True)",
                            "Call"
                        ],
                        [
                            "y ** 2",
                            "BinOp"
                        ],
                        [
                            "y.sum(-1)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(y)",
                            "Call"
                        ],
                        [
                            "self.avg(y)",
                            "Call"
                        ],
                        [
                            "y.view(batch, -1, y.size(2), y.size(3))",
                            "Call"
                        ],
                        [
                            "y_r + y_i",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(y + 1e-06)",
                            "Call"
                        ],
                        [
                            "y.view(batch1, -1, self.N)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "variable": {
                    "value": "self.phi_signal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(gabor_2d(N, N, 0.8 * 2 ** (J - 1), 0, 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rfft_137": {
                "variable": {
                    "value": "x_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(-1, self.N, self.N)",
                            "Call"
                        ],
                        [
                            "x.view((-1, self.N))",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.W_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N_init).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N_init))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.W_imag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(K, N_init).squeeze() * torch.bernoulli(0.5 * torch.ones(K, N_init))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_269": {
                "variable": {
                    "value": "self.avg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "avg",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_270": {
                "variable": {
                    "value": "self.F_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_271": {
                "variable": {
                    "value": "self.F_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(F)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_273": {
                "variable": {
                    "value": "self.F_inv_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.real(np.conj(F.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "self.F_inv_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.imag(np.conj(F.T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_282": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.W_real ** 2 + self.W_imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_291": {
                "variable": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_340": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "[y, x_LF]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "irfft_141": {
                "input": {
                    "value": "y_f",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([y_f_r.unsqueeze(-1), y_f_i.unsqueeze(-1)], -1)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_301": {
                "input": {
                    "value": "W_norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ],
                        [
                            "torch.sum(self.W_real ** 2 + self.W_imag ** 2, 0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(W_norm)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_12": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_12": {
                "input": {
                    "value": "0.5 * torch.ones(K, N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_13": {
                "input": {
                    "value": "0.5 * torch.ones(K, N, N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_267": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_267": {
                "input": {
                    "value": "0.5 * torch.ones(K, N_init)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_268": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "bernoulli_268": {
                "input": {
                    "value": "0.5 * torch.ones(K, N_init)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_12": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_13": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "N",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "W_norm.shape[1]",
                            "Subscript"
                        ],
                        [
                            "self.N",
                            "Attribute"
                        ],
                        [
                            "W_norm.shape[0]",
                            "Subscript"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_41": {
                "input": {
                    "value": "self.avg.phi_signal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_267": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_268": {
                "*size": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "N_init",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "N - size_avg",
                            "BinOp"
                        ],
                        [
                            "self.N - self.size_avg",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "images_graph_experiments/utils_compute_interferometric.py": {
        "torch": {
            "sum_15": {
                "variable": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z.view(z.size(0), -1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_18": {
                "variable": {
                    "value": "easy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(norm_net_x) / (0.0001 + torch.sqrt(norm_x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_17": {
                "input": {
                    "value": "norm_net_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(z.view(z.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_19": {
                "input": {
                    "value": "to_reg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(norm_x) - torch.mean(norm_net_x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_54": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "outs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_18": {
                "input": {
                    "value": "norm_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sum(x.view(x.size(0), -1) ** 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net[o].parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}