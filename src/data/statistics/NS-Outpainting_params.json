{
    "dataset/build_dataset.py": {
        "tensorflow": {
            "TFRecordWriter_33": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TFRecordWriter_63": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Feature_45": {
                "variable": {
                    "value": "features[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image_bytes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_48": {
                "variable": {
                    "value": "tf_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Example_50": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ],
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ],
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_76": {
                "variable": {
                    "value": "features[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image_bytes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_79": {
                "variable": {
                    "value": "tf_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Example_81": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ],
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ],
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Feature_94": {
                "variable": {
                    "value": "features[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[image_bytes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_97": {
                "variable": {
                    "value": "tf_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "feature": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Example_99": {
                "variable": {
                    "value": "tf_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ],
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ],
                        [
                            "tf.train.Features(feature=features)",
                            "Call"
                        ]
                    ]
                }
            },
            "BytesList_46": {
                "value": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_77": {
                "value": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_95": {
                "value": {
                    "value": "[image_bytes]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "dataset/parse.py": {
        "tensorflow": {
            "FixedLenFeature_7": {
                "variable": {
                    "value": "dics[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_9": {
                "variable": {
                    "value": "parsed_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_11": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_example['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[72 * 2, 216 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * image - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (2.0 / 255) - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[72 * 2, 216 * 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_crop_15": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[72 * 2, 216 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * image - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (2.0 / 255) - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "[64 * 2, 128 * 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_flip_left_right_16": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "image": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[72 * 2, 216 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * image - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (2.0 / 255) - 1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "FixedLenFeature_26": {
                "variable": {
                    "value": "dics[image]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "parse_single_example_28": {
                "variable": {
                    "value": "parsed_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "example_proto",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "dics",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "decode_raw_30": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "parsed_example['image']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[72 * 2, 216 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * image - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (2.0 / 255) - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[64 * 2, 128 * 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_17": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[72 * 2, 216 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * image - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (2.0 / 255) - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[72 * 2, 216 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.random_crop(image, [64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.random_flip_left_right(image)",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) / 255.0",
                            "BinOp"
                        ],
                        [
                            "2.0 * image - 1.0",
                            "BinOp"
                        ],
                        [
                            "tf.decode_raw(parsed_example['image'], out_type=tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, shape=[64 * 2, 128 * 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cast(image, tf.float32) * (2.0 / 255) - 1.0",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "eval_model.py": {
        "tensorflow": {
            "ConfigProto_105": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_110": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "lambda_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_115": {
                "variable": {
                    "value": "train_op_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "train_op_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TFRecordDataset_121": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[args.trainset_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_129": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[args.testset_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_190": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_111": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_183": {
                "variable": {
                    "value": "reconstructions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "reconstructions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(reconstructions, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "right_recons",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "right_recons",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(right_recons, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_181": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_140": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_142": {
                "name": {
                    "value": "'tower_%d' % gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "groundtruth",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size_per_gpu, 128, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "groundtruth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_147": {
                "variable": {
                    "value": "left_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "groundtruth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [args.batch_size_per_gpu, 128, 256, 3], name='groundtruth')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[args.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_151": {
                "variable": {
                    "value": "right_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 128, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[args.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_156": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_143": {
                "name_or_scope": {
                    "value": "cpu_variables",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "gpu_id > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "trainable_variables_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "modeling/loss.py": {
        "tensorflow": {
            "square_10": {
                "variable": {
                    "value": "loss_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gt - recon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_16": {
                "variable": {
                    "value": "mask1",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 128, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_17": {
                "variable": {
                    "value": "mask2",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.ones((128, 128))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(mask_values, 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(mask_values, 3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 128, 128, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_18": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask1, mask2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "loss_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(gt - recon)",
                            "Call"
                        ],
                        [
                            "loss_recon * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(loss_recon)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_34": {
                "variable": {
                    "value": "slopes",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), [1, 2, 3]) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "variable": {
                    "value": "gradients_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "slice_52": {
                "variable": {
                    "value": "left_half_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params[i]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.cfg.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_53": {
                "variable": {
                    "value": "right_half_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "gt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params[i]",
                            "Subscript"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 128, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.cfg.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_54": {
                "variable": {
                    "value": "right_half_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 128, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.cfg.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[left_half_gt, right_half_recon]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_74": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_77": {
                "variable": {
                    "value": "regularization_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_79": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "losses + regularization_losses",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_84": {
                "variable": {
                    "value": "loss_averages",
                    "type": "Variable",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "avg",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_71": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "identity_88": {
                "variable": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "total_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add_n(losses + regularization_losses, name='total_loss')",
                            "Call"
                        ],
                        [
                            "tf.identity(total_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_103": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(grads, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_27": {
                "input_tensor": {
                    "value": "adversarial_pos - adversarial_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_31": {
                "x": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=[self.cfg.batch_size_per_gpu, 1, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "differences",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fake - real",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gradients_32": {
                "ys": {
                    "value": "dis_fun(interpolates, reuse=tf.AUTO_REUSE, name=name)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[interpolates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "input_tensor": {
                    "value": "adversarial_neg",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dis_fun(fake, reuse=tf.AUTO_REUSE, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_87": {
                "control_inputs": {
                    "value": "[loss_averages_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_101": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(dis_fun(interpolates, reuse=tf.AUTO_REUSE, name=name), [interpolates])[0]",
                            "Subscript"
                        ],
                        [
                            "[None if gradient is None else tf.clip_by_average_norm(gradient, self.cfg.clip_gradient_value) for gradient in gradients]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "clip_by_average_norm_116": {
                "t": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.cfg.clip_gradient_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "modeling/model.py": {
        "tensorflow": {
            "relu_135": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_144": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "transpose_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4, 4 * size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_152": {
                "variable": {
                    "value": "x_split",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_184": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_186": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(ys, axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(y, output_size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(y)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.get_shape().as_list()[3]",
                            "Subscript"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_195": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_197": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_199": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf.contrib.layers.instance_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_220": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.new_atrous_conv_layer(x, [3, 1, filters, filters], rate, name + '_a1')",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x1)",
                            "Call"
                        ],
                        [
                            "activation_fn(x1)",
                            "Call"
                        ],
                        [
                            "self.new_atrous_conv_layer(x1, [1, 7, filters, filters], rate, name + '_a2')",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_221": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.new_atrous_conv_layer(x, [1, 7, filters, filters], rate, name + '_b1')",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x2)",
                            "Call"
                        ],
                        [
                            "self.new_atrous_conv_layer(x2, [3, 1, filters, filters], rate, name + '_b2')",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                }
            },
            "atrous_conv2d_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bottom",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=filter_shape, regularizer=regularizer, initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '2a'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter2",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "(kernel_size, kernel_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '2b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter3",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '2c'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "X_shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X_input",
                            "Name"
                        ],
                        [
                            "X_input",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(X_shortcut, filter3, (1, 1), strides=(stride, stride), name=conv_name_base + '1', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(X_shortcut)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filter1",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '2a'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter2",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '2b'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter3",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '2c'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "X_shortcut",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X_input",
                            "Name"
                        ],
                        [
                            "X_input",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(X_shortcut, filter3, (1, 1), strides=(stride, stride), name=conv_name_base + '1', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(X_shortcut)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filter3",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "(stride, stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv_name_base + '1'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "add_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X_shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "X_input",
                            "Name"
                        ],
                        [
                            "X_input",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(X_shortcut, filter3, (1, 1), strides=(stride, stride), name=conv_name_base + '1', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(X_shortcut)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_201": {
                "x": {
                    "value": "shortcut",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_234": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv0",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_238": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.atrous_conv2d(bottom, W, rate, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), padding='same', name=conv_name_base + '2b', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, kernel_size=(1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(x, X_shortcut)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(X_input, filter1, kernel_size=(1, 1), strides=(1, 1), name=conv_name_base + '2a', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter2, (kernel_size, kernel_size), strides=(stride, stride), name=conv_name_base + '2b', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filter3, (1, 1), name=conv_name_base + '2c', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.add(X_shortcut, x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "self.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.instance_norm(x)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, size, 1, stride=1, activation_fn=None, normalizer_fn=None, padding='SAME', weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4, 4 * size])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [1, 0, 2])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, 4 * size])",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 1, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels / 2, 3, stride=1, activation_fn=tf.nn.relu, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(x, channels, 1, stride=1, activation_fn=None, normalizer_fn=tf.contrib.layers.instance_norm, padding='SAME', weights_regularizer=regularizer)",
                            "Call"
                        ],
                        [
                            "tf.add(shortcut, x1)",
                            "Call"
                        ],
                        [
                            "tf.add(x, x2)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ],
                        [
                            "images",
                            "Name"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=64, kernel_size=(4, 4), strides=(2, 2), name='conv0', kernel_regularizer=regularizer, padding='same', kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(x, filters=128, kernel_size=(4, 4), strides=(2, 2), name='conv1', padding='same', kernel_regularizer=regularizer, kernel_initializer=initializer, use_bias=False)",
                            "Call"
                        ],
                        [
                            "self.in_lrelu(x)",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[64, 64, 256], stage=2, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[128, 128, 512], stage=3, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "self.convolutional_block(x, kernel_size=3, filters=[256, 256, 1024], stage=4, block='a', stride=2)",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "self.identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_281": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[short_cut4, train]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_290": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_292": {
                "variable": {
                    "value": "(sc, kp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_293": {
                "variable": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_294": {
                "variable": {
                    "value": "merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[short_cut3, sc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_297": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[merge, kp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_312": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_314": {
                "variable": {
                    "value": "(sc, kp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_315": {
                "variable": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_316": {
                "variable": {
                    "value": "merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[short_cut2, sc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_319": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[merge, kp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_333": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_335": {
                "variable": {
                    "value": "(sc, kp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_336": {
                "variable": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_337": {
                "variable": {
                    "value": "merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[short_cut1, sc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_340": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[merge, kp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_346": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "split_348": {
                "variable": {
                    "value": "(sc, kp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_349": {
                "variable": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "sc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(sc)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_350": {
                "variable": {
                    "value": "merge",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[short_cut0, sc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_353": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[merge, kp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_transpose_357": {
                "variable": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.rct(x)",
                            "Call"
                        ],
                        [
                            "tf.concat([short_cut4, train], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 1024, 1, 't4')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [256, 256, 1024], stage=-4, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 512, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 512, 2, 't3')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [128, 128, 512], stage=-3, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 256, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "self.grb(train, 256, 4, 't2')",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='b', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='c', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='d', is_relu=True)",
                            "Call"
                        ],
                        [
                            "self.identity_block(train, 3, [64, 64, 256], stage=-2, block='e', is_relu=True)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 128, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ],
                        [
                            "ly.conv2d_transpose(train, 64, 4, stride=2, activation_fn=None, normalizer_fn=normalizer_fn, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ],
                        [
                            "tf.concat([merge, kp], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ]
                    ]
                },
                "weights_regularizer": {
                    "value": "regularizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.l2_regularizer(self.cfg.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "biases_initializer": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_376": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_378": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_380": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_382": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_384": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_406": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                }
            },
            "conv2d_408": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ],
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_410": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_412": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "normalizer_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ],
                        [
                            "ly.instance_norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_10": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "'id_block_stage' + str(stage) + block",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "'conv_block_stage' + str(stage) + block",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_155": {
                "name_or_scope": {
                    "value": "LSTM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTMCell_157": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "4 * size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                }
            },
            "MultiRNNCell_159": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell] * layer_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_169": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "4 * size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation_fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "self.leaky_relu",
                            "Attribute"
                        ],
                        [
                            "tf.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ],
                        [
                            "lrelu",
                            "Name"
                        ]
                    ]
                }
            },
            "MultiRNNCell_171": {
                "variable": {
                    "value": "lstm_cell2",
                    "type": "Variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[lstm_cell] * layer_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "state_is_tuple": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "GEN",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_360": {
                "x": {
                    "value": "recon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d_transpose(train, 3, 4, stride=2, activation_fn=None, padding='SAME', weights_initializer=initializer, weights_regularizer=regularizer, biases_initializer=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_364": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_394": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_168": {
                "name_or_scope": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_175": {
                "tensor": {
                    "value": "now",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4, 1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "tensor": {
                    "value": "now",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4, 1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "tensor": {
                    "value": "now",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4, 1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "tensor": {
                    "value": "now",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 4, 1, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_387": {
                "tensor": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_415": {
                "tensor": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 4, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size / 2, kernel_size=4, stride=2, activation_fn=activation_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ],
                        [
                            "ly.conv2d(img, num_outputs=size * 2, kernel_size=4, stride=2, activation_fn=activation_fn, normalizer_fn=normalizer_fn)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_367": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "train_model.py": {
        "tensorflow": {
            "ConfigProto_104": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_109": {
                "config": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "lambda_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_114": {
                "variable": {
                    "value": "train_op_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_116": {
                "variable": {
                    "value": "train_op_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "TFRecordDataset_120": {
                "variable": {
                    "value": "trainset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[args.trainset_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TFRecordDataset_128": {
                "variable": {
                    "value": "testset",
                    "type": "Variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "[args.testset_path]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_208": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_110": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_181": {
                "variable": {
                    "value": "aver_loss_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_Gs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "aver_loss_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_Ds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "aver_loss_ag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_adv_Gs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "aver_loss_rec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_recs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_191": {
                "variable": {
                    "value": "groundtruths",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "groundtruths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ],
                        [
                            "tf.concat(groundtruths, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_192": {
                "variable": {
                    "value": "reconstructions",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "reconstructions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(reconstructions, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_all_201": {
                "variable": {
                    "value": "merged",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_202": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "tensorboard_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_path + 'log/'",
                            "BinOp"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_180": {
                "device_name": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_194": {
                "name": {
                    "value": "loss_g",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "aver_loss_g",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_Gs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "loss_d",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "aver_loss_d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_Ds)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_196": {
                "name": {
                    "value": "loss_ag",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "aver_loss_ag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_adv_Gs)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_197": {
                "name": {
                    "value": "loss_rec",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "aver_loss_rec",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss_recs)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_198": {
                "name": {
                    "value": "groundtruth",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "groundtruths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ],
                        [
                            "tf.concat(groundtruths, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_199": {
                "name": {
                    "value": "reconstruction",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reconstructions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(reconstructions, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Summary_335": {
                "variable": {
                    "value": "summary",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_139": {
                "device_name": {
                    "value": "'/gpu:%d' % gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_141": {
                "name": {
                    "value": "'tower_%d' % gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "groundtruth",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[args.batch_size_per_gpu, 128, 256, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "groundtruth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "slice_146": {
                "variable": {
                    "value": "left_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "groundtruth",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [args.batch_size_per_gpu, 128, 256, 3], name='groundtruth')",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[args.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_150": {
                "variable": {
                    "value": "right_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "reconstruction",
                    "type": "Variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 128, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[args.batch_size_per_gpu, 128, 128, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_collection_155": {
                "variable": {
                    "value": "reg_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.REGULARIZATION_LOSSES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "cpu_variables",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "gpu_id > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "trainable_variables_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}