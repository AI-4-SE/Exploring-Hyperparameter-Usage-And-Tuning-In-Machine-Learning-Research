{
    "classification/model/ADDA/adda/adversary.py": {
        "tensorflow": {
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'adversary'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "classification/model/ADDA/adda/data/cityscapes.py": {
        "tensorflow": {
            "Session_121": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slice_input_producer_18": {
                "variable": {
                    "value": "(im_path, label_path)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[tf.constant(self.images), tf.constant(self.labels)]",
                    "type": "List",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_22": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "im_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_23": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_24": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_26": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "label_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_27": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_29": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_83": {
                "variable": {
                    "value": "(im_path, label_path)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[tf.constant(self.images), tf.constant(self.labels)]",
                    "type": "List",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "self.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FIFOQueue_89": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[im_shape, label_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "read_file_91": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "im_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_92": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(im_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(im, channels=3)",
                            "Call"
                        ],
                        [
                            "tf.cast(im, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "read_file_98": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "label_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_image_99": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_101": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.read_file(label_path)",
                            "Call"
                        ],
                        [
                            "tf.image.decode_image(label, channels=1)",
                            "Call"
                        ],
                        [
                            "label[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(label, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_103": {
                "variable": {
                    "value": "left_label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label[:, :1024], label_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_104": {
                "variable": {
                    "value": "right_label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_pad, label[:, 1024:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "ims",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[left_im, right_im]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[left_label, right_label]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "QueueRunner_110": {
                "variable": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": []
                },
                "queue": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.FIFOQueue(capacity, [tf.float32, tf.int32], shapes=[im_shape, label_shape])",
                            "Call"
                        ]
                    ]
                },
                "enqueue_ops": {
                    "value": "[enqueue_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "start_queue_runners_123": {
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session()",
                            "Call"
                        ]
                    ]
                }
            },
            "add_queue_runner_111": {
                "qr": {
                    "value": "qr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.QueueRunner(queue, [enqueue_op])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_102": {
                "shape": {
                    "value": "[1024, self.overlap]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_19": {
                "value": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_84": {
                "value": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/adda/data/dataset.py": {
        "tensorflow": {
            "placeholder_59": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.image_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.label_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FIFOQueue_65": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "dtypes": {
                    "value": "[tf.float32, tf.int32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[self.image_shape, self.label_shape]",
                            "List"
                        ]
                    ]
                }
            },
            "convert_to_tensor_88": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._image_fn_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_89": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._label_list",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "slice_input_producer_92": {
                "variable": {
                    "value": "(im_fn_q, labl_q)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor_list": {
                    "value": "[images, labels]",
                    "type": "List",
                    "possible_values": []
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "read_file_95": {
                "variable": {
                    "value": "file_contents_q",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "im_fn_q",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_queue_runner_69": {
                "qr": {
                    "value": "fqr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FeedingQueueRunner(queue, [enqueue_op], feed_fns=[self.feed(im, label).__next__])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/model/ADDA/adda/models/lenet.py": {
        "tensorflow": {
            "variable_scope_14": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lenet'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_22": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 20, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 50, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 500, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='fc4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_24": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 20, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 50, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 500, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='fc4')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 20, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 50, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 500, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='fc4')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 20, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 50, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 500, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='fc4')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_30": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 20, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 50, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 2, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 500, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, num_classes, activation_fn=None, scope='fc4')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/model/ADDA/adda/models/model.py": {
        "tensorflow": {
            "cast_23": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "gray2rgb(inputs)",
                            "Call"
                        ],
                        [
                            "rgb2gray(inputs)",
                            "Call"
                        ],
                        [
                            "model_fn.range * inputs",
                            "BinOp"
                        ],
                        [
                            "tf.image.resize_images(inputs, [size, size])",
                            "Call"
                        ],
                        [
                            "inputs - tf.constant(model_fn.mean)",
                            "BinOp"
                        ],
                        [
                            "inputs[:, :, [2, 1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "tf.multiply(image, tf.constant(RGB2GRAY))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_54": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(RGB2GRAY)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_49": {
                "x": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(RGB2GRAY)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "RGB2GRAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.2989, 0.587, 0.114], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_40": {
                "value": {
                    "value": "model_fn.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_49": {
                "value": {
                    "value": "RGB2GRAY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.2989, 0.587, 0.114], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/model/ADDA/adda/models/svhnnet.py": {
        "tensorflow": {
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'svhnnet'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_25": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, 5, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 3072, scope='fc4')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2048, scope='fc5')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, activation_fn=None, scope='fc6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, 5, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 3072, scope='fc4')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2048, scope='fc5')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, activation_fn=None, scope='fc6')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, 5, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 3072, scope='fc4')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2048, scope='fc5')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, activation_fn=None, scope='fc6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_29": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, 5, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 3072, scope='fc4')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2048, scope='fc5')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, activation_fn=None, scope='fc6')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_31": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, 5, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 3072, scope='fc4')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2048, scope='fc5')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, activation_fn=None, scope='fc6')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "flatten_33": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 5, scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, 3, stride=2, scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 128, 5, scope='conv3')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.flatten(net)",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 3072, scope='fc4')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 2048, scope='fc5')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 10, activation_fn=None, scope='fc6')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "classification/model/ADDA/adda/models/vgg16_imagenet.py": {
        "tensorflow": {
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_a",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_a'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_16'",
                            "Method Argument"
                        ],
                        [
                            "'vgg_19'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_19",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_128": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_195": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_264": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.repeat(inputs, 1, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 1, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ],
                        [
                            "slim.repeat(inputs, 2, slim.conv2d, 64, [3, 3], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 4, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding=fc_conv_padding, scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, scope='fc8')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(net, [1, 2], name='fc8/squeezed')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fc8/squeezed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_initializer_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/adda/models/vgg_16_fcn8s.py": {
        "tensorflow": {
            "resize_bilinear_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(inputs)[1:3] * scale_factor + scale_factor",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "slice_40": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, offset, offset, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, h, w, -1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_137": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1024, 2048, 3]",
                            "List"
                        ]
                    ]
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_146": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(logits=net, labels=labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_147": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_77": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [100, 100], [100, 100], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_78": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1/conv1_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1/conv1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_80": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_81": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_82": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_83": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_84": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_85": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_86": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "repeat_87": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "slim.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_88": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[7, 7]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_91": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_93": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                },
                "is_training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "scope": {
                    "value": "dropout7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "19",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_103": {
                "variable": {
                    "value": "score_pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4 * 0.01",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "scope": {
                    "value": "score_pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_108": {
                "variable": {
                    "value": "fuse_pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upscore2a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale(net, 2, name='upscore2a')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_pool4c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop(score_pool4, upscore2a, 5, name='score_pool4c')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fuse_pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_112": {
                "variable": {
                    "value": "score_pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3 * 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                },
                "filters": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "scope": {
                    "value": "score_pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_117": {
                "variable": {
                    "value": "fuse_pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upscore_pool4a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale(fuse_pool4, 2, name='upscore_pool4a')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "score_pool3c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop(score_pool3, upscore_pool4a, 9, name='score_pool3c')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fuse_pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_36": {
                "input": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_to_collection_102": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "upscore2a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale(net, 2, name='upscore2a')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_107": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "score_pool4c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop(score_pool4, upscore2a, 5, name='score_pool4c')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_109": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "fuse_pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(upscore2a, score_pool4c, name='fuse_pool4')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_111": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "upscore_pool4a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale(fuse_pool4, 2, name='upscore_pool4a')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_116": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "score_pool3c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "crop(score_pool3, upscore_pool4a, 9, name='score_pool3c')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_118": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "fuse_pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(upscore_pool4a, score_pool3c, name='fuse_pool3')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_120": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "upscore8a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "upscale(fuse_pool3, 8, name='upscore8a')",
                            "Call"
                        ]
                    ]
                }
            },
            "add_to_collection_122": {
                "name": {
                    "value": "end_points_collection",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sc.name + '_end_points'",
                            "BinOp"
                        ]
                    ]
                },
                "value": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_146": {
                "logits": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "tf.pad(net, [[0, 0], [100, 100], [100, 100], [0, 0]])",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, padding='VALID', scope='conv1/conv1_1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, 3, scope='conv1/conv1_2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 2, slim.conv2d, 128, [3, 3], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 256, [3, 3], scope='conv3')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv4')",
                            "Call"
                        ],
                        [
                            "slim.repeat(net, 3, slim.conv2d, 512, [3, 3], scope='conv5')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool5')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [7, 7], padding='VALID', scope='fc6')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout6')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 4096, [1, 1], scope='fc7')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, dropout_keep_prob, is_training=is_training, scope='dropout7')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, num_classes, [1, 1], activation_fn=None, normalizer_fn=None, weights_initializer=tf.zeros_initializer(), scope='fc8')",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('int32', shape[0:3])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'vgg_16_fcn8s'",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "vgg_16",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_145": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "end_points.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/adda/util.py": {
        "tensorflow": {
            "get_collection_39": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/tools/eval_classification.py": {
        "tensorflow": {
            "batch_41": {
                "variable": {
                    "value": "(im_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_44": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(net, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ConfigProto_46": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_49": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_50": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.util.collect_vars(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_55": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/tools/eval_segmentation.py": {
        "tensorflow": {
            "cast_15": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inputs, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(inputs, [size, size])",
                            "Call"
                        ],
                        [
                            "inputs - tf.constant(model_fn.mean)",
                            "BinOp"
                        ],
                        [
                            "inputs[:, :, [2, 1, 0]]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_29": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_94": {
                "variable": {
                    "value": "(im_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im, label]",
                    "type": "List",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_97": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(net, 3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_99": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "dict(GPU=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_101": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count=dict(GPU=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_102": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_103": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_106": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict()",
                            "Call"
                        ],
                        [
                            "collect_vars(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_108": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_20": {
                "value": {
                    "value": "model_fn.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/tools/train.py": {
        "tensorflow": {
            "batch_59": {
                "variable": {
                    "value": "(im_batch, label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[im, label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_65": {
                "variable": {
                    "value": "class_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_batch, mask)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(net, mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_total_loss_66": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_68": {
                "variable": {
                    "value": "lr_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(lr_var.assign(lr * 0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_collection_74": {
                "variable": {
                    "value": "vars_to_update",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "model + '/' + train_scope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConfigProto_77": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "dict(GPU=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_79": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count=dict(GPU=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_80": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_81": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_92": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.util.collect_vars(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_51": {
                "seed": {
                    "value": "seed + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "not_equal_62": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_batch, mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "ignore_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "boolean_mask_63": {
                "variable": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "label_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(label_batch, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(label_batch, ignore_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_64": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.boolean_mask(net, mask)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.not_equal(label_batch, ignore_label)",
                            "Call"
                        ]
                    ]
                }
            },
            "MomentumOptimizer_70": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(lr, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_72": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(lr, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "var_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.util.collect_vars(model, end=weights_end, prepend_scope=weights_scope)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "classification/model/ADDA/tools/train_adda.py": {
        "tensorflow": {
            "batch_81": {
                "variable": {
                    "value": "(source_im_batch, source_label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[source_im, source_label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_83": {
                "variable": {
                    "value": "(target_im_batch, target_label_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[target_im, target_label]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "variable": {
                    "value": "source_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "source_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source_ft, [-1, int(source_ft.get_shape()[-1])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(source_ft.get_shape()[-1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "target_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target_ft, [-1, int(target_ft.get_shape()[-1])])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(target_ft.get_shape()[-1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_93": {
                "variable": {
                    "value": "adversary_ft",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[source_ft, target_ft]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "source_adversary_label",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(source_ft)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_95": {
                "variable": {
                    "value": "target_adversary_label",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tf.shape(target_ft)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_96": {
                "variable": {
                    "value": "adversary_label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[source_adversary_label, target_adversary_label]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_102": {
                "variable": {
                    "value": "mapping_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "1 - adversary_label",
                    "type": "BinOp",
                    "possible_values": []
                },
                "logits": {
                    "value": "adversary_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.adversary.adversarial_discriminator(adversary_ft, adversary_layers, leaky=adversary_leaky)",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_104": {
                "variable": {
                    "value": "adversary_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "adversary_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([source_adversary_label, target_adversary_label], 0)",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "adversary_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.adversary.adversarial_discriminator(adversary_ft, adversary_layers, leaky=adversary_leaky)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_113": {
                "variable": {
                    "value": "lr_var",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run(lr_var.assign(lr * 0.1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_124": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "dict(GPU=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_126": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count=dict(GPU=1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Coordinator_127": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_128": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Session(config=config)",
                            "Call"
                        ]
                    ]
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_138": {
                "variable": {
                    "value": "source_restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "source_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.util.collect_vars('source')",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_143": {
                "variable": {
                    "value": "target_restorer",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "target_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adda.util.collect_vars('target')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_50": {
                "seed": {
                    "value": "seed + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(lr, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(lr, name='learning_rate', trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "latest_checkpoint_133": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.latest_checkpoint(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_94": {
                "input": {
                    "value": "source_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(source_ft, [-1, int(source_ft.get_shape()[-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_95": {
                "input": {
                    "value": "target_ft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(target_ft, [-1, int(target_ft.get_shape()[-1])])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}