{
    "GCC.py": {
        "tensorflow": {
            "Variable_232": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "l2_cocycle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_cocycle.reshape(-1, 1)",
                            "Call"
                        ],
                        [
                            "[0] * len(init_z)",
                            "BinOp"
                        ],
                        [
                            "np.array(l2_cocycle)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdamOptimizer_236": {
                "variable": {
                    "value": "opt_adams",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Session_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_233": {
                "x": {
                    "value": "tf.abs(f - tf.matmul(B_mat, z))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(sys.argv[6])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_233": {
                "input_tensor": {
                    "value": "tf.pow(tf.abs(f - tf.matmul(B_mat, z)), lq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_233": {
                "x": {
                    "value": "f - tf.matmul(B_mat, z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_233": {
                "a": {
                    "value": "B_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bdry.todense()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(l2_cocycle, trainable=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "GCC2.py": {
        "tensorflow": {
            "Variable_270": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "z_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2_cocycle",
                            "variable"
                        ]
                    ]
                },
                "name": {
                    "value": "z",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_278": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_280": {
                "variable": {
                    "value": "B_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "B_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bdry.todense()",
                            "Call"
                        ],
                        [
                            "tf.Variable(B_mat, name='B_mat', trainable=False, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "B_mat",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_281": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(f, name='f', trainable=False, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "np.zeros((n, 1))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_seed_277": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_273": {
                "x": {
                    "value": "tf.math.abs(f - tf.linalg.matmul(B_mat, z))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "lq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(sys.argv[6])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_273": {
                "input_tensor": {
                    "value": "tf.math.pow(tf.math.abs(f - tf.linalg.matmul(B_mat, z)), lq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_273": {
                "x": {
                    "value": "f - tf.linalg.matmul(B_mat, z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_273": {
                "a": {
                    "value": "B_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bdry.todense()",
                            "Call"
                        ],
                        [
                            "tf.Variable(B_mat, name='B_mat', trainable=False, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(z_init, name='z', trainable=True, dtype=tf.float64)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}