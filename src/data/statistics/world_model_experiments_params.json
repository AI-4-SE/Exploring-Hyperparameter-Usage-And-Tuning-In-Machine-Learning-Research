{
    "pytorch_implementation/generate_data.py": {
        "torch": {
            "device_44": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_86": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(observation, (64, 64))",
                            "Call"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ],
                        [
                            "process_frame(observation)",
                            "Call"
                        ],
                        [
                            "process_frame(observation)",
                            "Call"
                        ],
                        [
                            "normalize_observation(observation)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(observation, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.reshape(observation, (-1, 3, 64, 64))",
                            "Call"
                        ],
                        [
                            "torch.tensor(observation, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_90": {
                "variable": {
                    "value": "controller_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, hidden_state.reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "controller_model.forward(controller_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_96": {
                "variable": {
                    "value": "rnn_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, action_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_47": {
                "f": {
                    "value": "checkpoints/vae_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_53": {
                "f": {
                    "value": "checkpoints/rnn_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_implementation/models/rnn.py": {
        "torch": {
            "randn_like_45": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std.exp()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_46": {
                "variable": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_mix.exp() * (mean + log_std.exp() * epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_57": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(v.exp(), dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(log_mix, mean, log_std)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "num_mixtures",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_16": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size * num_mixtures * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "input": {
                    "value": "v.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_63": {
                "input": {
                    "value": "torch.sum(log_mix.exp(), dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "log_mix.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_implementation/models/vae.py": {
        "torch": {
            "sum_57": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(recon_x - x).pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_58": {
                "variable": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((recon_x - x).pow(2), dim=(1, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.mean(r_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_60": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(1 + log_var - mu.pow(2) - log_var.exp(), dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.max(kl_loss, kl_loss.new([kl_tolerance * z_size]))",
                            "Call"
                        ],
                        [
                            "torch.mean(kl_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_61": {
                "variable": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kl_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(1 + log_var - mu.pow(2) - log_var.exp(), dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.max(kl_loss, kl_loss.new([kl_tolerance * z_size]))",
                            "Call"
                        ],
                        [
                            "torch.mean(kl_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "variable": {
                    "value": "self.conv_t_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_22": {
                "variable": {
                    "value": "self.conv_t_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_23": {
                "variable": {
                    "value": "self.conv_t_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_24": {
                "variable": {
                    "value": "self.conv_t_4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_4(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_37": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_var / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_38": {
                "variable": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_44": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_t_1(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_t_2(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_t_3(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_47": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv_t_4(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "1 + log_var - mu.pow(2) - log_var.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_implementation/series.py": {
        "torch": {
            "device_15": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_18": {
                "f": {
                    "value": "checkpoints/vae_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "observations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_data['obs']",
                            "Subscript"
                        ],
                        [
                            "np.moveaxis(observations, 3, 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor(observations, dtype=torch.float, device=device) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_implementation/train_rnn.py": {
        "torch": {
            "zeros_11": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_18": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_26": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "rnn_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "MDN_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_data['obs'][:1000]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(states, device=device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_data['action'][:1000]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(actions, device=device)",
                            "Call"
                        ],
                        [
                            "actions.type(torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_39": {
                "variable": {
                    "value": "target_states",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "target_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "raw_data['obs'][1:]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(target_states, device=device)",
                            "Call"
                        ],
                        [
                            "target_states.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target_states.view(MDN_SEQUENCE_LEN, MDN_BATCH_SIZE, -1, 1)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(states, actions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_22": {
                "f": {
                    "value": "checkpoints/rnn_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_55": {
                "obj": {
                    "value": "rnn_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/rnn_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "pytorch_implementation/train_v_m_c.py": {
        "torch": {
            "tensor_55": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(observation, (64, 64))",
                            "Call"
                        ],
                        [
                            "process_frame(observation)",
                            "Call"
                        ],
                        [
                            "normalize_observation(observation)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(observation, 2, 0)",
                            "Call"
                        ],
                        [
                            "np.reshape(observation, (-1, 3, 64, 64))",
                            "Call"
                        ],
                        [
                            "torch.tensor(observation, device=device)",
                            "Call"
                        ],
                        [
                            "env.reset()",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_59": {
                "variable": {
                    "value": "controller_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, hidden_state.reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_61": {
                "variable": {
                    "value": "action_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "controller_model.forward(controller_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_63": {
                "variable": {
                    "value": "rnn_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding, action_tensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_71": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "checkpoints/vae_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_81": {
                "f": {
                    "value": "checkpoints/rnn_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pytorch_implementation/train_vae.py": {
        "torch": {
            "device_35": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "VAE_LEARNING_RATE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "checkpoints/vae_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoints/vae_checkpoint.pth",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset[idx * VAE_BATCH_SIZE:(idx + 1) * VAE_BATCH_SIZE]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(batch, dtype=torch.float, device=device) / 255",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}