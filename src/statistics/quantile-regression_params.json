{
    "python/benchmark.py": {
        "torch": {
            "manual_seed_152": {
                "seed": {
                    "value": "42",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "python/neural_model.py": {
        "torch": {
            "SGD_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lr * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_126": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, weight_decay=weight_decay, nesterov=True, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.n_in, 200)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_36": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_168": {
                "variable": {
                    "value": "train_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_205": {
                "variable": {
                    "value": "validate_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_266": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/tmp_file_' + str(uuid.uuid4())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_50": {
                "tensors": {
                    "value": "(fout[..., 0:1], fout[..., 0:1] + torch.cumsum(self.softplus(fout[..., 1:]), dim=-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_119": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "QuantileNetworkModule(Xmean, Xstd, ymean, ystd, quantiles.shape[0]) if init_model is None else init_model",
                            "IfExp"
                        ],
                        [
                            "torch.load(tmp_file)",
                            "Call"
                        ],
                        [
                            "pickle.loads(model_str)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/tmp_file_' + str(uuid.uuid4())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_138": {
                "input": {
                    "value": "tquantiles[None] * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_143": {
                "input": {
                    "value": "tquantiles[None, None] * z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_out if len(self.y_mean.shape) == 1 else self.n_out * self.y_mean.shape[1]",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "norm_148": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tY[tidx, None] - yhat",
                            "BinOp"
                        ],
                        [
                            "tY[tidx, :, None] - yhat",
                            "BinOp"
                        ],
                        [
                            "tY[tidx, :, None] - yhat",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "QuantileNetworkModule(Xmean, Xstd, ymean, ystd, quantiles.shape[0]) if init_model is None else init_model",
                            "IfExp"
                        ],
                        [
                            "torch.load(tmp_file)",
                            "Call"
                        ],
                        [
                            "pickle.loads(model_str)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/tmp_file_' + str(uuid.uuid4())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cumsum_50": {
                "input": {
                    "value": "self.softplus(fout[..., 1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "python/neural_sqerr.py": {
        "torch": {
            "SGD_110": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lr * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "StepLR_111": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.SGD(model.parameters(), lr=lr, weight_decay=weight_decay, nesterov=True, momentum=0.9)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.fc_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.n_in, 200)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_133": {
                "variable": {
                    "value": "train_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Tensor_170": {
                "variable": {
                    "value": "validate_loss",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "load_231": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/tmp_file_' + str(uuid.uuid4())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_104": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SqErrNetworkModule(Xmean, Xstd, ymean, ystd) if init_model is None else init_model",
                            "IfExp"
                        ],
                        [
                            "torch.load(tmp_file)",
                            "Call"
                        ],
                        [
                            "pickle.loads(model_str)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/tmp_file_' + str(uuid.uuid4())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_29": {
                "num_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_33": {
                "num_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_out if len(self.y_mean.shape) == 1 else self.n_out * self.y_mean.shape[1]",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SqErrNetworkModule(Xmean, Xstd, ymean, ystd) if init_model is None else init_model",
                            "IfExp"
                        ],
                        [
                            "torch.load(tmp_file)",
                            "Call"
                        ],
                        [
                            "pickle.loads(model_str)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "tmp_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'/tmp/tmp_file_' + str(uuid.uuid4())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "python/torch_utils.py": {
        "torch": {
            "max_30": {
                "variable": {
                    "value": "(s, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}