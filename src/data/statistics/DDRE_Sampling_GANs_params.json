{
    "CIFAR10/main.py": {
        "sklearn": {
            "LogisticRegression_663": {
                "variable": {
                    "value": "cal_logReg",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_120": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_121": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_195": {
                "variable": {
                    "value": "trainloader_GAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_196": {
                "variable": {
                    "value": "trainloader_DRE",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_818": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_935": {
                "variable": {
                    "value": "checkpoint_PreNet",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForEvalGANs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_PreCNNForEvalGANs_InceptionV3_epoch_200_SEED_2019_Transformation_True'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_936": {
                "variable": {
                    "value": "PreNetFIDIS",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PreNetFIDIS",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Inception3(num_classes=10, aux_logits=True, transform_input=False)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(PreNetFIDIS).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_161": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_217": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_218": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_219": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_285": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_345": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_411": {
                "variable": {
                    "value": "checkpoint_netDR",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_239": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_368": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_370": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_408": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epoch_pretrainCNN) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform_PreCNN_DR)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_426": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(np.concatenate((Bayes_imgs_fake, Bayes_imgs_real), axis=0), Bayes_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_468": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_883": {
                "variable": {
                    "value": "trainloader_MH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "samp_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.samp_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_244": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_275": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_276": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_381": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epoch_pretrainCNN) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform_PreCNN_DR)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_392": {
                "obj": {
                    "value": "{'net_state_dict': netDR.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_619": {
                "variable": {
                    "value": "dataloader_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_fake)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_621": {
                "variable": {
                    "value": "dataloader_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_real)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_691": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_845": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_1031": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_1038": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_281": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_434": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_494": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(np.concatenate((Bayes_imgs_fake, Bayes_imgs_real), axis=0), Bayes_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_539": {
                "variable": {
                    "value": "cal_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cal_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_KeepTrain",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_541": {
                "variable": {
                    "value": "criterion_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_543": {
                "variable": {
                    "value": "optimizerD_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_577": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_587": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(np.concatenate((Bayes_imgs_fake, Bayes_imgs_real), axis=0), Bayes_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_670": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(np.concatenate((Bayes_imgs_fake, Bayes_imgs_real), axis=0), Bayes_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_725": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(np.concatenate((Bayes_imgs_fake, Bayes_imgs_real), axis=0), Bayes_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_731": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_732": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "BayesClass_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_763": {
                "variable": {
                    "value": "checkpoint_BayesClass",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_BayesClass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_BayesClass_SEED_' + str(args.seed) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_774": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(np.concatenate((Bayes_imgs_fake, Bayes_imgs_real), axis=0), Bayes_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_877": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_567": {
                "obj": {
                    "value": "{'net_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_574": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_759": {
                "obj": {
                    "value": "{'net_state_dict': BayesClass_net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_BayesClass",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_BayesClass_SEED_' + str(args.seed) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_910": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_593": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_633": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_650": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_757": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_780": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/main.py": {
        "sklearn": {
            "LogisticRegression_610": {
                "variable": {
                    "value": "cal_logReg",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_113": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_114": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "trainloader_GAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_train, labels_train, normalize_img=True, random_transform=False, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "trainloader_DRE",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_train, labels_train, normalize_img=True, random_transform=False, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "testloader_shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_valid, labels_valid, normalize_img=True, random_transform=False, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_193": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_valid, labels_valid, normalize_img=True, random_transform=False, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "SummaryWriter_227": {
                "variable": {
                    "value": "tfboard_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "wd + '/Output/saved_logs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_716": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_143": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_241": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_242": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_243": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_331": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_352": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_383": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epoch_pretrainCNN) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform_PreCNN_DR)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_386": {
                "variable": {
                    "value": "checkpoint_netDR",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_249": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_261": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_262": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_360": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epoch_pretrainCNN) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform_PreCNN_DR)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_378": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_401": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_426": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_774": {
                "variable": {
                    "value": "trainloader_MH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_train, labels_train, normalize_img=True, random_transform=False, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "samp_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.samp_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_267": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_278": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BCELoss_279": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_370": {
                "obj": {
                    "value": "{'net_state_dict': netDR.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_561": {
                "variable": {
                    "value": "dataloader_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_fake)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_563": {
                "variable": {
                    "value": "dataloader_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_real)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_742": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_891": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_285": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_408": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_470": {
                "variable": {
                    "value": "cal_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cal_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_aux",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_472": {
                "variable": {
                    "value": "criterion_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_473": {
                "variable": {
                    "value": "optimizerD_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netAux.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_506": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_Aux_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_aux_epoch_' + str(epoch_aux) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_519": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_617": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_642": {
                "variable": {
                    "value": "cal_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cal_dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_KeepTrain",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_644": {
                "variable": {
                    "value": "criterion_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_646": {
                "variable": {
                    "value": "optimizerD_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_680": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_690": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_768": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_499": {
                "obj": {
                    "value": "{'net_state_dict': netAux.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_Aux_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_aux_epoch_' + str(epoch_aux) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_670": {
                "obj": {
                    "value": "{'net_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_677": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_575": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/main_unsupervised.py": {
        "sklearn": {
            "LogisticRegression_664": {
                "variable": {
                    "value": "cal_logReg",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_125": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_126": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if args.cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_206": {
                "variable": {
                    "value": "trainloader_GAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=True, degrees=15, crop=True, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=False, degrees=15, crop=False, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_207": {
                "variable": {
                    "value": "trainloader_DRE",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=True, degrees=15, crop=True, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=False, degrees=15, crop=False, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_791": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_907": {
                "variable": {
                    "value": "checkpoint_PreNet",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForEvalGANs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_PreCNNForEvalGANs_InceptionV3_epoch_200_SEED_2019_Transformation_True'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_908": {
                "variable": {
                    "value": "PreNetFIDIS",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PreNetFIDIS",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Inception3(num_classes=10, aux_logits=True, transform_input=False)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(PreNetFIDIS).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_157": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BCELoss_234": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_235": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_236": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_cache_303": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_363": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_425": {
                "variable": {
                    "value": "checkpoint_netDR",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_242": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_255": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_256": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "RMSprop_382": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_384": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_414": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_422": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epoch_pretrainCNN) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform_PreCNN_DR) + '_NTRAIN_' + str(args.N_TRAIN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_440": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_469": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_855": {
                "variable": {
                    "value": "trainloader_MH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=True, degrees=15, crop=True, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=False, degrees=15, crop=False, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "samp_batch_size",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "args.samp_batch_size",
                            "Attribute"
                        ],
                        [
                            "args.N_TRAIN",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_292": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_293": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_395": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreCNNForDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epoch_pretrainCNN) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform_PreCNN_DR) + '_NTRAIN_' + str(args.N_TRAIN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_406": {
                "obj": {
                    "value": "{'net_state_dict': netDR.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_620": {
                "variable": {
                    "value": "dataloader_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_fake)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_622": {
                "variable": {
                    "value": "dataloader_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_real)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_818": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_971": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_978": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_298": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_448": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_495": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_541": {
                "variable": {
                    "value": "cal_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cal_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_KeepTrain",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_543": {
                "variable": {
                    "value": "criterion_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_545": {
                "variable": {
                    "value": "optimizerD_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_579": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_589": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_671": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_849": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_569": {
                "obj": {
                    "value": "{'net_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_576": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_882": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_501": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_595": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_634": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_651": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/main.py": {
        "sklearn": {
            "LogisticRegression_581": {
                "variable": {
                    "value": "cal_logReg",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_118": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_119": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_187": {
                "variable": {
                    "value": "trainloader_GAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='unlabeled', transform=transform_data, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "trainloader_DRE",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='unlabeled', transform=transform_data, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_189": {
                "variable": {
                    "value": "trainloader_eval",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='unlabeled', transform=transform_data, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "200",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_190": {
                "variable": {
                    "value": "testloader1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='train', transform=transform_data, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_191": {
                "variable": {
                    "value": "testloader2",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='test', transform=transform_data, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_602": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_g_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_269": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_d_gan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SummaryWriter_271": {
                "variable": {
                    "value": "tfboard_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "wd + '/Output/saved_logs'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_306": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataParallel_366": {
                "variable": {
                    "value": "PreNetDRE_ResNet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PreNetDRE_ResNet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "resnet34(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(PreNetDRE_ResNet)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "resnet34(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(PreNetDRE_ResNet).to(device)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True, progress=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_371": {
                "variable": {
                    "value": "ckpt_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt_fc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.PreCNN_DR + '_keeptrain_fc_epoch_' + str(args.epoch_fc) + '_SEED_2019_Transformation_True'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.PreCNN_DR + '_keeptrain_fc_epoch_' + str(args.epoch_fc) + '_SEED_2019_Transformation_True'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_375": {
                "variable": {
                    "value": "checkpoint_netDR",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_276": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "RMSprop_322": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.99",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "centered": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_324": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_335": {
                "variable": {
                    "value": "PreNetDRE_ResNet",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "PreNetDRE_ResNet",
                    "type": "Call",
                    "possible_values": [
                        [
                            "resnet34(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(PreNetDRE_ResNet)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "resnet34(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(PreNetDRE_ResNet).to(device)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True, progress=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_340": {
                "variable": {
                    "value": "ckpt_fc",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt_fc",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.PreCNN_DR + '_keeptrain_fc_epoch_' + str(args.epoch_fc) + '_SEED_2019_Transformation_True'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.PreCNN_DR + '_keeptrain_fc_epoch_' + str(args.epoch_fc) + '_SEED_2019_Transformation_True'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_390": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_422": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_651": {
                "variable": {
                    "value": "trainloader_MH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='unlabeled', transform=transform_data, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "samp_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.samp_batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_350": {
                "obj": {
                    "value": "{'net_state_dict': netDR.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_' + args.DR_Net + '_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_SEED_' + str(args.seed) + '_Lambda_' + str(args.lambda_DRE) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_619": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_804": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_403": {
                "variable": {
                    "value": "batch_imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_imgs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "data_iter.next()",
                            "Call"
                        ],
                        [
                            "batch_imgs.type(torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "data_iter.next()",
                            "Call"
                        ],
                        [
                            "batch_imgs.type(torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "data_iter.next()",
                            "Call"
                        ],
                        [
                            "batch_imgs.type(torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(batch_imgs, size=(224, 224), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "fn_sampleGAN(batch_size, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_456": {
                "variable": {
                    "value": "cal_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cal_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_aux",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_458": {
                "variable": {
                    "value": "criterion_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_459": {
                "variable": {
                    "value": "optimizerD_aux",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netAux.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "betas": {
                    "value": "(ADAM_beta1, ADAM_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_492": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_Aux_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_aux_epoch_' + str(epoch_aux) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_505": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_546": {
                "variable": {
                    "value": "dataloader_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_fake)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_548": {
                "variable": {
                    "value": "dataloader_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "IMGs_dataset(cal_imgs_real)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_645": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_485": {
                "obj": {
                    "value": "{'net_state_dict': netAux.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_Aux_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_aux_epoch_' + str(epoch_aux) + '_' + args.GAN + '_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_490": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_588": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(imgs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "len(batch_imgs_tmp)",
                            "Call"
                        ],
                        [
                            "imgs_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ],
                        [
                            "DR_comp_batch_size",
                            "Name"
                        ],
                        [
                            "len(batch_imgs)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_678": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_511": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/main.py": {
        "sklearn": {
            "GaussianMixture_659": {
                "variable": {
                    "value": "p_g_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "gmm_ncomp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gmm_ncomp_grid[0]",
                            "Subscript"
                        ],
                        [
                            "gmm_ncomp_nsim[nSim]",
                            "Subscript"
                        ],
                        [
                            "n_components",
                            "Name"
                        ]
                    ]
                }
            },
            "GaussianMixture_649": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gmm_ncomp_grid",
                            "Name"
                        ]
                    ]
                }
            },
            "GaussianMixture_678": {
                "variable": {
                    "value": "p_g_gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "gmm_ncomp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gmm_ncomp_grid[0]",
                            "Subscript"
                        ],
                        [
                            "gmm_ncomp_nsim[nSim]",
                            "Subscript"
                        ],
                        [
                            "n_components",
                            "Name"
                        ]
                    ]
                }
            },
            "LogisticRegression_532": {
                "variable": {
                    "value": "cal_logReg",
                    "type": "Variable",
                    "possible_values": []
                },
                "solver": {
                    "value": "liblinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_count_159": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_160": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if NGPU > 0 else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_220": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_285": {
                "variable": {
                    "value": "train_dataloader_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_tar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "custom_dataset(train_samples_tar, train_labels_tar)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "test_dataloader_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset_tar",
                    "type": "Name",
                    "possible_values": [
                        [
                            "custom_dataset(test_samples_tar, test_labels_tar)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_305": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_306": {
                "variable": {
                    "value": "optimizerG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr_gan",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(gan_Adam_beta1, gan_Adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_307": {
                "variable": {
                    "value": "optimizerD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr_gan",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(gan_Adam_beta1, gan_Adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_321": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_GAN_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_343": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netDR.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr_DRE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(DRE_Adam_beta1, DRE_Adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weightdecay_DRE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_834": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "custom_dataset(fake_samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "{'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_GAN_epoch_' + str(args.epoch_gan) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_428": {
                "variable": {
                    "value": "checkpoint_netDR",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_LAMBDA_' + str(args.lambda_DRE) + '_FinalActFn_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_PreNetDRE_' + str(args.TrainPreNetDRE) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_437": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "custom_dataset(fake_samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_914": {
                "variable": {
                    "value": "trainloader_MH",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_samples_tar",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "samp_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_359": {
                "variable": {
                    "value": "criterion_PreNetDRE",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_360": {
                "variable": {
                    "value": "optimizer_PreNetDRE",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "PreNetDRE_MLP.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "base_lr_PreNetDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.1",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_368": {
                "variable": {
                    "value": "checkpoint_PreNetDRE_MLP",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreNetDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_PreNetDRE_epochPreNetDRE_' + str(epoch_PreNetDRE) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_377": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "custom_dataset(fake_samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_423": {
                "obj": {
                    "value": "{'net_state_dict': netDR.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_DRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + args.DRE + '_LAMBDA_' + str(args.lambda_DRE) + '_FinalActFn_' + args.DR_final_ActFn + '_epoch_' + str(args.epoch_DRE) + '_PreNetDRE_' + str(args.TrainPreNetDRE) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_840": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_877": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_363": {
                "obj": {
                    "value": "{'net_state_dict': PreNetDRE_MLP.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_PreNetDRE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_PreNetDRE_epochPreNetDRE_' + str(epoch_PreNetDRE) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_443": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_472": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "custom_dataset(fake_samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_499": {
                "variable": {
                    "value": "dataloader_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "custom_dataset(cal_samples_fake)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_501": {
                "variable": {
                    "value": "dataloader_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_real",
                    "type": "Name",
                    "possible_values": [
                        [
                            "custom_dataset(valid_samples_tar)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_906": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_382": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_539": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "custom_dataset(fake_samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_944": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_478": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_561": {
                "variable": {
                    "value": "cal_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "cal_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "custom_dataset(cal_imgs, cal_labels)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_KeepTrain",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BCELoss_563": {
                "variable": {
                    "value": "criterion_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_565": {
                "variable": {
                    "value": "optimizerD_KeepTrain",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_GAN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.lr_gan",
                            "Attribute"
                        ]
                    ]
                },
                "betas": {
                    "value": "(gan_Adam_beta1, gan_Adam_beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_603": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_612": {
                "variable": {
                    "value": "dataloader_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_tmp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "custom_dataset(fake_samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ],
                        [
                            "custom_dataset(samples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size_tmp",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "samples_dataloader.batch_size",
                            "Attribute"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ],
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_513": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_597": {
                "obj": {
                    "value": "{'net_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "Filename_KeepTrain_Disc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch_KeepTrain) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "empty_cache_601": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_591": {
                "obj": {
                    "value": "{'net_state_dict': netD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_KeepTrainDisc_epoch_' + str(epoch + 1) + '_SEED_' + str(args.seed) + '_nSim_' + str(nSim) + '_epochGAN_' + str(epoch_GAN)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CIFAR10/PreTrainCNN.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_62": {
                "variable": {
                    "value": "ngpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_212": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_220": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_221": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_dacay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_243": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_69": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ResNet18(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "ResNet34(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "ResNet50(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "ResNet101(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "Inception3(num_classes=num_classes, aux_logits=True, transform_input=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_234": {
                "obj": {
                    "value": "{'net_state_dict': net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_142": {
                "variable": {
                    "value": "batch_train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_train_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(batch_train_images, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "batch_train_images.type(torch.float).cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_174": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(images, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "images.type(torch.float).cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/Train_DCGAN.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/DCGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DCGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_44": {
                "variable": {
                    "value": "GAN_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "GAN_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_133": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_113": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/DCGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DCGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_94": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(0, 1, (n_row ** 2, GAN_Latent_Length, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/Train_DRE.py": {
        "torch": {
            "load_47": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_167": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Softplus_100": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_101": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_143": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Softplus_219": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_220": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_251": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_199": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_87": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_102": {
                "input": {
                    "value": "softplus_fn(DR_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_204": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_221": {
                "input": {
                    "value": "softplus_fn(DR_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_108": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_223": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_227": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_111": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_230": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_111": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_114": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_114": {
                "input": {
                    "value": "torch.mean(DR_fake) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_230": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_233": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_233": {
                "input": {
                    "value": "torch.mean(DR_fake) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_114": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_233": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/Train_MMDGAN.py": {
        "torch": {
            "mean_44": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(delta[:-1] * delta[1:]).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "K_XX_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "K_YY_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "K_XY_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XY.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "K_YX_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YX.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_72": {
                "variable": {
                    "value": "ZZT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((X, Y), 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_73": {
                "variable": {
                    "value": "diag_ZZT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ZZT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(Z, Z.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "diag_ZZT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_104": {
                "variable": {
                    "value": "diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_X[:-1] * f_of_X[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_105": {
                "variable": {
                    "value": "diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_Y[:-1] * f_of_Y[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_106": {
                "variable": {
                    "value": "sum_diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_107": {
                "variable": {
                    "value": "sum_diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_145": {
                "variable": {
                    "value": "diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_X[:-1] * f_of_X[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_146": {
                "variable": {
                    "value": "diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_Y[:-1] * f_of_Y[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_147": {
                "variable": {
                    "value": "sum_diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_148": {
                "variable": {
                    "value": "sum_diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_245": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/MMDGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'MMDGAN_checkpoint_epoch' + str(t + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_80": {
                "input": {
                    "value": "-gamma * exponent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "input": {
                    "value": "torch.clamp(var_est, min=min_var_est)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_404": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_131": {
                "input": {
                    "value": "var_est",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0 / (m ** 2 * (m - 1.0) ** 2) * (2 * Kt_XX_sums.dot(Kt_XX_sums) - Kt_XX_2_sum + 2 * Kt_YY_sums.dot(Kt_YY_sums) - Kt_YY_2_sum) - (4.0 * m - 6.0) / (m ** 3 * (m - 1.0) ** 3) * (Kt_XX_sum ** 2 + Kt_YY_sum ** 2) + 4.0 * (m - 2.0) / (m ** 3 * (m - 1.0) ** 2) * (K_XY_sums_1.dot(K_XY_sums_1) + K_XY_sums_0.dot(K_XY_sums_0)) - 4.0 * (m - 3.0) / (m ** 3 * (m - 1.0) ** 2) * K_XY_2_sum - (8 * m - 12) / (m ** 5 * (m - 1)) * K_XY_sum ** 2 + 8.0 / (m ** 3 * (m - 1.0)) * (1.0 / m * (Kt_XX_sum + Kt_YY_sum) * K_XY_sum - Kt_XX_sums.dot(K_XY_sums_1) - Kt_YY_sums.dot(K_XY_sums_0))",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "min_var_est",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_306": {
                "variable": {
                    "value": "mmd2_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mmd2_D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X_D, f_enc_Y_D, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_350": {
                "variable": {
                    "value": "mmd2_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mmd2_G",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X, f_enc_Y, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_385": {
                "obj": {
                    "value": "{'epoch': t, 'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/MMDGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'MMDGAN_checkpoint_epoch' + str(t + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_355": {
                "input": {
                    "value": "mmd2_G",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X, f_enc_Y, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_317": {
                "input": {
                    "value": "mmd2_D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X_D, f_enc_Y_D, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_D)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CIFAR10/Train_WGAN.py": {
        "torch": {
            "rand_27": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/WGANGP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'WGANGP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_40": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_112": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_157": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_136": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/WGANGP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'WGANGP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_41": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.normal(0, 1, (n_row ** 2, GAN_Latent_Length, 1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/eval_metrics.py": {
        "torch": {
            "from_numpy_88": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSr[0].reshape((1, 3, 32, 32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSg[0].reshape((1, 3, 32, 32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_90": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSr[0].reshape((1, 3, 32, 32))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[0].reshape((1, 3, 32, 32))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "imgr_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSr[tmp:tmp + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_116": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSg[tmp:tmp + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_158": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSr[0].reshape((1, 3, 32, 32))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[0].reshape((1, 3, 32, 32))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_174": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSg[tmp:tmp + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_105": {
                "variable": {
                    "value": "imgr_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgr_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSr[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgr_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_118": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_165": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/Binary_Classifier.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(outSize, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "p": {
                    "value": "keep_prob",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "outSize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "finalSize * finalSize * layer_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_72": {
                "*size": {
                    "value": "25",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "IMG_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "IMG_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "CIFAR10/models/DR_2layersCNN.py": {
        "torch": {
            "randn_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(NC, 6, kernel_size=9, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_21": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "12 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/DR_6layersCNN.py": {
        "torch": {
            "randn_56": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(NC, 60, kernel_size=3, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "60",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "40",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_23": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "40",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "19 * 19 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "250",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_36": {
                "p": {
                    "value": "0.25",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "250",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/DR_MLP.py": {
        "torch": {
            "randn_60": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 32 * 32 * 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "cfg[MLP_name][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_in_dim",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, 32 * 32 * 3)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "GroupNorm_43": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, 32 * 32 * 3)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/DR_ResNet.py": {
        "torch": {
            "randn_169": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_29": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4 * depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_32": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "4 * depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.linear, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_55": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_56": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.linear, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_39": {
                "num_groups": {
                    "value": "4 * depth",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_99": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_105": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_107": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_109": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_111": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/DR_VGG.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_79": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_39": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_44": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_49": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "p": {
                    "value": "p_dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.4",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_75": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_76": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/InceptionV3.py": {
        "torch": {
            "Linear_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool2d_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_166": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_190": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_228": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_256": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_296": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_315": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_322": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_335": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_336": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_ch0, x_ch1, x_ch2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_341": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat((x_ch0, x_ch1, x_ch2), 1)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_73": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_83": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_84": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/MMDGAN.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*main",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*main",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "cndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "in_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "in_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cndf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/ResNet.py": {
        "torch": {
            "randn_151": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier_2, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.classifier_2(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier_2, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.classifier_2(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 64, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_97": {
                "variable": {
                    "value": "self.classifier_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, 32 * 32 * 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.classifier_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 32 * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_88": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_94": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32 * 32 * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/models/cnn_generator_discriminator.py": {
        "torch": {
            "randn_110": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4 * 4 * ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(ngf * 8, ngf * 4, kernel_size=4, stride=2, padding=1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, kernel_size=3, stride=1, padding=1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_81": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_29": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_60": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_62": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_65": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_67": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_72": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_75": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "ndf * 8 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CIFAR10/utils.py": {
        "torch": {
            "no_grad_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGs[num_imgs:num_imgs + BATCH_SIZE]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_88": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_92": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_93": {
                "variable": {
                    "value": "gen_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, N_CLASS, BATCH_SIZE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_122": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGs[num_imgs:num_imgs + BATCH_SIZE]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(299",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_111": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/PreTrainCNN.py": {
        "torch": {
            "device_count_71": {
                "variable": {
                    "value": "ngpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_221": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_train, labels_train, normalize_img=True, random_transform=args.transform, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "celeba_dataset(images_valid, labels_valid, normalize_img=True, random_transform=args.transform, means_imgs=means, stds_imgs=stds)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "multiprocessing.cpu_count()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_231": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_232": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_dacay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_257": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform) + '_AttrIdx_' + str(args.attr_idx)",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_80": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "{'net_state_dict': net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform) + '_AttrIdx_' + str(args.attr_idx)",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_192": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_172": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/PreCNN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "CelebA/Train_DCGAN.py": {
        "torch": {
            "device_count_26": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_55": {
                "variable": {
                    "value": "z_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_row ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/DCGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DCGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_66": {
                "variable": {
                    "value": "GAN_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "GAN_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_76": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_171": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/DCGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DCGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_129": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE_FID_TRAIN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/Train_DRE.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Softplus_105": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_106": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_87": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_90": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_107": {
                "input": {
                    "value": "softplus_fn(DR_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_109": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_113": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_116": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_116": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_119": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_119": {
                "input": {
                    "value": "torch.mean(DR_fake) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_119": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/Train_SNGAN.py": {
        "torch": {
            "device_count_27": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "z_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_row ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain/SNGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'SNGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_82": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_84": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_100": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_171": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_151": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain/SNGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'SNGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_131": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE_FID_TRAIN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/Train_WGAN.py": {
        "torch": {
            "device_count_25": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "z_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_row ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_69": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/WGANGP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'WGANGP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_52": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_130": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_201": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_109": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_180": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/WGANGP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'WGANGP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_53": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_159": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE_FID_TRAIN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/metrics/Inception_Score.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "inception_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inception_v3(pretrained=True, transform_input=False).type(dtype)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/metrics/fid_score.py": {
        "torch": {
            "device_count_36": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_237": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_265": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_298": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_333": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_389": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "numpy_imgs[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_508": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "InceptionV3([block_idx])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_303": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_398": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_120": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_507": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/DR_CNN.py": {
        "torch": {
            "randn_82": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(55, init_in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.init_in_dim, 4096)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.fc2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2, 4, kernel_size=4, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "self.init_in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_30": {
                "num_groups": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_39": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_43": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_47": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_51": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/DR_MLP.py": {
        "torch": {
            "randn_61": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, IMG_SIZE * IMG_SIZE * NC)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "cfg[MLP_name][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_in_dim",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, IMG_SIZE * IMG_SIZE * NC)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "GroupNorm_47": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, IMG_SIZE * IMG_SIZE * NC)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/DR_ResNet.py": {
        "torch": {
            "randn_160": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.linear, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.linear, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.linear(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_120": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_88": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_94": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_96": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_98": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_99": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_101": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_104": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_106": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_108": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/MMDGAN.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*main",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*main",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_144": {
                "variable": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "cndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_69": {
                "in_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "in_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cndf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LeakyReLU_39": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_76": {
                "num_features": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/ResNet.py": {
        "torch": {
            "randn_157": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "IMG_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "IMG_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier_2, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.classifier_2(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_59": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_77": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier_2, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.classifier_2(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 64, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.classifier_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, IMG_SIZE * IMG_SIZE * NC)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.classifier_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(IMG_SIZE * IMG_SIZE * NC, num_classes)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_40": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_67": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "NC",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_98": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "IMG_SIZE * IMG_SIZE * NC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "in_features": {
                    "value": "IMG_SIZE * IMG_SIZE * NC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ],
                        [
                            "N_CLASS",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_42": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/SNGAN.py": {
        "torch": {
            "randn_219": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(self.conv1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * (GEN_SIZE * 16)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "GEN_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlockGenerator(GEN_SIZE * 16, GEN_SIZE * 8)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "FirstResBlockDiscriminator(channels, DISC_SIZE, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "DISC_SIZE * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_173": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_174": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_192": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(self.bypass_conv)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(self.bypass_conv)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.parallel.data_parallel(self.model, x, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_183": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.parallel.data_parallel(self.model, x, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_33": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_43": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_107": {
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_109": {
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_110": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_113": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_114": {
                "module": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "GEN_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_197": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_198": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_64": {
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_66": {
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_71": {
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_73": {
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_74": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "module": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_82": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_86": {
                "module": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/models/cnn_generator_discriminator.py": {
        "torch": {
            "randn_102": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(nz, ngf * 8, 4, 1, 0, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.main",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_23": {
                "in_channels": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "ngf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_31": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_35": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_39": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_65": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "num_features": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_69": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_72": {
                "num_features": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LeakyReLU_73": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CelebA/utils.py": {
        "torch": {
            "no_grad_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_183": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_187": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_188": {
                "variable": {
                    "value": "gen_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, N_CLASS, BATCH_SIZE)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/PreTrainCNN.py": {
        "torch": {
            "device_65": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_66": {
                "variable": {
                    "value": "ngpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_223": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_227": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_228": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_dacay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_250": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform) + '_NTRAIN_' + str(args.N_TRAIN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=True, degrees=15, crop=True, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=False, degrees=15, crop=False, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_215": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=True, degrees=15, crop=True, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "IMGs_dataset(images_train, labels_train, normalize=True, rotate=False, degrees=15, crop=False, crop_size=28, crop_pad=4)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_247": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_110": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "ResNet18(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "ResNet34(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "ResNet50(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "ResNet101(isometric_map=isometric_map, num_classes=num_classes, ngpu=ngpu)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "net.to(device)",
                            "Call"
                        ],
                        [
                            "Inception3(num_classes=num_classes, aux_logits=True, transform_input=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_241": {
                "obj": {
                    "value": "{'net_state_dict': net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_' + net_name + '_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform) + '_NTRAIN_' + str(args.N_TRAIN)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_142": {
                "variable": {
                    "value": "batch_train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_train_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(batch_train_images, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "batch_train_images.type(torch.float).cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_174": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(images, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "images.type(torch.float).cuda()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/Train_DCGAN.py": {
        "torch": {
            "randn_37": {
                "variable": {
                    "value": "z_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_row ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/DCGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DCGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_47": {
                "variable": {
                    "value": "GAN_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_48": {
                "variable": {
                    "value": "GAN_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_57": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_125": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/DCGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DCGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DCGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/Train_DRE.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/cDRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'cDREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_147": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/cDRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'cDREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_79": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softplus_91": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_92": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_123": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/cDRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'cDREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_182": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softplus_199": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_200": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_256": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/cDRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'cDREP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_231": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ],
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_93": {
                "input": {
                    "value": "softplus_fn(DR_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_201": {
                "input": {
                    "value": "softplus_fn(DR_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_95": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_99": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_203": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_207": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_101": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_210": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_101": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_103": {
                "input": {
                    "value": "torch.mean(DR_fake) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_210": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_213": {
                "input": {
                    "value": "DR_fake",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_fake_images, batch_real_labels)",
                            "Call"
                        ],
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_213": {
                "input": {
                    "value": "torch.mean(DR_fake) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_213": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/Train_MMDGAN.py": {
        "torch": {
            "mean_36": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(delta[:-1] * delta[1:]).sum(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_45": {
                "variable": {
                    "value": "K_XX_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_48": {
                "variable": {
                    "value": "K_YY_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "K_XY_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XY.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "K_YX_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YX.pow(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "Z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, Y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_64": {
                "variable": {
                    "value": "ZZT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((X, Y), 0)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Z.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_65": {
                "variable": {
                    "value": "diag_ZZT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ZZT",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mm(Z, Z.t())",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "diag_ZZT",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_96": {
                "variable": {
                    "value": "diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_X[:-1] * f_of_X[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_97": {
                "variable": {
                    "value": "diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_Y[:-1] * f_of_Y[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_98": {
                "variable": {
                    "value": "sum_diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_99": {
                "variable": {
                    "value": "sum_diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_137": {
                "variable": {
                    "value": "diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_XX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_X[:-1] * f_of_X[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_138": {
                "variable": {
                    "value": "diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K_YY",
                    "type": "Name",
                    "possible_values": [
                        [
                            "alpha * (f_of_Y[:-1] * f_of_Y[1:]).sum(1) + c",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_139": {
                "variable": {
                    "value": "sum_diag_X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_XX)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_140": {
                "variable": {
                    "value": "sum_diag_Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diag_Y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ],
                        [
                            "torch.diag(K_YY)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_237": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/MMDGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'MMDGAN_checkpoint_epoch' + str(t + 1 + ResumeEpoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_72": {
                "input": {
                    "value": "-gamma * exponent",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_123": {
                "input": {
                    "value": "torch.clamp(var_est, min=min_var_est)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_396": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "x.size(0)",
                            "Call"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_123": {
                "input": {
                    "value": "var_est",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.0 / (m ** 2 * (m - 1.0) ** 2) * (2 * Kt_XX_sums.dot(Kt_XX_sums) - Kt_XX_2_sum + 2 * Kt_YY_sums.dot(Kt_YY_sums) - Kt_YY_2_sum) - (4.0 * m - 6.0) / (m ** 3 * (m - 1.0) ** 3) * (Kt_XX_sum ** 2 + Kt_YY_sum ** 2) + 4.0 * (m - 2.0) / (m ** 3 * (m - 1.0) ** 2) * (K_XY_sums_1.dot(K_XY_sums_1) + K_XY_sums_0.dot(K_XY_sums_0)) - 4.0 * (m - 3.0) / (m ** 3 * (m - 1.0) ** 2) * K_XY_2_sum - (8 * m - 12) / (m ** 5 * (m - 1)) * K_XY_sum ** 2 + 8.0 / (m ** 3 * (m - 1.0)) * (1.0 / m * (Kt_XX_sum + Kt_YY_sum) * K_XY_sum - Kt_XX_sums.dot(K_XY_sums_1) - Kt_YY_sums.dot(K_XY_sums_0))",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "min_var_est",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1e-08",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_298": {
                "variable": {
                    "value": "mmd2_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mmd2_D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X_D, f_enc_Y_D, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_D)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_342": {
                "variable": {
                    "value": "mmd2_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mmd2_G",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X, f_enc_Y, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_377": {
                "obj": {
                    "value": "{'epoch': t, 'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/MMDGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/MMDGAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'MMDGAN_checkpoint_epoch' + str(t + 1 + ResumeEpoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_347": {
                "input": {
                    "value": "mmd2_G",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X, f_enc_Y, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_G)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_309": {
                "input": {
                    "value": "mmd2_D",
                    "type": "Call",
                    "possible_values": [
                        [
                            "mix_rbf_mmd2(f_enc_X_D, f_enc_Y_D, sigma_list)",
                            "Call"
                        ],
                        [
                            "F.relu(mmd2_D)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST/Train_WGAN.py": {
        "torch": {
            "rand_27": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "real_data.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_67": {
                "variable": {
                    "value": "z_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_row ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/WGANGP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'WGANGP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_40": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "Call",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(device)",
                            "Call"
                        ],
                        [
                            "autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_116": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_159": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_95": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_138": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/WGANGP_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/WGANGP_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'WGANGP_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_41": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/data_processing.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "SEED",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2019",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "MNIST/eval_metrics.py": {
        "torch": {
            "from_numpy_89": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSr[0].reshape((1, NC, IMG_SIZE, IMG_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSg[0].reshape((1, NC, IMG_SIZE, IMG_SIZE))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_91": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSr[0].reshape((1, NC, IMG_SIZE, IMG_SIZE))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[0].reshape((1, NC, IMG_SIZE, IMG_SIZE))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "imgr_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSr[tmp:tmp + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSg[tmp:tmp + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_cache_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_154": {
                "variable": {
                    "value": "test_img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "test_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSr[0].reshape((1, NC, IMG_SIZE, IMG_SIZE))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[0].reshape((1, NC, IMG_SIZE, IMG_SIZE))).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(test_img, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_170": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGSg[tmp:tmp + batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "interpolate_106": {
                "variable": {
                    "value": "imgr_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgr_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSr[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgr_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_119": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_172": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(IMGSg[tmp:tmp + batch_size]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/models/DR_MLP.py": {
        "torch": {
            "randn_64": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, IMG_SIZE ** 2 * NC)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "cfg[MLP_name][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_in_dim",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, IMG_SIZE ** 2 * NC)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "GroupNorm_47": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, IMG_SIZE ** 2 * NC)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_48": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_49": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/models/InceptionV3.py": {
        "torch": {
            "randn_346": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_347": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "max_pool2d_93": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_99": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_127": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "dropout_130": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_166": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_190": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_228": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_256": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_2(branch3x3)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_296": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_310": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_315": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_322": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_335": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_336": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_170": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_232": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_258": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch3x3, branch7x7x3, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_341": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(16, 1, 28, 28).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, training=self.training)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=5, stride=3)",
                            "Call"
                        ],
                        [
                            "self.conv0(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, (1, 1))",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tensor_73": {
                "variable": {
                    "value": "values",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/models/MMDGAN.py": {
        "torch": {
            "randn_184": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "100",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*main",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(input, size=(self.isize, self.isize), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.k, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.isize, self.isize)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*main",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_101": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.parallel.data_parallel(self.main, input, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.main(input)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.main, input, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.main(input)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(output, size=(28, 28), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "self.decoder(input)",
                            "Call"
                        ],
                        [
                            "self.main(-input)",
                            "Call"
                        ],
                        [
                            "-output.mean()",
                            "UnaryOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(28, 28)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_155": {
                "variable": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "cndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_77": {
                "in_channels": {
                    "value": "k",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_79": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "in_feat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cndf",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "out_feat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "cndf * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "LeakyReLU_41": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_83": {
                "in_channels": {
                    "value": "cngf",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cngf * 2",
                            "BinOp"
                        ],
                        [
                            "cngf // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "cngf // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/models/ResNet.py": {
        "torch": {
            "randn_156": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier_2, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.classifier_2(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_74": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier_2, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "nn.parallel.data_parallel(self.classifier, features, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "self.classifier_2(features)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_89": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, 64, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_100": {
                "variable": {
                    "value": "self.classifier_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * block.expansion, IMG_SIZE ** 2 * NC)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.classifier_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm1d(IMG_SIZE ** 2 * NC)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_115": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "in_channels": {
                    "value": "nc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_97": {
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "IMG_SIZE ** 2 * NC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_104": {
                "num_features": {
                    "value": "IMG_SIZE ** 2 * NC",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "IMG_SIZE ** 2 * NC",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/models/cnn_generator_discriminator.py": {
        "torch": {
            "randn_101": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "7 * 7 * ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(ngf * 4, ngf * 2, kernel_size=4, stride=2, padding=1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nc, ndf, kernel_size=3, stride=1, padding=1, bias=bias)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*linear",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_21": {
                "in_channels": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_25": {
                "in_channels": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "ngf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "nc",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_61": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_63": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "default_bias",
                            "MethodArgument"
                        ],
                        [
                            "default_bias",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_66": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "in_features": {
                    "value": "ndf * 4 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "MNIST/utils.py": {
        "torch": {
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGs[num_imgs:num_imgs + BATCH_SIZE]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_113": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "gen_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, N_CLASS, BATCH_SIZE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGs[num_imgs:num_imgs + BATCH_SIZE]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(299",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_136": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/PreTrainFC.py": {
        "torch": {
            "device_73": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_74": {
                "variable": {
                    "value": "ngpu",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_213": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='test', folds=None, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_214": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.STL10(root='./data_STL10', split='train', folds=None, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size_test",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "NCPU",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataParallel_222": {
                "variable": {
                    "value": "ResNet_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ResNet_net",
                    "type": "Call",
                    "possible_values": [
                        [
                            "resnet34(pretrained=True, progress=True)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(ResNet_net).to(device)",
                            "Call"
                        ],
                        [
                            "resnet50(pretrained=True, progress=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_229": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_230": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "fc_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "Constant",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_dacay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_252": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.resume_epoch) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(epoch + 1) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_83": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_119": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.resume_epoch) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(epoch + 1) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_243": {
                "obj": {
                    "value": "{'net_state_dict': fc_net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.resume_epoch) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(epoch + 1) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_131": {
                "variable": {
                    "value": "batch_train_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_train_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(batch_train_images, size=(224, 224), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "batch_train_images.type(torch.float).to(device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_177": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(images, size=(224, 224), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "images.type(torch.float).to(device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_182": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'net_state_dict': fc_net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "filename_ckpt",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.epochs) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(args.resume_epoch) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ],
                        [
                            "save_models_duringTrain_folder + '/ckpt_pretrained_' + args.CNN + '_keeptrain_fc_epoch_' + str(epoch + 1) + '_SEED_' + str(args.seed) + '_Transformation_' + str(args.transform)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "STL10_64/Train_DRE.py": {
        "torch": {
            "load_59": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/DREF_checkpoint_epoch' + str(ResumeEpoch) + '_LAMBDA_' + str(LAMBDA) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_checkpoint_epoch/'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "interpolate_85": {
                "variable": {
                    "value": "batch_real_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_real_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch_real_images.type(torch.float).to(device)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(batch_real_images, size=resize_size, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(224, 224)",
                            "Tuple"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_real_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_94": {
                "variable": {
                    "value": "batch_fake_images",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_fake_images",
                    "type": "Call",
                    "possible_values": [
                        [
                            "netG(z)",
                            "Call"
                        ],
                        [
                            "batch_fake_images.detach()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(batch_fake_images, size=resize_size, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(224, 224)",
                            "Tuple"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softplus_109": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_110": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "save_file + 'DREF_checkpoint_epoch' + str(epoch + 1) + '_LAMBDA_' + str(LAMBDA) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_111": {
                "input": {
                    "value": "softplus_fn(DR_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_113": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_117": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_119": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_119": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_121": {
                "input": {
                    "value": "DR_fake",
                    "type": "Name",
                    "possible_values": [
                        [
                            "net(batch_features_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_121": {
                "input": {
                    "value": "torch.mean(DR_fake) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_121": {
                "input": {
                    "value": "DR_real + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/Train_SNGAN.py": {
        "torch": {
            "device_count_22": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_61": {
                "variable": {
                    "value": "z_fixed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_row ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_50": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain/SNGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain'",
                            "BinOp"
                        ],
                        [
                            "save_file + '/SNGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_78": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_80": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_images.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_165": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_145": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain/SNGAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/SNGAN_checkpoint_intrain'",
                            "BinOp"
                        ],
                        [
                            "save_file + '/SNGAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_128": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE_IS_TRAIN",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/metrics/Inception_Score.py": {
        "torch": {
            "DataLoader_41": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataParallel_46": {
                "variable": {
                    "value": "inception_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception_model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inception_v3(pretrained=True, transform_input=False).type(dtype)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(x, size=(299, 299), scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/metrics/fid_score.py": {
        "torch": {
            "device_count_36": {
                "variable": {
                    "value": "NGPU",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_108": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_237": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_265": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_298": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_319": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_327": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_333": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_389": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "images",
                    "type": "Name",
                    "possible_values": [
                        [
                            "numpy_imgs[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_506": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "InceptionV3([block_idx])",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_176": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_270": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_303": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_398": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(batch)[0]",
                            "Subscript"
                        ],
                        [
                            "adaptive_avg_pool2d(pred, output_size=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPool2d_120": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_505": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_129": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_131": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_145": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_153": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/models/DR_MLP.py": {
        "torch": {
            "randn_63": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, IMG_SIZE * IMG_SIZE * NC)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "cfg[MLP_name][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_in_dim",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, IMG_SIZE * IMG_SIZE * NC)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "GroupNorm_46": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((5, IMG_SIZE * IMG_SIZE * NC)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_47": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/models/ResNet.py": {
        "torch": {
            "randn_345": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "NC",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "IMG_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "224",
                            "Constant"
                        ]
                    ]
                },
                "layout": {
                    "value": "IMG_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "224",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_147": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_155": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_211": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(10, NC, IMG_SIZE, IMG_SIZE).cuda()",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "self.fc(features)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_183": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_197": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/models/ResNet_keeptrain_fc.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers_1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc_layers_2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_dim_dict[ResNet_name]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "NC * IMG_SIZE * IMG_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "NC * IMG_SIZE * IMG_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "STL10_64/models/SNGAN.py": {
        "torch": {
            "randn_216": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_100": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(self.conv1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * (GEN_SIZE * 16)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "GEN_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlockGenerator(GEN_SIZE * 16, GEN_SIZE * 8)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_161": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "FirstResBlockDiscriminator(channels, DISC_SIZE, stride=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "DISC_SIZE * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_172": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sigmoid_173": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_191": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(self.bypass_conv)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "spectral_norm(self.bypass_conv)",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.parallel.data_parallel(self.model, x, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_182": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.parallel.data_parallel(self.model, x, range(self.ngpu))",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "torch.sum(features, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_33": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_43": {
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_107": {
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_109": {
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_110": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_113": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_114": {
                "module": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_139": {
                "num_features": {
                    "value": "GEN_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_192": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_64": {
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_66": {
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_71": {
                "module": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "spectral_norm_73": {
                "module": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_74": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_81": {
                "module": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AvgPool2d_82": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "spectral_norm_86": {
                "module": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "STL10_64/utils.py": {
        "torch": {
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "IMGs[num_imgs:num_imgs + BATCH_SIZE]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_95": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ],
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "gen_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.random.randint(0, N_CLASS, BATCH_SIZE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "imgg_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgg_tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(IMGs[num_imgs:num_imgs + BATCH_SIZE]).type(torch.float).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(imgg_tensor, size=resize, scale_factor=None, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(224",
                            "MethodArgument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_115": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/Train_DRE.py": {
        "torch": {
            "load_54": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_GAN_checkpoint/ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_GAN_checkpoint/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_FinalActFn_ReLU_epoch_' + str(epoch + 1) + '_PreNetDRE_False_SEED_2019_nSim_' + str(current_nsim) + '_epochGAN_50'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Softplus_115": {
                "variable": {
                    "value": "softplus_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "beta": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "threshold": {
                    "value": "20",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_116": {
                "variable": {
                    "value": "sigmoid_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict(), 'optimizer_state_dict': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_GAN_checkpoint/ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_GAN_checkpoint/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_FinalActFn_ReLU_epoch_' + str(epoch + 1) + '_PreNetDRE_False_SEED_2019_nSim_' + str(current_nsim) + '_epochGAN_50'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_174": {
                "obj": {
                    "value": "{'epoch': epoch, 'net_state_dict': net.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/DRE_GAN_checkpoint/ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/DRE_GAN_checkpoint/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/ckpt_DRE_' + loss_type + '_LAMBDA_' + str(LAMBDA) + '_FinalActFn_ReLU_epoch_' + str(epoch + 1) + '_PreNetDRE_False_SEED_2019_nSim_' + str(current_nsim) + '_epochGAN_50'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_89": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_tar_samples.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "dim_gan",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_101": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_tar_samples.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "dim_gan",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_117": {
                "input": {
                    "value": "softplus_fn(DR_prop)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_120": {
                "input": {
                    "value": "DR_prop",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_prop_samples)",
                            "Call"
                        ],
                        [
                            "net(batch_prop_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_124": {
                "input": {
                    "value": "DR_prop",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_prop_samples)",
                            "Call"
                        ],
                        [
                            "net(batch_prop_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_126": {
                "input": {
                    "value": "torch.log(DR_tar + 1e-14)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_126": {
                "input": {
                    "value": "DR_tar + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_128": {
                "input": {
                    "value": "DR_prop",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net(batch_prop_samples)",
                            "Call"
                        ],
                        [
                            "net(batch_prop_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_128": {
                "input": {
                    "value": "torch.mean(DR_prop) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "DR_tar + 1e-14",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/Train_GAN.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/GAN_checkpoint_intrain/GAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/GAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'GAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_43": {
                "variable": {
                    "value": "GAN_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_samples.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "GAN_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_samples.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_train_samples.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_93": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "samples_tar.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_125": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "GAN_Latent_Length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "{'gen_iterations': gen_iterations, 'netG_state_dict': netG.state_dict(), 'netD_state_dict': netD.state_dict(), 'optimizerG_state_dict': optimizerG.state_dict(), 'optimizerD_state_dict': optimizerD.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "save_models_folder + '/GAN_checkpoint_intrain/GAN_checkpoint_epoch' + str(ResumeEpoch) + '.pth'",
                            "BinOp"
                        ],
                        [
                            "save_models_folder + '/GAN_checkpoint_intrain/'",
                            "BinOp"
                        ],
                        [
                            "save_file + 'GAN_checkpoint_epoch' + str(epoch + 1) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Simulation/models/DR_CNN.py": {
        "torch": {
            "randn_78": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(55, init_in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.init_in_dim, 2048)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2, 4, kernel_size=4, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.fc2",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "self.init_in_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_28": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_36": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_40": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_44": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GroupNorm_48": {
                "num_groups": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/models/DR_MLP.py": {
        "torch": {
            "randn_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(128, init_in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "cfg[MLP_name][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_in_dim",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((128, init_in_dim)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "GroupNorm_40": {
                "num_groups": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((128, init_in_dim)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_42": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softplus_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/models/GAN.py": {
        "torch": {
            "randn_90": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, inner_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nz, 128)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(nz, inner_dim)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_64": {
                "in_features": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "in_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_16": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_19": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_22": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_28": {
                "num_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "nz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "inner_dim",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/models/PreNetDRE_MLP.py": {
        "torch": {
            "randn_51": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(128, init_in_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(init_in_dim, n_class)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_16": {
                "in_features": {
                    "value": "cfg[MLP_name][-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "init_in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_17": {
                "num_features": {
                    "value": "init_in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "init_in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "Name",
                    "possible_values": [
                        [
                            "25",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "in_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.init_in_dim",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((128, init_in_dim)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm1d_30": {
                "num_features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn((128, init_in_dim)).cuda()",
                            "Call"
                        ],
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_32": {
                "p": {
                    "value": "self.p_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Simulation/utils.py": {
        "torch": {
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_230": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}