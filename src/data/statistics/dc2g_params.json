{
    "dc2g/image_similarity.py": {
        "sklearn": {
            "KMeans_36": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/scripts/tf_record_writer.py": {
        "tensorflow": {
            "Feature_18": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_22": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TFRecordWriter_50": {
                "path": {
                    "value": "tf_record_filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{dir_path}/training_data/{dataset}/tf_records/{mode}.tfrecords'.format(dir_path=dir_path, mode=mode, dataset=dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_18": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_22": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Example_71": {
                "variable": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature={'goal_class': _bytes_feature(goal_name_bytes), 'semantic_map': _bytes_feature(semantic_map), 'c2g_map': _bytes_feature(c2g_map), 'world_id': _bytes_feature(world_id_bytes), 'mask_id': _bytes_feature(mask_id_bytes)})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Features_72": {
                "feature": {
                    "value": "{'goal_class': _bytes_feature(goal_name_bytes), 'semantic_map': _bytes_feature(semantic_map), 'c2g_map': _bytes_feature(c2g_map), 'world_id': _bytes_feature(world_id_bytes), 'mask_id': _bytes_feature(mask_id_bytes)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "dc2g/dc2g_old.py": {
        "tensorflow": {
            "Session_209": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_211": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model_dir + '/export.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_215": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_216": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_213": {
                "key": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_214": {
                "key": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dc2g/make_image_panels.py": {
        "tensorflow": {
            "Session_25": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_27": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model_dir + '/export.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_31": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_32": {
                "variable": {
                    "value": "goal_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_33": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_29": {
                "key": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_30": {
                "key": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "dc2g/planners/DC2GPlanner.py": {
        "tensorflow": {
            "Session_21": {
                "variable": {
                    "value": "self.tf_sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_23": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "model_dir + '/export.meta'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_27": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_28": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_31": {
                "variable": {
                    "value": "goal_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_25": {
                "key": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_26": {
                "key": {
                    "value": "outputs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baseline/main.py": {
        "torch": {
            "manual_seed_25": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "rl_baseline/misc/utils.py": {
        "torch": {
            "device_7": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rl_baseline/policy/dqn.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, theta), 1)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc1')(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc2')(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc3')(x)",
                            "Call"
                        ],
                        [
                            "gridmap",
                            "variable"
                        ],
                        [
                            "getattr(self, self.name + '_conv' + str(i_conv + 1))(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_bn' + str(i_conv + 1))(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_63": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, theta), 1)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc1')(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc2')(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc3')(x)",
                            "Call"
                        ],
                        [
                            "gridmap",
                            "variable"
                        ],
                        [
                            "getattr(self, self.name + '_conv' + str(i_conv + 1))(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_bn' + str(i_conv + 1))(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.critic_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_155": {
                "variable": {
                    "value": "critic_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_critic.pth' % (directory, filename)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, theta), 1)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc1')(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc2')(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_fc3')(x)",
                            "Call"
                        ],
                        [
                            "gridmap",
                            "variable"
                        ],
                        [
                            "getattr(self, self.name + '_conv' + str(i_conv + 1))(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, self.name + '_bn' + str(i_conv + 1))(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state['theta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_96": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "gridmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state['theta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_99": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_133": {
                "variable": {
                    "value": "critic_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "state_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(state).gather(1, action)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward + (done * self.args.discount * next_state_Q).detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_150": {
                "obj": {
                    "value": "self.critic.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/%s_critic.pth' % (directory, filename)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim[2]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "linear_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "width * height * 32 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__138": {
                "parameters": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}