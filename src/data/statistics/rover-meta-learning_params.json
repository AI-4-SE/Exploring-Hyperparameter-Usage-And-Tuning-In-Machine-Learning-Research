{
    "src/models/alpaca_consistent.py": {
        "torch": {
            "Tanh_13": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.log(self.sigma_eps)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.config['learnable_noise']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.length_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.config['kernel_bandwidth'])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.config['learnable_bandwidth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "inverse_188": {
                "variable": {
                    "value": "Linv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(phi, -1, -2) @ invSigEps @ phi + L",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_195": {
                "variable": {
                    "value": "inv_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictive_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phi @ Linv @ torch.transpose(phi, -1, -2) + SigEps",
                            "BinOp"
                        ],
                        [
                            "phi @ Linv @ torch.transpose(phi, -1, -2) + SigEps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_213": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_221": {
                "variable": {
                    "value": "Linv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(phi, -1, -2) @ invSigEps @ phi + L",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_231": {
                "variable": {
                    "value": "phi_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phi, phi_nom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_265": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'./runs/' + path + datetime.datetime.now().strftime('y%y_m%m_d%d_s%s')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_268": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.model.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_269": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1 - self.model.config['lr_decay_rate']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_460": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xi, u_ext]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_467": {
                "variable": {
                    "value": "Sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.SigEps.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_487": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xp.unsqueeze(-3) - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_488": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x.unsqueeze(-3) - x.unsqueeze(-4)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x_dim * phi_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_73": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(Q_init, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.L_asym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(L_asym_init, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.phi_aug_dim, 1) * 4 / (np.sqrt(self.phi_aug_dim) + np.sqrt(self.y_dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.L_asym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.phi_aug_dim, L_asym_corr_rank) / self.phi_aug_dim ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.L_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.linspace(-5, 0, self.phi_aug_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_129": {
                "input": {
                    "value": "torch.exp(-self.logSigEps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_133": {
                "input": {
                    "value": "-self.logSigEps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_137": {
                "input": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_141": {
                "input": {
                    "value": "torch.exp(self.logSigEps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_419": {
                "variable": {
                    "value": "ortho_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_435": {
                "variable": {
                    "value": "bounds_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_445": {
                "variable": {
                    "value": "bounds_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_576": {
                "variable": {
                    "value": "xpred_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xpred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_585": {
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_585": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_94": {
                "ndarray": {
                    "value": "np.log(self.sigma_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "self.config['kernel_bandwidth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_embed_121": {
                "input": {
                    "value": "torch.exp(self.L_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_129": {
                "input": {
                    "value": "-self.logSigEps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_141": {
                "input": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logdet_197": {
                "input": {
                    "value": "inv_sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.inverse(predictive_cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_395": {
                "tensors": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_395": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_402": {
                "variable": {
                    "value": "ortho_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_479": {
                "input": {
                    "value": "-sq_dist / (2 * l)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_509": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((xp.unsqueeze(-3) - x) ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "dist / lenscale + torch.log(self.ob_dim * lenscale)",
                            "BinOp"
                        ],
                        [
                            "-torch.sum((xp.unsqueeze(-3) - x) ** 2, dim=-1) ** 2 / (2 * l)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "Q_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_103": {
                "data": {
                    "value": "L_asym_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.cholesky(Linv_init)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_109": {
                "start": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_121": {
                "input": {
                    "value": "self.L_base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_191": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_225": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_426": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(phi, -1, -2) @ invSigEps @ phi + L",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_472": {
                "input": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_472": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_493": {
                "input": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel(d1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_505": {
                "input": {
                    "value": "self.ob_dim * lenscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__649": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config['grad_clip_value']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "self.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "L_asym_corr_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi_aug_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_168": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_406": {
                "variable": {
                    "value": "outer",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(phi_aug_dim, phi_aug_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_502": {
                "input": {
                    "value": "(xp.unsqueeze(-3) - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_504": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.config['max_evaluation_length']",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "max_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.config['max_evaluation_length']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_504": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "*size": {
                    "value": "self.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_507": {
                "input": {
                    "value": "(xp.unsqueeze(-3) - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_641": {
                "variable": {
                    "value": "total_nll_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_641": {
                "variable": {
                    "value": "total_nll_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ger_408": {
                "input": {
                    "value": "phi[n, t, i, :].squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "phi[n, t, i, :].squeeze()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_410": {
                "n": {
                    "value": "phi_aug_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "norm_411": {
                "input": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(phi_aug_dim) - outer",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_196": {
                "input": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.unsqueeze(-1) - phi @ K",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/alpaca_multihead.py": {
        "torch": {
            "Tanh_13": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "encoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(inp_dim, hid_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_91": {
                "variable": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.log(self.sigma_eps)).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.config['learnable_noise']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "self.length_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(self.config['kernel_bandwidth'])",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.config['learnable_bandwidth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "phi_aug",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phi, phi_nom]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SummaryWriter_271": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "'./runs/' + path + datetime.datetime.now().strftime('y%y_m%m_d%d_s%s')",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_274": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.model.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "StepLR_275": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1 - self.model.config['lr_decay_rate']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_395": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_422": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_478": {
                "variable": {
                    "value": "Linv_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Linv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Linv - 1.0 / (1 + phi_Linv_phi) * (Lphi @ Lphi.transpose(-1, -2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_493": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xi, u_ext]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_500": {
                "variable": {
                    "value": "Sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.SigEps.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_520": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(xp.unsqueeze(-3) - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_521": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x.unsqueeze(-3) - x.unsqueeze(-4)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_557": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "inp_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "hid_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['hidden_dim']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "x_dim * phi_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_70": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(Q_init, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.L_asym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(L_asym_init, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_103": {
                "variable": {
                    "value": "self.Q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.y_dim, 1, self.phi_aug_dim) * 4 / (np.sqrt(self.phi_aug_dim) + np.sqrt(self.y_dim))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.L_asym",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(self.y_dim, self.phi_aug_dim, L_asym_corr_rank) / self.phi_aug_dim ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_106": {
                "variable": {
                    "value": "self.L_base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.linspace(-5, 0, self.phi_aug_dim).repeat(self.y_dim, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_122": {
                "input": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_126": {
                "input": {
                    "value": "torch.exp(-self.logSigEps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_130": {
                "input": {
                    "value": "-self.logSigEps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_134": {
                "input": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_138": {
                "input": {
                    "value": "torch.exp(self.logSigEps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_609": {
                "variable": {
                    "value": "xpred_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "xpred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_618": {
                "tensors": {
                    "value": "loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_618": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "ndarray": {
                    "value": "np.log(self.sigma_eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "self.config['kernel_bandwidth']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_embed_118": {
                "input": {
                    "value": "torch.exp(self.L_base)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_126": {
                "input": {
                    "value": "-self.logSigEps",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_138": {
                "input": {
                    "value": "self.logSigEps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_194": {
                "input": {
                    "value": "invsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.invSigEpsVec / sigfactor",
                            "BinOp"
                        ],
                        [
                            "invsig / self.sigma_scale",
                            "BinOp"
                        ]
                    ]
                }
            },
            "diag_314": {
                "variable": {
                    "value": "SigEps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SigEps * sigfactor.unsqueeze(-1)",
                            "BinOp"
                        ],
                        [
                            "sig * self.sigma_scale",
                            "BinOp"
                        ],
                        [
                            "self.model.SigEpsVec.reshape(-1, 1, 1).repeat(1, self.model.phi_aug_dim, self.model.phi_aug_dim)",
                            "Call"
                        ],
                        [
                            "self.model.SigEps",
                            "Attribute"
                        ],
                        [
                            "torch.diag(sigvec)",
                            "Call"
                        ],
                        [
                            "torch.diag(sigvec)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_314": {
                "variable": {
                    "value": "SigEps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_461": {
                "tensors": {
                    "value": "logps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_461": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_482": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.config['num_mmd_samples']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.model.x_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.model.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_512": {
                "input": {
                    "value": "-sq_dist / (2 * l)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_542": {
                "input": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum((xp.unsqueeze(-3) - x) ** 2, dim=-1)",
                            "Call"
                        ],
                        [
                            "dist / lenscale + torch.log(self.ob_dim * lenscale)",
                            "BinOp"
                        ],
                        [
                            "-torch.sum((xp.unsqueeze(-3) - x) ** 2, dim=-1) ** 2 / (2 * l)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "svd_704": {
                "variable": {
                    "value": "(_, Linv_sig, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Linv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Linv - 1.0 / (1 + phi_Linv_phi) * (Lphi @ Lphi.transpose(-1, -2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_705": {
                "variable": {
                    "value": "(_, Q_sig, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q + y.unsqueeze(-1).unsqueeze(-1) @ torch.transpose(phi, -1, -2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_706": {
                "variable": {
                    "value": "(_, K_sig, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q @ Linv",
                            "BinOp"
                        ],
                        [
                            "Q @ Linv",
                            "BinOp"
                        ],
                        [
                            "Kbar",
                            "variable"
                        ],
                        [
                            "Kbar + torch.sqrt(sigvec.unsqueeze(-1).unsqueeze(-1)) * (torch.randn_like(Kbar) @ Linv_chol)",
                            "BinOp"
                        ],
                        [
                            "(Linv @ Q.unsqueeze(-1)).squeeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "Q_init",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "L_asym_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linalg.cholesky(Linv_init)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_106": {
                "start": {
                    "value": "-5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "self.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_118": {
                "input": {
                    "value": "self.L_base",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_318": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_336": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.SigEpsVec",
                            "Attribute"
                        ],
                        [
                            "self.model.SigEpsVec",
                            "Attribute"
                        ],
                        [
                            "self.model.SigEpsVec",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cholesky_338": {
                "variable": {
                    "value": "Linv_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Linv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Linv - 1.0 / (1 + phi_Linv_phi) * (Lphi @ Lphi.transpose(-1, -2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_505": {
                "input": {
                    "value": "xi",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_505": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_526": {
                "input": {
                    "value": "k1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.kernel(d1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_538": {
                "input": {
                    "value": "self.ob_dim * lenscale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__682": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "config['grad_clip_value']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "self.y_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "L_asym_corr_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi_aug_dim",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_342": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_355": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sigvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.SigEpsVec",
                            "Attribute"
                        ],
                        [
                            "self.model.SigEpsVec",
                            "Attribute"
                        ],
                        [
                            "self.model.SigEpsVec",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cholesky_357": {
                "variable": {
                    "value": "Linv_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Linv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Linv - 1.0 / (1 + phi_Linv_phi) * (Lphi @ Lphi.transpose(-1, -2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_535": {
                "input": {
                    "value": "(xp.unsqueeze(-3) - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_537": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.config['max_evaluation_length']",
                            "Subscript"
                        ]
                    ]
                },
                "steps": {
                    "value": "max_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.config['max_evaluation_length']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_537": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_103": {
                "*size": {
                    "value": "self.y_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_367": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, u]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_484": {
                "input": {
                    "value": "sigvec.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_540": {
                "input": {
                    "value": "(xp.unsqueeze(-3) - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_674": {
                "variable": {
                    "value": "total_nll_val",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "total_loss_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_674": {
                "variable": {
                    "value": "total_nll_val",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_709": {
                "input": {
                    "value": "Linv_sig[dim, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_339": {
                "input": {
                    "value": "sigvec.unsqueeze(-1).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_359": {
                "*size": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.model.x_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.model.phi_aug_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_339": {
                "input": {
                    "value": "Kbar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q @ Linv",
                            "BinOp"
                        ],
                        [
                            "Q @ Linv",
                            "BinOp"
                        ],
                        [
                            "(Q @ Linv).squeeze(-2)",
                            "Call"
                        ],
                        [
                            "Q @ Linv",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_360": {
                "input": {
                    "value": "sigvec.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_186": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_219": {
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.backbone(x)",
                            "Call"
                        ],
                        [
                            "self.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ],
                        [
                            "self.model.encoder(z)",
                            "Call"
                        ],
                        [
                            "self.model.augment_phi(phi, phi_nom)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cholesky_328": {
                "input": {
                    "value": "SigEps * Linv",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/dataset.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "x_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xu[0, :, :o_dim]",
                            "Subscript"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, self.x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ],
                        [
                            "np.zeros((n_funcs, n_samples, x_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "u_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xu[0, :, o_dim:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "xp_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xp[0, ...]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/torch_dynamics.py": {
        "torch": {
            "save_25": {
                "obj": {
                    "value": "{'config': self.model.config, 'state_dict': self.model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "as_tensor_19": {
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ],
                        [
                            "next(self.model.parameters()).device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_62": {
                "variable": {
                    "value": "dmu_dx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.autograd.grad(mu[..., i].sum(), x, retain_graph=True)[0][..., None, :] for i in range(x_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "dmu_du",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.autograd.grad(mu[..., i].sum(), u, retain_graph=i + 1 < x_dim)[0][..., None, :] for i in range(x_dim)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "grad_62": {
                "outputs": {
                    "value": "mu[..., i].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_67": {
                "outputs": {
                    "value": "mu[..., i].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "i + 1 < x_dim",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "src/rover_sim/rover_updated.py": {
        "torch": {
            "full_like_97": {
                "variable": {
                    "value": "th2_guess",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state[0]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "state[0]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "th2_guess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.deg2rad(50)",
                            "Call"
                        ],
                        [
                            "torch.full_like(x2, th2_guess)",
                            "Call"
                        ],
                        [
                            "np.deg2rad(50)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_like_103": {
                "variable": {
                    "value": "th1_guess",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state[0]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "state[0]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[0]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "th1_guess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.deg2rad(50)",
                            "Call"
                        ],
                        [
                            "torch.full_like(x2, th1_guess)",
                            "Call"
                        ],
                        [
                            "np.deg2rad(50)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_586": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_587": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_682": {
                "variable": {
                    "value": "phi_nom_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_685": {
                "variable": {
                    "value": "QTRTcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Qtrans, Rtrans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_731": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_732": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_825": {
                "variable": {
                    "value": "phi_nom_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_828": {
                "variable": {
                    "value": "QTRTcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Qtrans, Rtrans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_595": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_596": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_648": {
                "variable": {
                    "value": "Q[wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-f0 * (f3 + A * f2), -f0 * sigma_m * A * f2, f0 * sigma_m * f1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_650": {
                "variable": {
                    "value": "R[wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0 * (-f4 + A * f1), f0 * sigma_m * A * f1, f0 * sigma_m * f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_679": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_691": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_692": {
                "variable": {
                    "value": "phi_nom_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_695": {
                "variable": {
                    "value": "QTRTcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Qtrans, Rtrans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_739": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_740": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_790": {
                "variable": {
                    "value": "Q[wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-f0 * (f3 + A * f2), -f0 * sigma_m * A * f2, f0 * sigma_m * f1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_792": {
                "variable": {
                    "value": "R[wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0 * (-f4 + A * f1), f0 * sigma_m * A * f1, f0 * sigma_m * f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_822": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_836": {
                "variable": {
                    "value": "phi_nom_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_839": {
                "variable": {
                    "value": "QTRTcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Qtrans, Rtrans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_605": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim_1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_606": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim_1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_653": {
                "variable": {
                    "value": "Q[:, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-f0 * (f3 + A * f2), -f0 * sigma_m * A * f2, f0 * sigma_m * f1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_655": {
                "variable": {
                    "value": "R[:, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0 * (-f4 + A * f1), f0 * sigma_m * A * f1, f0 * sigma_m * f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_681": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_701": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_702": {
                "variable": {
                    "value": "phi_nom_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim_1, x_dim, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "QTRTcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Qtrans, Rtrans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_748": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim_1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_749": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim_1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_795": {
                "variable": {
                    "value": "Q[:, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-f0 * (f3 + A * f2), -f0 * sigma_m * A * f2, f0 * sigma_m * f1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_797": {
                "variable": {
                    "value": "R[:, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0 * (-f4 + A * f1), f0 * sigma_m * A * f1, f0 * sigma_m * f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_824": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_833": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_847": {
                "variable": {
                    "value": "phi_nom_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x_dim_0, x_dim_1, x_dim, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_850": {
                "variable": {
                    "value": "QTRTcat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Qtrans, Rtrans]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_658": {
                "variable": {
                    "value": "Q[:, :, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-f0 * (f3 + A * f2), -f0 * sigma_m * A * f2, f0 * sigma_m * f1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_660": {
                "variable": {
                    "value": "R[:, :, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0 * (-f4 + A * f1), f0 * sigma_m * A * f1, f0 * sigma_m * f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_800": {
                "variable": {
                    "value": "Q[:, :, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-f0 * (f3 + A * f2), -f0 * sigma_m * A * f2, f0 * sigma_m * f1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_802": {
                "variable": {
                    "value": "R[:, :, wheel, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f0 * (-f4 + A * f1), f0 * sigma_m * A * f1, f0 * sigma_m * f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_835": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_844": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_846": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-sin(alpha1), -sin(alpha2), -sin(alpha3), cos(alpha1), cos(alpha2), cos(alpha3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/rover_sim/terrain.py": {
        "torch": {
            "full_like_19": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.const_ht",
                            "Attribute"
                        ],
                        [
                            "0.5 * (self.max_ht + self.min_ht) + 0.5 * (self.max_ht - self.min_ht) * np.sin(2 * np.pi * x / self.period)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (self.max_ht + self.min_ht) + 0.5 * (self.max_ht - self.min_ht) * (4 / p) * (x - p / 2 * exp) * (-1) ** exp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "full_like_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.5 * (self.max_ht - self.min_ht) * (2 * np.pi / self.period) * np.cos(2 * np.pi * x / self.period)",
                            "BinOp"
                        ],
                        [
                            "(-1) ** exp",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/train.py": {
        "torch": {
            "DataLoader_95": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "TorchDatasetWrapper(self.dataset, traj_len=self.T)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batchsize",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}